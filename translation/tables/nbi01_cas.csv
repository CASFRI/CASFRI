rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
1,CAS_ID,text,notEmpty(inventory_id);notNull(poly_id);notNull(src_filename);notNull(ogc_fid),"padConcat({inventory_id, src_filename, '', poly_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID,TRUE
2,INVENTORY_ID,text,notEmpty(inventory_id),copyText(inventory_id),Copies source value,TRUE
3,ORIG_STAND_ID,text,"notNull(poly_id);isInt(poly_id);isGreaterThan(poly_id, 0)",copyText(poly_id),Copies source value to ORIG_STAND_ID,TRUE
4,STAND_STRUCTURE,text,"notNull(src_filename);matchList(src_filename, {'Forest', 'geonb_forest_foret'}|INVALID_VALUE);notNull(l1vs);notNull(l2vs);isInt(l1vs);isInt(l2vs);sumIntMatchList({l1vs,l2vs}, {1,2,3,4,5,6})","sumIntMapText({l1vs,l2vs}, {1,2,3,4,5,6}, {'S','M','M','M','M','M'})","If sum of l1vs and l2vs is 1, stand_structure is S. If 2 or 3, stand_structure is M. If more than 3, stand_structure is C.",TRUE
5,NUM_OF_LAYERS,integer,true(),"countOfNotNull({l1s1, l1s2, l1s3, l1s4, l1s5}, {l2s1, l2s2, l2s3, l2s4, l2s5}, {slu}, 3)","Counts number of layers based on the presence of a not null value for attributes representing each layer. Assumes valid LYR1 row must have l1s1 or l1s2 or l1s3 or l1s4 or l1s5, LYR2 must have l2s1 or l2s2 or l2s3 or l2s4 or l2s5, NFL1 must have slu. Only 1 NFL layer possible per polygon. l1s1 can be null when l2s1 has a value.",TRUE
6,MAP_SHEET_ID,text,false(),nothingText(),Copies source value to MAP_SHEET_ID,TRUE
7,CASFRI_AREA,double precision,"geoIsValid(wkb_geometry, TRUE)",geoArea(wkb_geometry),Validates geometry then calculates area,TRUE
8,CASFRI_PERIMETER,double precision,"geoIsValid(wkb_geometry, TRUE)",geoPerimeter(wkb_geometry),Validates geometry then calculates perimeter,TRUE
9,SRC_INV_AREA,double precision,"notNull(shape_area);isNumeric(shape_area);isGreaterThan(shape_area, 0)",copyDouble(shape_area),Copies source value to SRC_INV_AREA,TRUE
10,STAND_PHOTO_YEAR,integer,"notNull(datayr);isInt(datayr);isBetween(datayr, 1900, 2020)",copyInt(datayr),Copies source value to STAND_PHOTO_YEAR,TRUE
