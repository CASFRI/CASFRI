rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
1,CAS_ID,text,notEmpty(inventory_id);notNull(src_filename);notNull(invproj_id);notNull(fc_id_1);notNull(ogc_fid),"padConcat({inventory_id, src_filename, invproj_id, fc_id_1, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(moisture);matchList(moisture,{'vx','x','sx','sm','m','sg','hg','sd','hd'})","mapText(moisture, {'vx','x','sx','sm','m','sg','hg','sd','hd'}, {'D','D','D','F','F','M','M','W','W'})",Maps source value to SOIL_MOIST_REG using lists of values,TRUE
3,STRUCTURE_PER,integer,"notNull(strc_per);isInt(strc_per);isBetween(strc_per,1,9)","mapInt(strc_per, {1,2,3,4,5,6,7,8,9}, {10,20,30,40,50,60,70,80,90})",Copy source value to STRUCTURE_PER and multiply by 10,TRUE
4,LAYER,integer,true(),"fvi01_countOfNotNull({dummy_sp1, dummy_sp2, dummy_sp3, dummy_sp4}, {dummy_usp1, dummy_usp2, dummy_usp3, dummy_usp4}, {dummy_type}, {dummy_utype}, max_layer_number, 'FALSE')","Count layers up to max_layer_number which is set by the createMappingsView() function in the workflow. Dummy variables are used here and in attribute_dependencies.csv to avoid two sets of values (sp1 and minsp1) being mapped to the same column (sp1). First set of dummy variables are overstory species 1 - 4, then understory species 1 - 4, then overstory nfl, then understory nfl. Custom helper function is a wrapper around countOfNotNull that first checks if the polygon-level type_class attributes have NFL values using matchList.",TRUE
5,LAYER_RANK,integer,false(|-8887),nothingInt(),No rank attribute,TRUE
6,CROWN_CLOSURE_UPPER,integer,"notNull(crownclos);isInt(crownclos);isBetween(crownclos,0,100);matchList(typeclas, {'BL','BM','BY','HE','HF','HG','SL','ST'})",copyInt(crownclos),"""The percentage of ground area covered by vertically projected crowns of the tree/ shrub / herb /bryoid layer within the polygon. Where vegetation is overlapping (such as a two-storey stand) only the visible portion of each layer is estimated."" Since polygon is either treed, shrub, herb or bryoid, crown closure is specific to whichever type is defined in the typeclas attribute. Only return crown closure here if row is nfl.",TRUE
7,CROWN_CLOSURE_LOWER,integer,"notNull(crownclos);isInt(crownclos);isBetween(crownclos,0,100);matchList(typeclas, {'BL','BM','BY','HE','HF','HG','SL','ST'})",copyInt(crownclos),"""The percentage of ground area covered by vertically projected crowns of the tree/ shrub / herb /bryoid layer within the polygon. Where vegetation is overlapping (such as a two-storey stand) only the visible portion of each layer is estimated."" Since polygon is either treed, shrub, herb or bryoid, crown closure is specific to whichever type is defined in the typeclas attribute. Only return crown closure here if row is nfl.",TRUE
8,HEIGHT_UPPER,double precision,false(),nothingDouble(),Height only applies to dominant and co-dominant trees,TRUE
9,HEIGHT_LOWER,double precision,false(),nothingDouble(),Height only applies to dominant and co-dominant trees,TRUE
10,NAT_NON_VEG,text,"notNull(typeclas);notEmpty(typeclas);matchList(typeclas,{'BE','BR','BU','CB','ES','LA','LL','LS','MO','MU','PO','RE','RI','RO','RS','RT'})","mapText(typeclas, {'BE','BR','BU','CB','ES','LA','LL','LS','MO','MU','PO','RE','RI','RO','RS','RT'}, {'BE','RK','EX','EX','EX','LA','EX','WS','EX','EX','LA','LA','RI','RK','WS','RK'})",Maps source value to NAT_NON_VEG using list of values,TRUE
11,NON_FOR_ANTH,text,"notNull(typeclas);notEmpty(typeclas);matchList(typeclas,{'AP','BP','EL','GP','TS'})","mapText(typeclas, {'AP','BP','EL','GP','TS'}, {'FA','SE','OT','IN','OT'})",Maps source value to NON_FOR_ANTH using list of values,TRUE
12,NON_FOR_VEG,text,"notNull(typeclas);notEmpty(typeclas);matchList(typeclas,{'BL','BM','BY','HE','HF','HG','SL','ST'})","mapText(typeclas, {'BL','BM','BY','HE','HF','HG','SL','ST'}, {'BR','BR','BR','HE','HF','HG','SL','ST'})",Maps source value to NON_FOR_VEG using list of values.,TRUE
