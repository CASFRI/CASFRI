rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"matchList(typeclas,{'BE','BR','BU','CB','ES','LA','LL','LS','MO','MU','PO','RE','RI','RO','RS','RT','SW','AP','BP','EL','GP','TS','RD','SH','SU','PM','BL','BM','BY','HE','HF','HG','SL','ST'})",NA,Translate only rows where typeclas has precise values., TRUE
1,CAS_ID,text,notEmpty(inventory_id);notNull(src_filename);notNull(map_sheet_id);notNull(orig_stand_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, map_sheet_id, orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID.,TRUE
2,SOIL_MOIST_REG,text,"notNull(soil_moist_reg);notEmpty(soil_moist_reg);matchList(soil_moist_reg,{'vx','x','sx','sm','m','sg','hg','sd','hd'})","mapText(soil_moist_reg, {'vx','x','sx','sm','m','sg','hg','sd','hd'}, {'DRY','DRY','DRY','MESIC','MESIC','MOIST','MOIST','WET','WET'})",Maps source value to SOIL_MOIST_REG using lists of values.,TRUE
3,STRUCTURE_PER,integer,"notNull(stand_structure);matchList(stand_structure, {'C', 'H', 'M', 'S', 'V'}|-8887);notNull(structure_per);isInt(structure_per);isBetween(structure_per,0,9)","fvi01_structure_per(stand_structure, structure_per)","Note that every polygon is either LYR or NFL, not both. If stand structure is C, V, S or M, return 100. If stand structure is H, return structure_val multiplied by 10. If structure is horizontal and percent is zero, return 100.",TRUE
4,LAYER,integer,true(),"fvi01_countOfNotNull({species_1_layer1, species_2_layer1, species_3_layer1, species_4_layer1}, {species_1_layer2, species_2_layer2, species_3_layer2, species_4_layer2}, typeclas_layer1, typeclas_layer2, layer)","Count layers up to max_layer_number which is set by the createMappingsView() function in the workflow. Counts layer 1 if typeclass is not an NFL class and species 1, 2, 3 or 4 is present. Counts layer 2 if mintypeclass is not an nfl class and species 1, 2, 3 or 4 is present. Counts layer 1 and layer 2 nfl if nfl codes is present.",TRUE
5,LAYER_RANK,integer,true(),copyInt(layer_rank),"Layer rank is assigned as 1 for overstory layer (e.g. typeclas), and 2 for understory layer (e.g. mintypeclas).",TRUE
6,CROWN_CLOSURE_UPPER,integer,"matchList(typeclas, {'BL','BM','BY','HE','HF','HG','SL','ST'}|-8887);notNull(crown_closure_upper);isInt(crown_closure_upper|-9997);isBetween(crown_closure_upper,0,100)",copyInt(crown_closure_upper),"""The percentage of ground area covered by vertically projected crowns of the tree/ shrub / herb /bryoid layer within the polygon. Where vegetation is overlapping (such as a two-storey stand) only the visible portion of each layer is estimated."" Since polygon is either treed, shrub, herb or bryoid, crown closure is specific to whichever type is defined in the typeclas attribute. Only return crown closure here if row is nfl.",TRUE
7,CROWN_CLOSURE_LOWER,integer,"matchList(typeclas, {'BL','BM','BY','HE','HF','HG','SL','ST'}|-8887);notNull(crown_closure_lower);isInt(crown_closure_lower|-9997);isBetween(crown_closure_lower,0,100)",copyInt(crown_closure_lower),"""The percentage of ground area covered by vertically projected crowns of the tree/ shrub / herb /bryoid layer within the polygon. Where vegetation is overlapping (such as a two-storey stand) only the visible portion of each layer is estimated."" Since polygon is either treed, shrub, herb or bryoid, crown closure is specific to whichever type is defined in the typeclas attribute. Only return crown closure here if row is nfl.",TRUE
8,HEIGHT_UPPER,double precision,false(),nothingDouble(),Height only applies to dominant and co-dominant trees,TRUE
9,HEIGHT_LOWER,double precision,false(),nothingDouble(),Height only applies to dominant and co-dominant trees,TRUE
10,NAT_NON_VEG,text,"notNull(typeclas);notEmpty(typeclas);matchList(typeclas,{'BE','BR','BU','CB','ES','LA','LL','LS','MO','MU','PO','RE','RI','RO','RS','RT','SW'})","mapText(typeclas, {'BE','BR','BU','CB','ES','LA','LL','LS','MO','MU','PO','RE','RI','RO','RS','RT','SW'}, {'BEACH','ROCK_RUBBLE','EXPOSED_LAND','EXPOSED_LAND','EXPOSED_LAND','LAKE','EXPOSED_LAND','WATER_SEDIMENT','EXPOSED_LAND','EXPOSED_LAND','LAKE','LAKE','RIVER','ROCK_RUBBLE','WATER_SEDIMENT','ROCK_RUBBLE','OCEAN'})",Maps source value to NAT_NON_VEG using list of values,TRUE
11,NON_FOR_ANTH,text,"notNull(typeclas);notEmpty(typeclas);matchList(typeclas,{'AP','BP','EL','GP','TS','RD','SH','SU','PM'})","mapText(typeclas, {'AP','BP','EL','GP','TS','RD','SH','SU','PM'}, {'FACILITY_INFRASTRUCTURE','SETTLEMENT','OTHER','INDUSTRIAL','OTHER','FACILITY_INFRASTRUCTURE','SETTLEMENT','SETTLEMENT','INDUSTRIAL'})",Maps source value to NON_FOR_ANTH using list of values,TRUE
12,NON_FOR_VEG,text,"notNull(typeclas);notEmpty(typeclas);matchList(typeclas,{'BL','BM','BY','HE','HF','HG','SL','ST'})","mapText(typeclas, {'BL','BM','BY','HE','HF','HG','SL','ST'}, {'BRYOID','BRYOID','BRYOID','HERBS','FORBS','GRAMINOIDS','LOW_SHRUB','TALL_SHRUB'})",Maps source value to NON_FOR_VEG using list of values.,TRUE
