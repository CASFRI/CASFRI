rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"notEmpty({dist_type_1, dist_type_2, dist_type_3}, TRUE)",NA,"Translate only rows where dist_type_1, dist_type_2 OR dist_type_3 is not empty", TRUE
1,CAS_ID,text,notEmpty(inventory_id);notEmpty(src_filename);notNull(orig_stand_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, '', orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','x','x'}, '-', TRUE, TRUE)",Concatenates five attributes to create CAS_ID,TRUE
2,DIST_TYPE_1,text,"getIndexNotNull({dist_year_1, dist_year_2, dist_year_3}, {dist_type_1, dist_type_2, dist_type_3}, 9999, 9999, 1);getIndexNotEmpty({dist_year_1, dist_year_2, dist_year_3}, {dist_type_1, dist_type_2, dist_type_3}, 9999, 9999, 1);getIndexMatchList({dist_year_1, dist_year_2, dist_year_3}, {dist_type_1, dist_type_2, dist_type_3},{'CO','BO','WI','HA','IN','DI','AK', 'SL', 'SI'}, 9999, 9999, 1)","getIndexMapText({dist_year_1, dist_year_2, dist_year_3}, {dist_type_1, dist_type_2, dist_type_3}, {'CO','BO','WI','HA','IN','DI','AK', 'SL', 'SI'}, {'CUT','BURN','WINDFALL','WEATHER','INSECT','DISEASE','OTHER','SLIDE','SILVICULTURE_TREATMENT'}, 9999, 9999, 1)","Order disturbances by year. Ties are ordered by non null values first, then by original order. Then pass the first value to mapText. Note that source values SN, S, W, C, and B appear in SK02 but are not in sfvi specs. These will return NOT_IN_SET.",TRUE
3,DIST_YEAR_1,integer,"getIndexNotNull({dist_year_1, dist_year_2, dist_year_3}, {dist_year_1, dist_year_2, dist_year_3}, 9999, 9999, 1);getIndexIsInt({dist_year_1, dist_year_2, dist_year_3}, {dist_year_1, dist_year_2, dist_year_3}, 9999, 9999, 1);getIndexNotMatchList({dist_year_1, dist_year_2, dist_year_3}, {dist_year_1, dist_year_2, dist_year_3}, {0}, 9999, 9999, 1|-9997);getIndexIsBetween({dist_year_1, dist_year_2, dist_year_3}, {dist_year_1, dist_year_2, dist_year_3}, 1000, 2020, 9999, 9999, 1)","getIndexCopyInt({dist_year_1, dist_year_2, dist_year_3}, {dist_year_1, dist_year_2, dist_year_3}, 9999, 9999, 1)","Order disturbances by year. Ties are ordered by non null values first, then by original order.  Validate the first year, then copy it. Zero years are caught as NULL.",TRUE
4,DIST_EXT_UPPER_1,integer,"getIndexNotNull({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_upper_1, dist_ext_upper_2, dist_ext_upper_3}, 9999, 9999, 1);getIndexIsInt({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_upper_1, dist_ext_upper_2, dist_ext_upper_3}, 9999, 9999, 1);getIndexIsBetween({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_upper_1, dist_ext_upper_2, dist_ext_upper_3}, 1, 5, 9999, 9999, 1)","getIndexMapInt({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_upper_1, dist_ext_upper_2, dist_ext_upper_3}, {1,2,3,4,5}, {25,50,75,95,100}, 9999, 9999, 1)","Order disturbances by year. Ties are ordered by non null values first, then by original order. Then pass the first value to mapText.",TRUE
5,DIST_EXT_LOWER_1,integer,"getIndexNotNull({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_lower_1, dist_ext_lower_2, dist_ext_lower_3}, 9999, 9999, 1);getIndexIsInt({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_lower_1, dist_ext_lower_2, dist_ext_lower_3}, 9999, 9999, 1);getIndexIsBetween({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_lower_1, dist_ext_lower_2, dist_ext_lower_3}, 1, 5, 9999, 9999, 1)","getIndexMapInt({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_lower_1, dist_ext_lower_2, dist_ext_lower_3}, {1,2,3,4,5}, {1,26,51,76,96}, 9999, 9999, 1)","Order disturbances by year. Ties are ordered by non null values first, then by original order. Then pass the first value to mapText.",TRUE
6,DIST_TYPE_2,text,"hasCountOfNotNullOrZero({dist_type_1, dist_year_1}, {dist_type_2, dist_year_2}, {dist_type_3, dist_year_3}, 2, FALSE|NOT_APPLICABLE);getIndexNotNull({dist_year_1, dist_year_2, dist_year_3}, {dist_type_1, dist_type_2, dist_type_3}, 9999, 9999, 2|UNKNOWN_VALUE);getIndexNotEmpty({dist_year_1, dist_year_2, dist_year_3}, {dist_type_1, dist_type_2, dist_type_3}, 9999, 9999, 2);getIndexMatchList({dist_year_1, dist_year_2, dist_year_3}, {dist_type_1, dist_type_2, dist_type_3},{'CO','BO','WI','HA','IN','DI','AK', 'SL', 'SI'}, 9999, 9999, 2)","getIndexMapText({dist_year_1, dist_year_2, dist_year_3}, {dist_type_1, dist_type_2, dist_type_3}, {'CO','BO','WI','HA','IN','DI','AK', 'SL', 'SI'}, {'CUT','BURN','WINDFALL','WEATHER','INSECT','DISEASE','OTHER','SLIDE','SILVICULTURE_TREATMENT'}, 9999, 9999, 2)","Check there are at least 2 disturbances. Order disturbances by year. Ties are ordered by non null values first, then by original order. Then pass the second value to mapText. Note that source values SN, S, W, C, and B appear in SK02 but are not in sfvi specs. These will return NOT_IN_SET.",TRUE
7,DIST_YEAR_2,integer,"hasCountOfNotNullOrZero({dist_type_1, dist_year_1}, {dist_type_2, dist_year_2}, {dist_type_3, dist_year_3}, 2, FALSE|-8887);getIndexNotNull({dist_year_1, dist_year_2, dist_year_3}, {dist_year_1, dist_year_2, dist_year_3}, 9999, 9999, 2|-8886);getIndexIsInt({dist_year_1, dist_year_2, dist_year_3}, {dist_year_1, dist_year_2, dist_year_3}, 9999, 9999, 2);getIndexNotMatchList({dist_year_1, dist_year_2, dist_year_3}, {dist_year_1, dist_year_2, dist_year_3}, {0}, 9999, 9999, 2|-9997);getIndexIsBetween({dist_year_1, dist_year_2, dist_year_3}, {dist_year_1, dist_year_2, dist_year_3}, 1000, 2020, 9999, 9999, 2)","getIndexCopyInt({dist_year_1, dist_year_2, dist_year_3}, {dist_year_1, dist_year_2, dist_year_3}, 9999, 9999, 2)","Check there are at least 2 disturbances. Order disturbances by year. Ties are ordered by non null values first, then by original order.  Validate the second year, then copy it. Zero years are caught as NULL.",TRUE
8,DIST_EXT_UPPER_2,integer,"hasCountOfNotNullOrZero({dist_type_1, dist_year_1}, {dist_type_2, dist_year_2}, {dist_type_3, dist_year_3}, 2, FALSE|-8887);getIndexNotNull({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_upper_1, dist_ext_upper_2, dist_ext_upper_3}, 9999, 9999, 2);getIndexIsInt({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_upper_1, dist_ext_upper_2, dist_ext_upper_3}, 9999, 9999, 2);getIndexIsBetween({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_upper_1, dist_ext_upper_2, dist_ext_upper_3}, 1, 5, 9999, 9999, 2)","getIndexMapInt({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_upper_1, dist_ext_upper_2, dist_ext_upper_3}, {1,2,3,4,5}, {25,50,75,95,100}, 9999, 9999, 2)","Check there are at least 2 disturbances. Order disturbances by year. Ties are ordered by non null values first, then by original order. Then pass the second value to mapText.",TRUE
9,DIST_EXT_LOWER_2,integer,"hasCountOfNotNullOrZero({dist_type_1, dist_year_1}, {dist_type_2, dist_year_2}, {dist_type_3, dist_year_3}, 2, FALSE|-8887);getIndexNotNull({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_lower_1, dist_ext_lower_2, dist_ext_lower_3}, 9999, 9999, 2);getIndexIsInt({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_lower_1, dist_ext_lower_2, dist_ext_lower_3}, 9999, 9999, 2);getIndexIsBetween({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_lower_1, dist_ext_lower_2, dist_ext_lower_3}, 1, 5, 9999, 9999, 2)","getIndexMapInt({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_lower_1, dist_ext_lower_2, dist_ext_lower_3}, {1,2,3,4,5}, {1,26,51,76,96}, 9999, 9999, 2)","Check there are at least 2 disturbances. Order disturbances by year. Ties are ordered by non null values first, then by original order. Then pass the second value to mapText.",TRUE
10,DIST_TYPE_3,text,"hasCountOfNotNullOrZero({dist_type_1, dist_year_1}, {dist_type_2, dist_year_2}, {dist_type_3, dist_year_3}, 3, TRUE|NOT_APPLICABLE);getIndexNotNull({dist_year_1, dist_year_2, dist_year_3}, {dist_type_1, dist_type_2, dist_type_3}, 9999, 9999, 3|UNKNOWN_VALUE);getIndexNotEmpty({dist_year_1, dist_year_2, dist_year_3}, {dist_type_1, dist_type_2, dist_type_3}, 9999, 9999, 3);getIndexMatchList({dist_year_1, dist_year_2, dist_year_3}, {dist_type_1, dist_type_2, dist_type_3},{'CO','BO','WI','HA','IN','DI','AK', 'SL', 'SI'}, 9999, 9999, 3)","getIndexMapText({dist_year_1, dist_year_2, dist_year_3}, {dist_type_1, dist_type_2, dist_type_3}, {'CO','BO','WI','HA','IN','DI','AK', 'SL', 'SI'}, {'CUT','BURN','WINDFALL','WEATHER','INSECT','DISEASE','OTHER','SLIDE','SILVICULTURE_TREATMENT'}, 9999, 9999, 3)","Check there are at least 3 disturbances. Order disturbances by year. Ties are ordered by non null values first, then by original order. Then pass the third value to mapText. Note that source values SN, S, W, C, and B appear in SK02 but are not in sfvi specs. These will return NOT_IN_SET.",TRUE
11,DIST_YEAR_3,integer,"hasCountOfNotNullOrZero({dist_type_1, dist_year_1}, {dist_type_2, dist_year_2}, {dist_type_3, dist_year_3}, 3, TRUE|-8887);getIndexNotNull({dist_year_1, dist_year_2, dist_year_3}, {dist_year_1, dist_year_2, dist_year_3}, 9999, 9999, 3|-8886);getIndexIsInt({dist_year_1, dist_year_2, dist_year_3}, {dist_year_1, dist_year_2, dist_year_3}, 9999, 9999, 3);getIndexNotMatchList({dist_year_1, dist_year_2, dist_year_3}, {dist_year_1, dist_year_2, dist_year_3}, {0}, 9999, 9999, 3|-9997);getIndexIsBetween({dist_year_1, dist_year_2, dist_year_3}, {dist_year_1, dist_year_2, dist_year_3}, 1000, 2020, 9999, 9999, 3)","getIndexCopyInt({dist_year_1, dist_year_2, dist_year_3}, {dist_year_1, dist_year_2, dist_year_3}, 9999, 9999, 3)","Check there are at least 3 disturbances. Order disturbances by year. Ties are ordered by non null values first, then by original order.  Validate the third year, then copy it. Zero years are caught as NULL.",TRUE
12,DIST_EXT_UPPER_3,integer,"hasCountOfNotNullOrZero({dist_type_1, dist_year_1}, {dist_type_2, dist_year_2}, {dist_type_3, dist_year_3}, 3, TRUE|-8887);getIndexNotNull({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_upper_1, dist_ext_upper_2, dist_ext_upper_3}, 9999, 9999, 3);getIndexIsInt({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_upper_1, dist_ext_upper_2, dist_ext_upper_3}, 9999, 9999, 3);getIndexIsBetween({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_upper_1, dist_ext_upper_2, dist_ext_upper_3}, 1, 5, 9999, 9999, 3)","getIndexMapInt({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_upper_1, dist_ext_upper_2, dist_ext_upper_3}, {1,2,3,4,5}, {25,50,75,95,100}, 9999, 9999, 3)","Check there are at least 3 disturbances. Order disturbances by year. Ties are ordered by non null values first, then by original order. Then pass the third value to mapText.",TRUE
13,DIST_EXT_LOWER_3,integer,"hasCountOfNotNullOrZero({dist_type_1, dist_year_1}, {dist_type_2, dist_year_2}, {dist_type_3, dist_year_3}, 3, TRUE|-8887);getIndexNotNull({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_lower_1, dist_ext_lower_2, dist_ext_lower_3}, 9999, 9999, 3);getIndexIsInt({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_lower_1, dist_ext_lower_2, dist_ext_lower_3}, 9999, 9999, 3);getIndexIsBetween({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_lower_1, dist_ext_lower_2, dist_ext_lower_3}, 1, 5, 9999, 9999, 3)","getIndexMapInt({dist_year_1, dist_year_2, dist_year_3}, {dist_ext_lower_1, dist_ext_lower_2, dist_ext_lower_3}, {1,2,3,4,5}, {1,26,51,76,96}, 9999, 9999, 3)","Check there are at least 3 disturbances. Order disturbances by year. Ties are ordered by non null values first, then by original order. Then pass the third value to mapText.",TRUE
14,LAYER,integer,false(|-8886),nothingInt(|-8886),Disturbance layer is unknown,TRUE
