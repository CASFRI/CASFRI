rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"matchList(non_for,{'Z','U','1', '2', '3', '4', '5', '6', '7', '13', '17', '18', '98', '99'})",NA,Translate only rows where shrln or vegetation communities have precise values.,FALSE
1,CAS_ID,text,notEmpty(inventory_id);notEmpty(src_filename);notNull(map_sheet_id);notNull(orig_stand_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, map_sheet_id, orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','x','x'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID.,FALSE
2,SOIL_MOIST_REG,text,"notNull(soil_moist_reg);notEmpty(soil_moist_reg);notMatchList(soil_moist_reg, {'U', 'Z'} |NOT_APPLICABLE);matchList(soil_moist_reg,{'0','1','2','3'})","mapText(soil_moist_reg, {'0','1','2','3'}, {'NULL_VALUE','WET','MESIC','DRY'})",Maps source value to SOIL_MOIST_REG using lists of values.,FALSE
3,STRUCTURE_PER,integer,"notNull(structure_per);notMatchList(structure_per, {'Z','U'}|-8886);isInt(structure_per);isBetween(structure_per,0,9)","mapInt(structure_per, {'0','1','2','3','4','5','6','7','8','9'}, {10,20,30,40,50,60,70,80,90,100})","Note that every polygon is either LYR or NFL, not both. If stand structure is C, V, S or M, return 100. If stand structure is H, return structure_val multiplied by 10. If structure is horizontal and percent is zero, return 100.",FALSE
4,LAYER,integer,true(),"pc02_countOfNotNull(v1sp1, v2sp1, v3sp1, v4sp1, v5sp1, v6sp1, v7sp1, v1pcm, v2pcm, v3pcm, v4pcm, v5pcm, v6pcm, v7pcm, shrln, 'translation', 'species_code_mapping', 'pc02_species_codes', layer)","Count layers up to max_layer_number which is set by the createMappingsView() function in the workflow. Counts layer 1 if typeclass is not an NFL class and species 1, 2, 3 or 4 is present. Counts layer 2 if mintypeclass is not an nfl class and species 1, 2, 3 or 4 is present. Counts layer 1 and layer 2 nfl if nfl codes is present.",FALSE
5,LAYER_RANK,integer,false(),nothingInt(),No rank attribute.,FALSE
6,CROWN_CLOSURE_UPPER,integer,false(),nothingInt(),Attribute does not occur,FALSE
7,CROWN_CLOSURE_LOWER,integer,false(),nothingInt(),Attribute does not occur,FALSE
8,HEIGHT_UPPER,double precision,"notNull(height_upper);notEmpty(height_upper|-8888);notMatchList(height_upper,{'Z','U'}| -8887);matchList(height_upper,{0,1,2,3,13,14,23,24,34,35,45}|-9999)","mapDouble(height_upper, {'0','1','2','3','13','14','23','24','34','35','45'}, {1,5,10,15,15,20,10,15,20,25,26})",Attribute does not occur,FALSE
9,HEIGHT_LOWER,double precision,"notNull(height_lower);notEmpty(height_lower|-8888);notMatchList(height_upper,{'Z','U'}| -8887);matchList(height_lower,{0,1,2,3,13,14,23,24,34,35,45}|-9999)","mapDouble(height_lower, {'0','1','2','3','13','14','23','24','34','35','45'}, {0,1,6,11,1,1,6,6,11,11,16})",Attribute does not occur,FALSE
10,NAT_NON_VEG,text,"notNull(non_for);notEmpty(non_for);matchList(non_for,{'0','Z','U'} | NOT_APPLICABLE)","mapText(non_for, {'Z','U'}, {'LAKE', 'LAKE'})",Maps source value to NAT_NON_VEG using list of values,FALSE
11,NON_FOR_ANTH,text,false(),nothingText(),Attribute does not occur,FALSE
12,NON_FOR_VEG,text,"notNull(non_for);notEmpty(non_for);matchList(non_for,{'1', '2', '3', '4', '5', '6', '7', '13', '17', '18', '98', '99'} | NOT_APPLICABLE)","mapText(non_for, {'1', '2', '3', '4', '5', '6', '7', '13', '17', '18', '98', '99'}, {'GRAMINOIDS', 'GRAMINOIDS', 'GRAMINOIDS', 'GRAMINOIDS', 'GRAMINOIDS', 'GRAMINOIDS', 'TALL_SHRUB', 'HERBS', 'GRAMINOIDS', 'LOW_SHRUB', 'LOW_SHRUB', 'GRAMINOIDS'})",Maps source value to NON_FOR_VEG using list of values.,FALSE
