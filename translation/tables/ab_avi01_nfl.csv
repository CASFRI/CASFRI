rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"notEmpty({nat_non, anth_veg, anth_non, nfl}, TRUE)",NA,"Translate only rows where nat_non, anth_veg, anth_non or nfl is not empty", TRUE
1,CAS_ID,text,notEmpty(inventory_id);notNull(src_filename);notNull(map_sheet_id);notNull(orig_stand_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, map_sheet_id, orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(soil_moist_reg);notEmpty(soil_moist_reg);matchList(soil_moist_reg,{'a','A','d','D','m','M','w','W'})","mapText(soil_moist_reg, {'a','A','d','D','m','M','w','W'}, {'A','A','D','D','F','F','W','W'})",Soil moisture applies to all vegetated land cover types. Maps source value to SOIL_MOIST_REG using lists of values,TRUE
3,STRUCTURE_PER,integer,"matchList({stand_structure, struc_val}, {'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'H7', 'H8', 'H9', 'C3', 'C4', 'C6', 'C7', 'C8', 'C9', 'S0', 'M0', 'M', 'MO', '0'})","mapInt({stand_structure, struc_val}, {'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'H7', 'H8', 'H9', 'C3', 'C4', 'C6', 'C7', 'C8', 'C9', 'S0', 'M0', 'M', 'MO', '0'}, {10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100})","Concatenate stand structure letter and structure percent value, then map to correct value.",TRUE
4,LAYER,integer,true(),"countOfNotNull({species_1_layer1}, {species_1_layer2}, {nfl_layer, anth_veg_layer, anth_non_layer, nat_non_layer}, {unfl_layer, uanth_veg_layer, uanth_non_layer, unat_non_layer}, layer, 'FALSE')",Count layers up to max_layer_number which is set by the createMappingsView() function in the workflow. Dummy variables are used here and in attribute_dependencies.csv to avoid two sets of values (sp1 and usp1) being mapped to the same column (sp1),TRUE
5,LAYER_RANK,integer,false(|-8887),nothingInt(),No rank attribute,TRUE
6,CROWN_CLOSURE_UPPER,integer,"notNull(nfl|-8887);notEmpty(nfl|-8887);matchList(nfl, {'SO', 'SC'}|-8887);notNull(nfl_crown_closure);notEmpty(nfl_crown_closure|-8888);isInt(nfl_crown_closure|-9997);matchList(nfl_crown_closure, {1,2,3,4,5,6,7,8,9,10}|-9999)","mapInt(nfl_crown_closure, {1,2,3,4,5,6,7,8,9,10}, {10,20,30,40,50,60,70,80,90,100})",NFL crown closure reported for shrub layers only as the percentage of polygon covered by shrub.,TRUE
7,CROWN_CLOSURE_LOWER,integer,"notNull(nfl|-8887);notEmpty(nfl|-8887);matchList(nfl, {'SO', 'SC'}|-8887);notNull(nfl_crown_closure);notEmpty(nfl_crown_closure|-8888);isInt(nfl_crown_closure|-9997);matchList(nfl_crown_closure, {1,2,3,4,5,6,7,8,9,10}|-9999)","mapInt(nfl_crown_closure, {1,2,3,4,5,6,7,8,9,10}, {10,20,30,40,50,60,70,80,90,100})",NFL crown closure reported for shrub layers only as the percentage of polygon covered by shrub.,TRUE
8,HEIGHT_UPPER,double precision,"notNull(nfl|-8887);notEmpty(nfl|-8887);matchList(nfl, {'SO', 'SC'}|-8887);notNull(nfl_height);isNumeric(nfl_height|-9997);isBetween(nfl_height,1,100)",copyDouble(nfl_height),"Height descriptors of 1 m to 6 m will only apply to shrub cover. If nfl is shrub, height value is < 6 and is the height of the shrub layer.",TRUE
9,HEIGHT_LOWER,double precision,"notNull(nfl|-8887);notEmpty(nfl|-8887);matchList(nfl, {'SO', 'SC'}|-8887);notNull(nfl_height);isNumeric(nfl_height|-9997);isBetween(nfl_height,1,100)",copyDouble(nfl_height),"Height descriptors of 1 m to 6 m will only apply to shrub cover. If nfl is shrub, height value is < 6 and is the height of the shrub layer. All layers identified as shrub do not have forest info.",TRUE
10,NAT_NON_VEG,text,"notNull(nat_non);notEmpty(nat_non);matchList(nat_non,{'NMB','NWF','NWL','MB','MC','MS','WF','WL','WR'})","mapText(nat_non, {'NMB','NWF','NWL','MB','MC','MS','WF','WL','WR'}, {'EX','FL','LA','EX','RK','WS','FL','LA','RI'})","Height descriptors of 1 m to 6 m will only apply to shrub cover. If nfl is shrub, height value is < 6 and is the height of the shrub layer. All layers identified as shrub do not have forest info.",TRUE
11,NON_FOR_ANTH,text,"hasCountOfNotNull({anth_veg, anth_non}, 1, 'TRUE');matchList(anth_veg, {'AIG','AIH','CIP','CIW','IW','PR','IP','P','A','IG','IH','II','SR'}, 'FALSE', 'TRUE');matchList(anth_non, {'AIG','AIH','CIP','CIW','IW','PR','IP','P','A','IG','IH','II','SR'}, 'FALSE', 'TRUE')","avi01_non_for_anth_translation(anth_veg, anth_non, {'AIG','AIH','CIP','CIW','IW','PR','IP','P','A','IG','IH','II','SR'}, {'IN','FA','FA','FA','CL','FA','FA','CL','CL','IN','FA','IN','SE'}, 'FALSE')","Custom CASFRI map function merges anth_veg and anth_non then runs mapText. Validation functions check exactly one input has a value, and that the value is in anth_veg or anth_non.",TRUE
12,NON_FOR_VEG,text,"notNull(nfl);notEmpty(nfl);matchList(nfl,{'HF','HG','SC','SO','BR'})","mapText(nfl, {'HF','HG','SC','SO','BR'}, {'HF','HG','SC','SO','BR'})",Maps source value to NON_FOR_VEG using list of values. FLAG-map list matches fri list. Is this correct?,TRUE
