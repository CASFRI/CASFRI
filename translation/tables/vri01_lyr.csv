rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
1,CAS_ID,text,notEmpty(inventory_id);notNull(src_filename);notNull(map_id);notNull(feature_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, map_id, feature_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(soil_moisture_regime_1);matchList(soil_moisture_regime_1,{0,1,2,3,4,5,6,7,8})","mapText(soil_moisture_regime_1, {0,1,2,3,4,5,6,7,8}, {'D','D','D','F','F','M','M','W','W'})",Maps source value to SOIL_MOIST_REG using lists of values,TRUE
3,STRUCTURE_PER,integer,true(),copyInt(100),No horizontal structure so structure_per should always be 100,TRUE
4,LAYER,integer,true(),"numberOfNotNull({species_cd_1, species_cd_2, species_cd_3, species_cd_4, species_cd_5, species_cd_6}, {dummy1, dummy2, dummy3, dummy4, dummy5, dummy6}, {land_cover_class_cd_1, bclcs_level_4, non_productive_descriptor_cd, non_veg_cover_type_1}, max_layer_number)",Count layers up to max_layer_number which is set by the createMappingsView() function in the workflow. Dummy variables are used here and in attribute_dependencies.csv to allow different numbers of variables to be used in BC08 and BC10,TRUE
5,LAYER_RANK,integer,notNull(dummy_rank),copyInt(dummy_rank),BC08 is always rank 1. BC10 uses a source attribute.,TRUE
6,CROWN_CLOSURE_UPPER,integer,"notNull(crown_closure);isInt(crown_closure);isBetween(crown_closure,0,100)",copyInt(crown_closure),Copies source value to CROWN_CLOSURE_UPPER,TRUE
7,CROWN_CLOSURE_LOWER,integer,"notNull(crown_closure);isInt(crown_closure);isBetween(crown_closure,0,100)",copyInt(crown_closure),Copies source value to CROWN_CLOSURE_LOWER,TRUE
8,HEIGHT_UPPER,double precision,"notNull(proj_height_1);isNumeric(proj_height_1);isGreaterThan(proj_height_1,'0.1');isLessThan(proj_height_1,100)",copyDouble(proj_height_1),Copies source value to HEIGHT_UPPER,TRUE
9,HEIGHT_LOWER,double precision,"notNull(proj_height_1);isNumeric(proj_height_1);isGreaterThan(proj_height_1,'0.1');isLessThan(proj_height_1,100)",copyDouble(proj_height_1),Copies source value to HEIGHT_LOWER,TRUE
10,PRODUCTIVE_FOR,text,"notNull(for_mgmt_land_base_ind);matchList(for_mgmt_land_base_ind,{'N','Y'})","mapText(for_mgmt_land_base_ind, {'N','Y'}, {'PP','PF'})",Waiting for a new helper function,TRUE
11,SPECIES_1,text,"notNull(species_cd_1);notEmpty(species_cd_1);matchTable(species_cd_1,'translation', 'bc_vri01_species')","lookupText(species_cd_1, 'translation', 'bc_vri01_species', 'spec1', 'TRUE')",Maps source value to SPECIES_1 using lookup table,TRUE
12,SPECIES_PER_1,integer,"notNull(species_pct_1);isNumeric(species_pct_1);isBetween(species_pct_1,0,100)",copyInt(species_pct_1),Copies source value to SPECIES_PER_1,TRUE
13,SPECIES_2,text,"notNull(species_cd_2);notEmpty(species_cd_2);matchTable(species_cd_2, 'translation', 'bc_vri01_species')","lookupText(species_cd_2, 'translation', 'bc_vri01_species', 'spec2', 'TRUE')",Maps source value to SPECIES_2 using lookup table,TRUE
14,SPECIES_PER_2,integer,"notNull(species_pct_2);isNumeric(species_pct_2);isBetween(species_pct_2,0,100)",copyInt(species_pct_2),Copies source value to SPECIES_PER_2,TRUE
15,SPECIES_3,text,"notNull(species_cd_3);notEmpty(species_cd_3);matchTable(species_cd_3, 'translation', 'bc_vri01_species')","lookupText(species_cd_3, 'translation', 'bc_vri01_species', 'spec3', 'TRUE')",Maps source value to SPECIES_3 using lookup table,TRUE
16,SPECIES_PER_3,integer,"notNull(species_pct_3);isNumeric(species_pct_3);isBetween(species_pct_3, 0, 100)",copyInt(species_pct_3),Copies source value to SPECIES_PER_3,TRUE
17,SPECIES_4,text,"notNull(species_cd_4);notEmpty(species_cd_4);matchTable(species_cd_4, 'translation', 'bc_vri01_species')","lookupText(species_cd_4, 'translation', 'bc_vri01_species', 'spec4', 'TRUE')",Maps source value to SPECIES_4 using lookup table,TRUE
18,SPECIES_PER_4,integer,"notNull(species_pct_4);isNumeric(species_pct_4);isBetween(species_pct_4, 0, 100)",copyInt(species_pct_4),Copies source value to SPECIES_PER_4,TRUE
19,SPECIES_5,text,"notNull(species_cd_5);notEmpty(species_cd_5);matchTable(species_cd_5, 'translation', 'bc_vri01_species')","lookupText(species_cd_5, 'translation', 'bc_vri01_species', 'spec5', 'TRUE')",Maps source value to SPECIES_5 using lookup table,TRUE
20,SPECIES_PER_5,integer,"notNull(species_pct_5);isNumeric(species_pct_5);isBetween(species_pct_5, 0, 100)",copyInt(species_pct_5),Copies source value to SPECIES_PER_5,TRUE
21,SPECIES_6,text,"notNull(species_cd_6);notEmpty(species_cd_6);matchTable(species_cd_6, 'translation', 'bc_vri01_species')","lookupText(species_cd_6, 'translation', 'bc_vri01_species', 'spec6', 'TRUE')",Maps source value to SPECIES_6 using lookup table,TRUE
22,SPECIES_PER_6,integer,"notNull(species_pct_6);isNumeric(species_pct_6);isBetween(species_pct_6, 0, 100)",copyInt(species_pct_6),Copies source value to SPECIES_PER_6,TRUE
23,SPECIES_7,text,false(),nothingText(),Attribute does not occur,TRUE
24,SPECIES_PER_7,integer,false(),nothingInt(),Attribute does not occur,TRUE
25,SPECIES_8,text,false(),nothingText(),Attribute does not occur,TRUE
26,SPECIES_PER_8,integer,false(),nothingInt(),Attribute does not occur,TRUE
27,SPECIES_9,text,false(),nothingText(),Attribute does not occur,TRUE
28,SPECIES_PER_9,integer,false(),nothingInt(),Attribute does not occur,TRUE
29,SPECIES_10,text,false(),nothingText(),Attribute does not occur,TRUE
30,SPECIES_PER_10,integer,false(),nothingInt(),Attribute does not occur,TRUE
31,ORIGIN_UPPER,integer,"notNull(proj_age_1);isInt(proj_age_1);isGreaterThan(proj_age_1, 1);isLessThan(proj_age_1, 999);notNull(projected_date);isIntSubstring(projected_date, 1, 4)","vri01_origin_translation(projected_date, proj_age_1)","Extracts year from date field, and subtracts age to get origin year. Validation checks for nulls, integers, that the year substring is an integer, and that the age is not zero.",TRUE
32,ORIGIN_LOWER,integer,"notNull(proj_age_1);isInt(proj_age_1);isGreaterThan(proj_age_1, 1);isLessThan(proj_age_1, 999);notNull(projected_date);isIntSubstring(projected_date, 1, 4)","vri01_origin_translation(projected_date, proj_age_1)","Extracts year from date field, and subtracts age to get origin year. Validation checks for nulls, integers, that the year substring is an integer, and that the age is not zero.",TRUE
33,SITE_CLASS,text,false(),nothingText(),Attribute does not occur,TRUE
34,SITE_INDEX,double precision,"countNotNull({site_index, est_site_index}, 1, 'FALSE', 'TRUE');isNumeric(site_index, 'TRUE');isNumeric(est_site_index, 'TRUE');isBetween(site_index, 0, 99, 'TRUE', 'TRUE', 'TRUE');isBetween(est_site_index, 0, 99, 'TRUE', 'TRUE', 'TRUE')","vri01_site_index_translation(site_index, est_site_index)","If site_index is present it should be returned, if only est_site_index is present it should be returned. Validation functions fails if both inputs are null or empty strings, or if an input is present but its not numeric, or not between 0-99.",TRUE
