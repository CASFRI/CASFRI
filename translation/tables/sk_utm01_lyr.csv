rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"notEmpty({species_1, species_2, species_3, species_4, species_5}, TRUE)",NA,Translate only rows where ospcomp is not empty, TRUE
1,CAS_ID,text,notEmpty(inventory_id);notNull(orig_stand_id);notNull(src_filename);notNull(ogc_fid),"padConcat({inventory_id, src_filename, '', orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(soil_moist_reg);notEmpty(soil_moist_reg);matchList(soil_moist_reg,{'VR','VRR','R','RW','W','WMW','MW','MWI','I','IP','P','PVP','VP'})","mapText(soil_moist_reg, {'VR','VRR','R','RW','W','WMW','MW','MWI','I','IP','P','PVP','VP'}, {'DRY','DRY','DRY','MESIC','MESIC','MESIC','MESIC','MOIST','MOIST','MOIST','MOIST','WET','WET'})",Maps soure value to SOIL_MOIST_REG,TRUE
3,STRUCTURE_PER,integer,true(),copyInt(100),No horizontal structure so structure percent is 100,TRUE
4,LAYER,integer,true(),"countOfNotNull({species_1_layer1, species_2_layer1, species_3_layer1, species_4_layer1, species_5_layer1}, {species_1_layer2, species_2_layer2}, {np}, layer, 'TRUE')","Count layers up to max_layer_number which is set by the createMappingsView() function in the workflow. Layers are the  canopy species, understory species, and non-forest types. Note different dummy names used for species in LAYER attributes and SPECIES attributes, this is because when translating layer 2, u1 and u2 are mapped to dummy_sp10 and dummy_sp11 but sp10 and sp11 still need to be mapped to dummy_sp1 and dummy_sp2. i.e. can't map two source columns to the same view column.",TRUE
5,LAYER_RANK,integer,false(),nothingInt(),Attribute does not occur,TRUE
6,CROWN_CLOSURE_UPPER,integer,"notNull(crown_closure_upper);notEmpty(crown_closure_upper|-8888);matchList(crown_closure_upper,{'A','B','C','D'}|-9997)","mapInt(crown_closure_upper, {'A','B','C','D'}, {30,55,80,100})",Maps source value to CROWN_CLOSURE_UPPER using lists of values. We assume crown closure is only valid for layer 1.,TRUE
7,CROWN_CLOSURE_LOWER,integer,"notNull(crown_closure_lower);notEmpty(crown_closure_lower|-8888);matchList(crown_closure_lower,{'A','B','C','D'}|-9997)","mapInt(crown_closure_lower, {'A','B','C','D'}, {11,31,56,81})",Maps source value to CROWN_CLOSURE_LOWER using lists of values. We assume crown closure is only valid for layer 1.,TRUE
8,HEIGHT_UPPER,double precision,"notNull(height_upper);notEmpty(height_upper|-8888);matchList(height_upper,{'5','10','15','20','25'})","mapDouble(height_upper, {'5','10','15','20','25'}, {7.5,12.5,17.5,22.5,100.0})",Maps source value to HEIGHT_UPPER. We assume height is only valid for layer 1.,TRUE
9,HEIGHT_LOWER,double precision,"notNull(height_lower);notEmpty(height_lower|-8888);matchList(height_lower,{'5','10','15','20','25'})","mapDouble(height_lower, {'5','10','15','20','25'}, {2.5,7.6,12.6,17.6,22.6})",Maps source value to HEIGHT_LOWER. We assume height is only valid for layer 1.,TRUE
10,PRODUCTIVITY,text,"matchList(productivity_type, {3100, 3200}|UNKNOWN_VALUE)","mapText(productivity_type, {3100, 3200}, {'NON_PRODUCTIVE_FOREST','NON_PRODUCTIVE_FOREST'})","If treed rock or treed muskeg, productivity is NON_PRODUCTIVE_FOREST, otherwise UNKNOWN",TRUE
11,PRODUCTIVITY_TYPE,text,"matchList(productivity_type, {3100, 3200}|UNKNOWN_VALUE)","mapText(productivity_type, {3100, 3200}, {'TREED_MUSKEG','TREED_ROCK'})",Maps treed muskeg and treed rock as productivity types,TRUE
12,SPECIES_1,text,"hasCountOfNotNull(species_1, species_2, species_3, species_4, species_5, 1, 'FALSE'|NOT_APPLICABLE)","sk_utm01_species_translation(1, species_1, species_2, species_3, species_4, species_5)","Validation checks there are at least as many species as the requested species number. Translation uses lookup table to translate species code after ignoring any empty string or null species codes.e.g. if only sp10 and sp20, sp20 is considered SPECIES_2.",TRUE
13,SPECIES_PER_1,integer,"sk_utm01_species_percent_validation(species_1, species_2, species_3, species_4, species_5); hasCountOfNotNull(species_1, species_2, species_3, species_4, species_5, 1, 'FALSE'|-8887)","sk_utm01_species_percent_translation(1, species_1, species_2, species_3, species_4, species_5)","Assigns percent based on many logical tests using the sa, sp10, sp11, sp12, sp20 and sp21 columns. See helper function code and appendix table for details. Validation checks if the combination of hardwood and softwood species is valid based on the list of combinations we expect to find. And that the required number of species exist.",TRUE
14,SPECIES_2,text,"hasCountOfNotNull(species_1, species_2, species_3, species_4, species_5, 2, 'FALSE'|NOT_APPLICABLE)","sk_utm01_species_translation(2, species_1, species_2, species_3, species_4, species_5)","Validation checks there are at least as many species as the requested species number. Translation uses lookup table to translate species code after ignoring any empty string or null species codes.e.g. if only sp10 and sp20, sp20 is considered SPECIES_2.",TRUE
15,SPECIES_PER_2,integer,"sk_utm01_species_percent_validation(species_1, species_2, species_3, species_4, species_5); hasCountOfNotNull(species_1, species_2, species_3, species_4, species_5, 2, 'FALSE'|-8887)","sk_utm01_species_percent_translation(2, species_1, species_2, species_3, species_4, species_5)","Assigns percent based on many logical tests using the sa, sp10, sp11, sp12, sp20 and sp21 columns. See helper function code and appendix table for details. Validation checks if the combination of hardwood and softwood species is valid based on the list of combinations we expect to find. And that the required number of species exist.",TRUE
16,SPECIES_3,text,"hasCountOfNotNull(species_1, species_2, species_3, species_4, species_5, 3, 'FALSE'|NOT_APPLICABLE)","sk_utm01_species_translation(3, species_1, species_2, species_3, species_4, species_5)","Validation checks there are at least as many species as the requested species number. Translation uses lookup table to translate species code after ignoring any empty string or null species codes.e.g. if only sp10 and sp20, sp20 is considered SPECIES_2.",TRUE
17,SPECIES_PER_3,integer,"sk_utm01_species_percent_validation(species_1, species_2, species_3, species_4, species_5); hasCountOfNotNull(species_1, species_2, species_3, species_4, species_5, 3, 'FALSE'|-8887)","sk_utm01_species_percent_translation(3, species_1, species_2, species_3, species_4, species_5)","Assigns percent based on many logical tests using the sa, sp10, sp11, sp12, sp20 and sp21 columns. See helper function code and appendix table for details. Validation checks if the combination of hardwood and softwood species is valid based on the list of combinations we expect to find. And that the required number of species exist.",TRUE
18,SPECIES_4,text,"hasCountOfNotNull(species_1, species_2, species_3, species_4, species_5, 4, 'FALSE'|NOT_APPLICABLE)","sk_utm01_species_translation(4, species_1, species_2, species_3, species_4, species_5)","Validation checks there are at least as many species as the requested species number. Translation uses lookup table to translate species code after ignoring any empty string or null species codes.e.g. if only sp10 and sp20, sp20 is considered SPECIES_2.",TRUE
19,SPECIES_PER_4,integer,"sk_utm01_species_percent_validation(species_1, species_2, species_3, species_4, species_5); hasCountOfNotNull(species_1, species_2, species_3, species_4, species_5, 4, 'FALSE'|-8887)","sk_utm01_species_percent_translation(4, species_1, species_2, species_3, species_4, species_5)","Assigns percent based on many logical tests using the sa, sp10, sp11, sp12, sp20 and sp21 columns. See helper function code and appendix table for details. Validation checks if the combination of hardwood and softwood species is valid based on the list of combinations we expect to find. And that the required number of species exist.",TRUE
20,SPECIES_5,text,"hasCountOfNotNull(species_1, species_2, species_3, species_4, species_5, 5, 'FALSE'|NOT_APPLICABLE)","sk_utm01_species_translation(5, species_1, species_2, species_3, species_4, species_5)","Validation checks there are at least as many species as the requested species number. Translation uses lookup table to translate species code after ignoring any empty string or null species codes.e.g. if only sp10 and sp20, sp20 is considered SPECIES_2.",TRUE
21,SPECIES_PER_5,integer,"sk_utm01_species_percent_validation(species_1, species_2, species_3, species_4, species_5); hasCountOfNotNull(species_1, species_2, species_3, species_4, species_5, 5, 'FALSE'|-8887)","sk_utm01_species_percent_translation(5, species_1, species_2, species_3, species_4, species_5)","Assigns percent based on many logical tests using the sa, sp10, sp11, sp12, sp20 and sp21 columns. See helper function code and appendix table for details. Validation checks if the combination of hardwood and softwood species is valid based on the list of combinations we expect to find. And that the required number of species exist.",TRUE
22,SPECIES_6,text,false(),nothingText(),Attribute does not occur,TRUE
23,SPECIES_PER_6,integer,false(),nothingInt(),attribute does not occur,TRUE
24,SPECIES_7,text,false(),nothingText(),attribute does not occur,TRUE
25,SPECIES_PER_7,integer,false(),nothingInt(),attribute does not occur,TRUE
26,SPECIES_8,text,false(),nothingText(),attribute does not occur,TRUE
27,SPECIES_PER_8,integer,false(),nothingInt(),attribute does not occur,TRUE
28,SPECIES_9,text,false(),nothingText(),attribute does not occur,TRUE
29,SPECIES_PER_9,integer,false(),nothingInt(),attribute does not occur,TRUE
30,SPECIES_10,text,false(),nothingText(),attribute does not occur,TRUE
31,SPECIES_PER_10,integer,false(),nothingInt(),attribute does not occur,TRUE
32,ORIGIN_UPPER,integer,"notNull(origin_upper);isInt(origin_upper);isBetween(origin_upper, 1000, 2020)",copyInt(origin_upper),Copies source value to ORIGIN_UPPER. Validation  returns error if origin is zero.,TRUE
33,ORIGIN_LOWER,integer,"notNull(origin_lower);isInt(origin_lower);isBetween(origin_lower, 1000, 2020)",copyInt(origin_lower),Copies source value to ORIGIN_LOWER. Validation  returns error if origin is zero.,TRUE
34,SITE_CLASS,text,false(),nothingText(),Attribute does not occur,TRUE
35,SITE_INDEX,double precision,false(),nothingDouble(),Attribute does not occur,TRUE
