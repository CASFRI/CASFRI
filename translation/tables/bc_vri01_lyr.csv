rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"notEmpty({species_1, species_2, species_3, species_4, species_5, species_6}, TRUE)",NA,"Translate only rows where species_cd_1, species_cd_2, species_cd_3, species_cd_4, species_cd_5 or species_cd_6 is not empty", TRUE
1,CAS_ID,text,notEmpty(inventory_id);notNull(src_filename);notNull(map_sheet_id);notNull(orig_stand_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, map_sheet_id, orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(soil_moisture_regime);matchList(soil_moisture_regime,{0,1,2,3,4,5,6,7,8})","mapText(soil_moisture_regime, {0,1,2,3,4,5,6,7,8}, {'DRY','DRY','DRY','MESIC','MESIC','MOIST','MOIST','WET','WET'})",Maps source value to SOIL_MOIST_REG using lists of values. Soil moisture is available for layers 1 and 2 as different attributes.,TRUE
3,STRUCTURE_PER,integer,true(),copyInt(100),No horizontal structure so structure_per should always be 100,TRUE
4,LAYER,integer,true(),"vri01_countOfNotNull({species_1_layer1, species_2_layer1, species_3_layer1, species_4_layer1, species_5_layer1, species_6_layer1}, {species_1_layer2, species_2_layer2, species_3_layer2, species_4_layer2, species_5_layer2, species_6_layer2}, inventory_standard_cd, land_cover_class_cd_1, bclcs_level_4, non_productive_descriptor_cd, non_veg_cover_type_1, layer, 'FALSE', inventory_id)","Custom function counts number of layers based on the presence of a not null value for attributes representing each layer. Assumes valid LYR1 row must have species_cd_1 or species_cd_2 or species_cd_3 or species_cd_4 or species_cd_5 or species_cd_6. Layer 2 only available for BC10, in BC08 the layer 2 values get mapped to NULL. Additionally the custom function does not consider layer 2 values when counting layers, this is why inventory_id is required. For the NFL attributes, presence of not null values is not sufficient. The custom function runs the NFL functions vri01_non_for_veg_validation, vri01_nat_non_veg_validation and vri01_non_for_anth_validation to see if there is an nfl value present based on the input values. If there is, one layer is added to the count.",TRUE
5,LAYER_RANK,integer,notNull(layer_rank),copyInt(layer_rank),BC08 is always rank 1. BC10 uses a source attribute. Note that in BC10 layer 1 or layer 2 can be assigned rank 1. The other attribute is always null. Not rank greater than 1 is ever assigned.,TRUE
6,CROWN_CLOSURE_UPPER,integer,"notNull(crown_closure_upper);isInt(crown_closure_upper);isBetween(crown_closure_upper,0,100)",copyInt(crown_closure_upper),Copies source value to CROWN_CLOSURE_UPPER,TRUE
7,CROWN_CLOSURE_LOWER,integer,"notNull(crown_closure_lower);isInt(crown_closure_lower);isBetween(crown_closure_lower,0,100)",copyInt(crown_closure_lower),Copies source value to CROWN_CLOSURE_LOWER,TRUE
8,HEIGHT_UPPER,double precision,"notNull(height_upper);isNumeric(height_upper);isBetween(height_upper,'0.1',100)",copyDouble(height_upper),Copies source value to HEIGHT_UPPER,TRUE
9,HEIGHT_LOWER,double precision,"notNull(height_lower);isNumeric(height_lower);isBetween(height_lower,'0.1',100)",copyDouble(height_lower),Copies source value to HEIGHT_LOWER,TRUE
10,PRODUCTIVE_FOR,text,"notNull(productive_for);notEmpty(productive_for);matchList(productive_for,{'N','Y'})","mapText(productive_for, {'N','Y'}, {'POTENTIALLY_PRODUCTIVE','PRODUCTIVE_FOREST'})",Maps source attribute to PRODUCTIVE_FOR,TRUE
11,SPECIES_1,text,"notNull(species_1);notEmpty(species_1);matchTable(species_1, 'translation', 'species_code_mapping', 'bc_species_codes', 'TRUE')","lookupText(species_1, 'translation', 'species_code_mapping', 'bc_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_1 using lookup table,TRUE
12,SPECIES_PER_1,integer,"notNull(species_per_1);isNumeric(species_per_1|-9997);isGreaterThan(species_per_1, 1|-8888);isBetween(species_per_1,1,100)",copyInt(species_per_1),Copies source value to SPECIES_PER_1. Zero is assigned NULL_VALUE.,TRUE
13,SPECIES_2,text,"notNull(species_2);notEmpty(species_2);matchTable(species_2, 'translation', 'species_code_mapping', 'bc_species_codes', 'TRUE')","lookupText(species_2, 'translation', 'species_code_mapping', 'bc_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_2 using lookup table,TRUE
14,SPECIES_PER_2,integer,"notNull(species_per_2);isNumeric(species_per_2|-9997);isGreaterThan(species_per_2, 1|-8888);isBetween(species_per_2,1,100)",copyInt(species_per_2),Copies source value to SPECIES_PER_2. Zero is assigned NULL_VALUE.,TRUE
15,SPECIES_3,text,"notNull(species_3);notEmpty(species_3);matchTable(species_3, 'translation', 'species_code_mapping', 'bc_species_codes', 'TRUE')","lookupText(species_3, 'translation', 'species_code_mapping', 'bc_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_3 using lookup table,TRUE
16,SPECIES_PER_3,integer,"notNull(species_per_3);isNumeric(species_per_3|-9997);isGreaterThan(species_per_3, 1|-8888);isBetween(species_per_3, 1, 100)",copyInt(species_per_3),Copies source value to SPECIES_PER_3. Zero is assigned NULL_VALUE.,TRUE
17,SPECIES_4,text,"notNull(species_4);notEmpty(species_4);matchTable(species_4, 'translation', 'species_code_mapping', 'bc_species_codes', 'TRUE')","lookupText(species_4, 'translation', 'species_code_mapping', 'bc_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_4 using lookup table,TRUE
18,SPECIES_PER_4,integer,"notNull(species_per_4);isNumeric(species_per_4|-9997);isGreaterThan(species_per_4, 1|-8888);isBetween(species_per_4, 1, 100)",copyInt(species_per_4),Copies source value to SPECIES_PER_4. Zero is assigned NULL_VALUE.,TRUE
19,SPECIES_5,text,"notNull(species_5);notEmpty(species_5);matchTable(species_5, 'translation', 'species_code_mapping', 'bc_species_codes', 'TRUE')","lookupText(species_5, 'translation', 'species_code_mapping', 'bc_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_5 using lookup table,TRUE
20,SPECIES_PER_5,integer,"notNull(species_per_5);isNumeric(species_per_5|-9997);isGreaterThan(species_per_5, 1|-8888);isBetween(species_per_5, 1, 100)",copyInt(species_per_5),Copies source value to SPECIES_PER_5. Zero is assigned NULL_VALUE.,TRUE
21,SPECIES_6,text,"notNull(species_6);notEmpty(species_6);matchTable(species_6, 'translation', 'species_code_mapping', 'bc_species_codes', 'TRUE')","lookupText(species_6, 'translation', 'species_code_mapping', 'bc_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_6 using lookup table,TRUE
22,SPECIES_PER_6,integer,"notNull(species_per_6);isNumeric(species_per_6|-9997);isGreaterThan(species_per_6, 1|-8888);isBetween(species_per_6, 1, 100)",copyInt(species_per_6),Copies source value to SPECIES_PER_6. Zero is assigned NULL_VALUE.,TRUE
23,SPECIES_7,text,false(),nothingText(),Attribute does not occur,TRUE
24,SPECIES_PER_7,integer,false(),nothingInt(),Attribute does not occur,TRUE
25,SPECIES_8,text,false(),nothingText(),Attribute does not occur,TRUE
26,SPECIES_PER_8,integer,false(),nothingInt(),Attribute does not occur,TRUE
27,SPECIES_9,text,false(),nothingText(),Attribute does not occur,TRUE
28,SPECIES_PER_9,integer,false(),nothingInt(),Attribute does not occur,TRUE
29,SPECIES_10,text,false(),nothingText(),Attribute does not occur,TRUE
30,SPECIES_PER_10,integer,false(),nothingInt(),Attribute does not occur,TRUE
31,ORIGIN_UPPER,integer,"notNull(proj_age_1);isInt(proj_age_1);isGreaterThan(proj_age_1, 1);isLessThan(proj_age_1, 999);notNull(projected_date);isIntSubstring(projected_date, 1, 4);isBetweenSubstring(projected_date,1,4,0,2020)","vri01_origin_translation(projected_date, proj_age_1)","Extracts year from date field, and subtracts age to get origin year. Validation checks for nulls, integers, that the year substring is an integer, and that the age is not zero.",TRUE
32,ORIGIN_LOWER,integer,"notNull(proj_age_1);isInt(proj_age_1);isGreaterThan(proj_age_1, 1);isLessThan(proj_age_1, 999);notNull(projected_date);isIntSubstring(projected_date, 1, 4);isBetweenSubstring(projected_date,1,4,0,2020)","vri01_origin_translation(projected_date, proj_age_1)","Extracts year from date field, and subtracts age to get origin year. Validation checks for nulls, integers, that the year substring is an integer, and that the age is not zero.",TRUE
33,SITE_CLASS,text,false(),nothingText(),Attribute does not occur,TRUE
34,SITE_INDEX,double precision,"hasCountOfNotNull({site_index, est_site_index}, 1, 'FALSE');isNumeric(site_index, 'TRUE');isNumeric(est_site_index, 'TRUE');isBetween(site_index, 0, 99, 'TRUE', 'TRUE', 'TRUE');isBetween(est_site_index, 0, 99, 'TRUE', 'TRUE', 'TRUE')","vri01_site_index_translation(site_index, est_site_index)","If site_index is present it should be returned, if only est_site_index is present it should be returned. Validation function fails if both inputs are null or empty strings, or if an input is present but its not numeric, or not between 0-99. Uses the acceptNull argument to allow null values during validation and therefore can check both input attributes for isNumeric and isBetween.",TRUE
