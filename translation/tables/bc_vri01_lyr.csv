rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"notEmpty({species_1, species_2, species_3, species_4, species_5, species_6}, TRUE)",NA,"Translate only rows where species_cd_1, species_cd_2, species_cd_3, species_cd_4, species_cd_5 or species_cd_6 is not empty. Also include alpine forest rows in layer 1 when they occur. Map row_non_productive_cd to NULL on lyaer 2 so we don`t create a layer 2 row unless there is species info.", TRUE
1,CAS_ID,text,notEmpty(inventory_id);notEmpty(src_filename);notNull(map_sheet_id);notNull(orig_stand_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, map_sheet_id, orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','x','x'}, '-', TRUE, TRUE)",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(soil_moisture_regime);matchList(soil_moisture_regime,{0,1,2,3,4,5,6,7,8})","mapText(soil_moisture_regime, {0,1,2,3,4,5,6,7,8}, {'DRY','DRY','DRY','MESIC','MESIC','MOIST','MOIST','WET','WET'})",Maps source value to SOIL_MOIST_REG using lists of values. Soil moisture is available for layers 1 and 2 as different attributes.,TRUE
3,STRUCTURE_PER,integer,true(),copyInt(100),No horizontal structure so structure_per should always be 100,TRUE
4,STRUCTURE_RANGE,double precision,false(),nothingDouble(),No complex stands identified,TRUE
5,LAYER,integer,true(),"bc_lyr_layer_translation(height_1_layer1, height_2_layer1, species_pct_1_layer1, species_pct_2_layer1, height_1_layer2, height_2_layer2, species_pct_1_layer2, species_pct_2_layer2, {species_1_layer1, species_2_layer1, species_3_layer1, species_4_layer1, species_5_layer1, species_6_layer1}, {species_1_layer2, species_2_layer2, species_3_layer2, species_4_layer2, species_5_layer2, species_6_layer2}, layer)","Reorder the layers that exist in the polygon by height and return the index of the layer being processed. Custom function calculate heught of each layer using bc_height(), then passes the heights to lyr_layer_translation()",TRUE
6,LAYER_RANK,integer,notNull(layer_rank);isInt(layer_rank),copyInt(layer_rank),BC08 is always rank 1. BC10 uses a source attribute. Note that in BC10 layer 1 or layer 2 can be assigned rank 1. The other attribute is always null. Not rank greater than 1 is ever assigned.,TRUE
7,CROWN_CLOSURE_UPPER,integer,"notNull(crown_closure_upper);isInt(crown_closure_upper);isBetween(crown_closure_upper,0,100)",copyInt(crown_closure_upper),Copies source value to CROWN_CLOSURE_UPPER,TRUE
8,CROWN_CLOSURE_LOWER,integer,"notNull(crown_closure_lower);isInt(crown_closure_lower);isBetween(crown_closure_lower,0,100)",copyInt(crown_closure_lower),Copies source value to CROWN_CLOSURE_LOWER,TRUE
9,HEIGHT_UPPER,double precision,"isNumeric(height_1, TRUE); isNumeric(height_2, TRUE); isNumeric(species_pct_1, TRUE); isNumeric(species_pct_2, TRUE); hasCountOfNotNullOrZero({height_1}, {height_2}, 1, FALSE|-8888)","bc_height(height_1, height_2, species_pct_1, species_pct_2)","Custom function calculates a weighted average of height using the percent values for species 1 and 2. Null height values are ignored. Validation makes sure all input values are either numeric or null. Validation checks that at least one height value exists. Otherwise the formula returns null. If only one height value present, the other one is returned. If both percents are null, the average height is returned.",TRUE
10,HEIGHT_LOWER,double precision,"isNumeric(height_1, TRUE); isNumeric(height_2, TRUE); isNumeric(species_pct_1, TRUE); isNumeric(species_pct_2, TRUE); hasCountOfNotNullOrZero({height_1}, {height_2}, 1, FALSE|-8888)","bc_height(height_1, height_2, species_pct_1, species_pct_2)","Custom function calculates a weighted average of height using the percent values for species 1 and 2. Null height values are ignored. Validation makes sure all input values are either numeric or null. Validation checks that at least one height value exists. Otherwise the formula returns null. If only one height value present, the other one is returned. If both percents are null, the average height is returned.",TRUE
11,PRODUCTIVITY,text,"notNull(productivity|UNKNOWN_VALUE);notEmpty(productivity|UNKNOWN_VALUE);matchList(productivity,{'N','Y'}|UNKNOWN_VALUE)","mapText(productivity, {'N','Y'}, {'NON_PRODUCTIVE_FOREST','PRODUCTIVE_FOREST'})",Assigns productive forest for areas identified in the BC forest management land base indicator. Otherwise assigns NON_PRODUCTIVE_FOREST where for_mgmt_land_base_ind is N.,TRUE
12,PRODUCTIVITY_TYPE,text,"matchListTwice(non_productive_descriptor_cd, productivity, {'AF'}, {'Y'}|UNKNOWN_VALUE)","mapTextNotNullIndex(non_productive_descriptor_cd,{'AF'},{'ALPINE_FOREST'}, productivity,{'Y'},{'HARVESTABLE'}, 1)","Assign the non-productive type Alpine Forest, and assign any rows in the forest management land base as Harvestable. If a row is both alpine forest and harvestable, alpine forest should take priority since the fact that it is harvestable is also indicated with the PRODUCTIVITY value PRODUCTIVE.",TRUE
13,SPECIES_1,text,"notNull(species_1);notEmpty(species_1);matchTable(species_1, 'translation', 'species_code_mapping', 'bc_species_codes', TRUE)","lookupText(species_1, 'translation', 'species_code_mapping', 'bc_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_1 using lookup table,TRUE
14,SPECIES_PER_1,integer,"notNull(species_per_1);isNumeric(species_per_1|-9997);isGreaterThan(species_per_1, 1|-8888);isBetween(species_per_1,1,100)",copyInt(species_per_1),Copies source value to SPECIES_PER_1. Zero is assigned NULL_VALUE.,TRUE
15,SPECIES_2,text,"notNull(species_2);notEmpty(species_2);matchTable(species_2, 'translation', 'species_code_mapping', 'bc_species_codes', TRUE)","lookupText(species_2, 'translation', 'species_code_mapping', 'bc_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_2 using lookup table,TRUE
16,SPECIES_PER_2,integer,"notNull(species_per_2);isNumeric(species_per_2|-9997);isGreaterThan(species_per_2, 1|-8888);isBetween(species_per_2,1,100)",copyInt(species_per_2),Copies source value to SPECIES_PER_2. Zero is assigned NULL_VALUE.,TRUE
17,SPECIES_3,text,"notNull(species_3);notEmpty(species_3);matchTable(species_3, 'translation', 'species_code_mapping', 'bc_species_codes', TRUE)","lookupText(species_3, 'translation', 'species_code_mapping', 'bc_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_3 using lookup table,TRUE
18,SPECIES_PER_3,integer,"notNull(species_per_3);isNumeric(species_per_3|-9997);isGreaterThan(species_per_3, 1|-8888);isBetween(species_per_3, 1, 100)",copyInt(species_per_3),Copies source value to SPECIES_PER_3. Zero is assigned NULL_VALUE.,TRUE
19,SPECIES_4,text,"notNull(species_4);notEmpty(species_4);matchTable(species_4, 'translation', 'species_code_mapping', 'bc_species_codes', TRUE)","lookupText(species_4, 'translation', 'species_code_mapping', 'bc_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_4 using lookup table,TRUE
20,SPECIES_PER_4,integer,"notNull(species_per_4);isNumeric(species_per_4|-9997);isGreaterThan(species_per_4, 1|-8888);isBetween(species_per_4, 1, 100)",copyInt(species_per_4),Copies source value to SPECIES_PER_4. Zero is assigned NULL_VALUE.,TRUE
21,SPECIES_5,text,"notNull(species_5);notEmpty(species_5);matchTable(species_5, 'translation', 'species_code_mapping', 'bc_species_codes', TRUE)","lookupText(species_5, 'translation', 'species_code_mapping', 'bc_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_5 using lookup table,TRUE
22,SPECIES_PER_5,integer,"notNull(species_per_5);isNumeric(species_per_5|-9997);isGreaterThan(species_per_5, 1|-8888);isBetween(species_per_5, 1, 100)",copyInt(species_per_5),Copies source value to SPECIES_PER_5. Zero is assigned NULL_VALUE.,TRUE
23,SPECIES_6,text,"notNull(species_6);notEmpty(species_6);matchTable(species_6, 'translation', 'species_code_mapping', 'bc_species_codes', TRUE)","lookupText(species_6, 'translation', 'species_code_mapping', 'bc_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_6 using lookup table,TRUE
24,SPECIES_PER_6,integer,"notNull(species_per_6);isNumeric(species_per_6|-9997);isGreaterThan(species_per_6, 1|-8888);isBetween(species_per_6, 1, 100)",copyInt(species_per_6),Copies source value to SPECIES_PER_6. Zero is assigned NULL_VALUE.,TRUE
25,SPECIES_7,text,false(),nothingText(),Attribute does not occur,TRUE
26,SPECIES_PER_7,integer,false(),nothingInt(),Attribute does not occur,TRUE
27,SPECIES_8,text,false(),nothingText(),Attribute does not occur,TRUE
28,SPECIES_PER_8,integer,false(),nothingInt(),Attribute does not occur,TRUE
29,SPECIES_9,text,false(),nothingText(),Attribute does not occur,TRUE
30,SPECIES_PER_9,integer,false(),nothingInt(),Attribute does not occur,TRUE
31,SPECIES_10,text,false(),nothingText(),Attribute does not occur,TRUE
32,SPECIES_PER_10,integer,false(),nothingInt(),Attribute does not occur,TRUE
33,ORIGIN_UPPER,integer,"notNull(proj_age_1);isInt(proj_age_1);isGreaterThan(proj_age_1, 1);isLessThan(proj_age_1, 999);notNull(projected_date);isIntSubstring(projected_date, 1, 4);isBetweenSubstring(projected_date,1,4,1000,2020)","vri01_origin_translation(projected_date, proj_age_1)","Extracts year from date field, and subtracts age to get origin year. Validation checks for nulls, integers, that the year substring is an integer, and that the age is not zero.",TRUE
34,ORIGIN_LOWER,integer,"notNull(proj_age_1);isInt(proj_age_1);isGreaterThan(proj_age_1, 1);isLessThan(proj_age_1, 999);notNull(projected_date);isIntSubstring(projected_date, 1, 4);isBetweenSubstring(projected_date,1,4,1000,2020)","vri01_origin_translation(projected_date, proj_age_1)","Extracts year from date field, and subtracts age to get origin year. Validation checks for nulls, integers, that the year substring is an integer, and that the age is not zero.",TRUE
35,SITE_CLASS,text,false(),nothingText(),Attribute does not occur,TRUE
36,SITE_INDEX,double precision,"hasCountOfNotNull({site_index, est_site_index}, 1, FALSE);isNumeric(site_index, TRUE);isNumeric(est_site_index, TRUE);isBetween(site_index, 0, 99, TRUE, TRUE, TRUE);isBetween(est_site_index, 0, 99, TRUE, TRUE, TRUE)","vri01_site_index_translation(site_index, est_site_index)","If site_index is present it should be returned, if only est_site_index is present it should be returned. Validation function fails if both inputs are null or empty strings, or if an input is present but its not numeric, or not between 0-99. Uses the acceptNull argument to allow null values during validation and therefore can check both input attributes for isNumeric and isBetween.",TRUE
