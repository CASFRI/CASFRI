rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"notEmpty({species_1, species_2, species_3, species_4, species_5}, TRUE);matchList(row_wc, {'FW'})",NA,"Translate only rows where l1s1, l1s2, l1s3, l1s4 or l1s5 is not empty. And where wc is FW (treed muskeg). Note that row productivity values are mapped to null for layer 2, this is to avoid double counting in the case that only productivity values are available. So layer 2 will only be included if layer 2 species info is available.", TRUE
1,CAS_ID,text,notEmpty(inventory_id);notNull(orig_stand_id);notNull(src_filename);notNull(ogc_fid),"padConcat({inventory_id, src_filename, '', orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,false(|UNKNOWN_VALUE),nothingText(),Attribute does not occur,TRUE
3,STRUCTURE_PER,integer,true(),copyInt(100),No horizontal structure so structure percent is 100,TRUE
4,STRUCTURE_RANGE,double precision,false(),nothingDouble(),No complex structure,TRUE
5,LAYER,integer,true(),"nb_lyr_layer_translation({height_layer1, height_layer2}, {species_1_layer1, species_2_layer1, species_3_layer1, species_4_layer1, species_5_layer1}, {species_1_layer2, species_2_layer2, species_3_layer2, species_4_layer2, species_5_layer2}, row_wc, layer)","Reorder the layers that exist in the polygon by height and return the index of the layer being processed. If there is a FW value for wc, it is treated as a valid layer in layer 1. Species never have values when wc if FW, so rows with PRODUCTIVITY_TYPE of TREED_MUSKEG should always be layer 1.",TRUE
6,LAYER_RANK,integer,true(),copyInt(layer_rank),"Layer rank is assigned as 1 for overstory layer (e.g. l1s1), and 2 for understory layer (e.g. l2s1).",TRUE
7,CROWN_CLOSURE_UPPER,integer,"notNull(crown_closure_upper);notEmpty(crown_closure_upper|-8888);isNumeric(crown_closure_upper);matchList(crown_closure_upper,{0,1,2,3,4,5}|-9997)","mapInt(crown_closure_upper, {0,1,2,3,4,5}, {10,30,50,70,90,100})",Maps source value to CROWN_CLOSURE_UPPER using lists of values,TRUE
8,CROWN_CLOSURE_LOWER,integer,"notNull(crown_closure_lower);notEmpty(crown_closure_lower|-8888);isNumeric(crown_closure_lower);matchList(crown_closure_lower,{0,1,2,3,4,5}|-9997)","mapInt(crown_closure_lower, {0,1,2,3,4,5}, {0,10,31,51,71,91})",Maps source value to CROWN_CLOSURE_LOWER using lists of values,TRUE
9,HEIGHT_UPPER,double precision,"notNull(height_upper);isNumeric(height_upper);isBetween(height_upper,0,100,FALSE,TRUE)",copyDouble(height_upper),Copies source value to HEIGHT_UPPER,TRUE
10,HEIGHT_LOWER,double precision,"notNull(height_lower);isNumeric(height_lower);isBetween(height_lower,0,100,FALSE,TRUE)",copyDouble(height_lower),Copies source value to HEIGHT_LOWER,TRUE
11,PRODUCTIVITY,text,"matchListTwice(fst, wc, {1,2,3,4,5,6,7}, {'FW'}|UNKNOWN_VALUE)","mapTextNotNullIndex(fst, {1,2,3,4,5,6,7}, {'PRODUCTIVE_FOREST','PRODUCTIVE_FOREST','NON_PRODUCTIVE_FOREST','PRODUCTIVE_FOREST','PRODUCTIVE_FOREST','NON_PRODUCTIVE_FOREST','PRODUCTIVE_FOREST'}, wc, {'FW'}, {'NON_PRODUCTIVE_FOREST'}, 1)","Maps productivity types based on manual descriptions. Note that fst values 2 and 5 indicate polygons with a mix of merchantable and unmerchantable trees, we include these as PRODUCTIVE_FOR. Also maps wetland value forest wetland to non productive. Note that wc is only FW when fst is null.",TRUE
12,PRODUCTIVITY_TYPE,text,"matchListTwice(fst, wc, {1,2,4,5,7}, {'FW'}|UNKNOWN_VALUE)","mapTextNotNullIndex(fst, {1,2,4,5,7}, {'HARVESTABLE','HARVESTABLE','HARVESTABLE','HARVESTABLE','HARVESTABLE'}, wc, {'FW'}, {'TREED_MUSKEG'}, 1)",Fst types 3 and 6 are UNKNOWN because we dont know the type of unproductive. All productive fst values are HARVESTABLE. Forested wetland is set to TREED_MUSKEG. Note that wc is only FW when fst is null.,TRUE
13,SPECIES_1,text,"notNull(species_1);notEmpty(species_1);matchTable(species_1, 'translation', 'species_code_mapping', 'nb_species_codes', 'TRUE')","lookupText(species_1, 'translation', 'species_code_mapping', 'nb_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_1 using lookup table,TRUE
14,SPECIES_PER_1,integer,"notNull(species_per_1);notEmpty(species_per_1);isInt(species_per_1|-9997);matchList(species_per_1, {1,2,3,4,5,6,7,8,9,10}|-9999)","mapInt(species_per_1, {1,2,3,4,5,6,7,8,9,10}, {10,20,30,40,50,60,70,80,90,100})",Maps source value to SPECIES_PER_1 by multiplying by 10,TRUE
15,SPECIES_2,text,"notNull(species_2);notEmpty(species_2);matchTable(species_2, 'translation', 'species_code_mapping', 'nb_species_codes', 'TRUE')","lookupText(species_2, 'translation', 'species_code_mapping', 'nb_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_2 using lookup table,TRUE
16,SPECIES_PER_2,integer,"notNull(species_per_2);notEmpty(species_per_2);isInt(species_per_1|-9997);matchList(species_per_2, {1,2,3,4,5,6,7,8,9,10}|-9999)","mapInt(species_per_2, {1,2,3,4,5,6,7,8,9,10}, {10,20,30,40,50,60,70,80,90,100})",Maps source value to SPECIES_PER_2 by multiplying by 10,TRUE
17,SPECIES_3,text,"notNull(species_3);notEmpty(species_3);matchTable(species_3, 'translation', 'species_code_mapping', 'nb_species_codes', 'TRUE')","lookupText(species_3, 'translation', 'species_code_mapping', 'nb_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_3 using lookup table,TRUE
18,SPECIES_PER_3,integer,"notNull(species_per_3);notEmpty(species_per_3);isInt(species_per_1|-9997);matchList(species_per_3, {1,2,3,4,5,6,7,8,9,10}|-9999)","mapInt(species_per_3, {1,2,3,4,5,6,7,8,9,10}, {10,20,30,40,50,60,70,80,90,100})",Maps source value to SPECIES_PER_3 by multiplying by 10,TRUE
19,SPECIES_4,text,"notNull(species_4);notEmpty(species_4);matchTable(species_4, 'translation', 'species_code_mapping', 'nb_species_codes', 'TRUE')","lookupText(species_4, 'translation', 'species_code_mapping', 'nb_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_4 using lookup table,TRUE
20,SPECIES_PER_4,integer,"notNull(species_per_4);notEmpty(species_per_4);isInt(species_per_1|-9997);matchList(species_per_4, {1,2,3,4,5,6,7,8,9,10}|-9999)","mapInt(species_per_4, {1,2,3,4,5,6,7,8,9,10}, {10,20,30,40,50,60,70,80,90,100})",Maps source value to SPECIES_PER_4 by multiplying by 10,TRUE
21,SPECIES_5,text,"notNull(species_5);notEmpty(species_5);matchTable(species_5, 'translation', 'species_code_mapping', 'nb_species_codes', 'TRUE')","lookupText(species_5, 'translation', 'species_code_mapping', 'nb_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_5 using lookup table,TRUE
22,SPECIES_PER_5,integer,"notNull(species_per_5);notEmpty(species_per_5);isInt(species_per_1|-9997);matchList(species_per_5, {1,2,3,4,5,6,7,8,9,10}|-9999)","mapInt(species_per_5, {1,2,3,4,5,6,7,8,9,10}, {10,20,30,40,50,60,70,80,90,100})",Maps source value to SPECIES_PER_5 by multiplying by 10,TRUE
23,SPECIES_6,text,false(),nothingText(),Attribute does not occur,TRUE
24,SPECIES_PER_6,integer,false(),nothingInt(),Attribute does not occur,TRUE
25,SPECIES_7,text,false(),nothingText(),Attribute does not occur,TRUE
26,SPECIES_PER_7,integer,false(),nothingInt(),Attribute does not occur,TRUE
27,SPECIES_8,text,false(),nothingText(),Attribute does not occur,TRUE
28,SPECIES_PER_8,integer,false(),nothingInt(),Attribute does not occur,TRUE
29,SPECIES_9,text,false(),nothingText(),Attribute does not occur,TRUE
30,SPECIES_PER_9,integer,false(),nothingInt(),Attribute does not occur,TRUE
31,SPECIES_10,text,false(),nothingText(),Attribute does not occur,TRUE
32,SPECIES_PER_10,integer,false(),nothingInt(),Attribute does not occur,TRUE
33,ORIGIN_UPPER,integer,"notNull(origin_upper);isInt(origin_upper);isBetween(origin_upper, 1000, 2020)",copyInt(origin_lower),origin_lower,TRUE
34,ORIGIN_LOWER,integer,"notNull(origin_lower);isInt(origin_lower);isBetween(origin_lower, 1000, 2020)",copyInt(origin_lower),Copies (l1estyr) to ORIGIN_LOWER,TRUE
35,SITE_CLASS,text,false(),nothingText(),Attribute does not occur,TRUE
36,SITE_INDEX,double precision,false(),nothingDouble(),Attribute does not occur,TRUE
