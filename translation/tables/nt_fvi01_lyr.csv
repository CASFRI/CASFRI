rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"notEmpty({species_1, species_2, species_3, species_4}, TRUE)",NA,"Translate only rows where sp1, sp2, sp3 or sp4 is not empty", TRUE
1,CAS_ID,text,notEmpty(inventory_id);notNull(src_filename);notNull(map_sheet_id);notNull(orig_stand_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, map_sheet_id, orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(soil_moist_reg);notEmpty(soil_moist_reg);matchList(soil_moist_reg,{'vx','x','sx','sm','m','sg','hg','sd','hd'})","mapText(soil_moist_reg, {'vx','x','sx','sm','m','sg','hg','sd','hd'}, {'D','D','D','F','F','M','M','W','W'})",Maps source value to SOIL_moisture using lists of values,TRUE
3,STRUCTURE_PER,integer,"notNull(structure_per);isInt(structure_per);isBetween(structure_per,0,9)","mapInt(structure_per, {0,1,2,3,4,5,6,7,8,9}, {100,10,20,30,40,50,60,70,80,90})",Copy source value to STRUCTURE_PER and multiply by 10. Source value 0 is translated to 100.,TRUE
4,LAYER,integer,true(),"fvi01_countOfNotNull({species_1_layer1, species_2_layer1, species_3_layer1, species_4_layer1}, {species_1_layer2, species_2_layer2, species_3_layer2, species_4_layer2}, {typeclas_layer1}, {typeclas_layer2}, layer, 'FALSE')","Count layers up to max_layer_number which is set by the createMappingsView() function in the workflow. Dummy variables are used here and in attribute_dependencies.csv to avoid two sets of values (sp1 and minsp1) being mapped to the same column (sp1). First set of dummy variables are overstory species 1 - 4, then understory species 1 - 4, then overstory nfl, then understory nfl. Custom helper function is a wrapper around countOfNotNull that first checks if the polygon-level type_class attributes have NFL values using matchList.",TRUE
5,LAYER_RANK,integer,false(),nothingInt(),No rank attribute,TRUE
6,CROWN_CLOSURE_UPPER,integer,"notNull(crown_closure_upper);isInt(crown_closure_upper);matchList(typeclas, {'TC','TB','TM'}|-8887);isBetween(crown_closure_upper,0,100)",copyInt(crown_closure_upper),Copy source value to CROWN_CLOSURE_UPPER if layer type is forested,TRUE
7,CROWN_CLOSURE_LOWER,integer,"notNull(crown_closure_lower);isInt(crown_closure_lower);matchList(typeclas, {'TC','TB','TM'}|-8887);isBetween(crown_closure_lower,0,100)",copyInt(crown_closure_lower),Copy source value to CROWN_CLOSURE_UPPER if type is forested,TRUE
8,HEIGHT_UPPER,double precision,"notNull(height_upper);isNumeric(height_upper);matchList(typeclas, {'TC','TB','TM'}|-8887);isBetween(height_upper,1,100)",copyDouble(height_upper),Copies source value to HEIGHT_UPPER if type is forested,TRUE
9,HEIGHT_LOWER,double precision,"notNull(height_lower);isNumeric(height_lower);matchList(typeclas, {'TC','TB','TM'}|-8887);isBetween(height_lower,1,100)",copyDouble(height_lower),Copies source value to HEIGHT_LOWER if type is forested,TRUE
10,PRODUCTIVE_FOR,text,false(),nothingText(),Waiting for a new helper function,TRUE
11,SPECIES_1,text,"notNull(species_1);notEmpty(species_1);matchList(typeclas, {'TC','TB','TM'}|NOT_APPLICABLE);matchTable(species_1,'translation','nt_fvi01_species','TRUE')","lookupText(species_1, 'translation', 'nt_fvi01_species', 'spec1', 'TRUE')",Maps source value to SPECIES_1 using lookup table. Checks polygon is forest type.,TRUE
12,SPECIES_PER_1,integer,"notNull(species_per_1);isInt(species_per_1);matchList(typeclas, {'TC','TB','TM'}|-8887);isBetween(species_per_1,0,100)",copyInt(species_per_1),Copies source value to SPECIES_PER_1. Checks polygon is forest type.,TRUE
13,SPECIES_2,text,"notNull(species_2);notEmpty(species_2);matchList(typeclas, {'TC','TB','TM'}|NOT_APPLICABLE);matchTable(species_2,'translation','nt_fvi01_species','TRUE')","lookupText(species_2, 'translation', 'nt_fvi01_species', 'spec2', 'TRUE')",Maps source value to SPECIES_2 using lookup table. Checks polygon is forest type.,TRUE
14,SPECIES_PER_2,integer,"notNull(species_per_2);isInt(species_per_2);matchList(typeclas, {'TC','TB','TM'}|-8887);isBetween(species_per_2,0,100)",copyInt(species_per_2),Copies source value to SPECIES_PER_2. Checks polygon is forest type.,TRUE
15,SPECIES_3,text,"notNull(species_3);notEmpty(species_3);matchList(typeclas, {'TC','TB','TM'}|NOT_APPLICABLE);matchTable(species_3,'translation','nt_fvi01_species','TRUE')","lookupText(species_3, 'translation', 'nt_fvi01_species', 'spec3', 'TRUE')",Maps source value to SPECIES_3 using lookup table. Checks polygon is forest type.,TRUE
16,SPECIES_PER_3,integer,"notNull(species_per_3);isInt(species_per_3);matchList(typeclas, {'TC','TB','TM'}|-8887);isBetween(species_per_3,0,100)",copyInt(species_per_3),Copies source value to SPECIES_PER_3. Checks polygon is forest type.,TRUE
17,SPECIES_4,text,"notNull(species_4);notEmpty(species_4);matchList(typeclas, {'TC','TB','TM'}|NOT_APPLICABLE);matchTable(species_4,'translation','nt_fvi01_species','TRUE')","lookupText(species_4, 'translation', 'nt_fvi01_species', 'spec4', 'TRUE')",Maps source value to SPECIES_4 using lookup table. Checks polygon is forest type.,TRUE
18,SPECIES_PER_4,integer,"notNull(species_per_4);isInt(species_per_4);matchList(typeclas, {'TC','TB','TM'}|-8887);isBetween(species_per_4,0,100)",copyInt(species_per_4),Copies source value to SPECIES_PER_4. Checks polygon is forest type.,TRUE
19,SPECIES_5,text,false(),nothingText(),Attribute does not occur,TRUE
20,SPECIES_PER_5,integer,false(),nothingInt(),Attribute does not occur,TRUE
21,SPECIES_6,text,false(),nothingText(),Attribute does not occur,TRUE
22,SPECIES_PER_6,integer,false(),nothingInt(),Attribute does not occur,TRUE
23,SPECIES_7,text,false(),nothingText(),Attribute does not occur,TRUE
24,SPECIES_PER_7,integer,false(),nothingInt(),Attribute does not occur,TRUE
25,SPECIES_8,text,false(),nothingText(),Attribute does not occur,TRUE
26,SPECIES_PER_8,integer,false(),nothingInt(),Attribute does not occur,TRUE
27,SPECIES_9,text,false(),nothingText(),Attribute does not occur,TRUE
28,SPECIES_PER_9,integer,false(),nothingInt(),Attribute does not occur,TRUE
29,SPECIES_10,text,false(),nothingText(),Attribute does not occur,TRUE
30,SPECIES_PER_10,integer,false(),nothingInt(),Attribute does not occur,TRUE
31,ORIGIN_UPPER,integer,"notNull(origin_upper);isInt(origin_upper);isBetween(origin_upper,1500,2020)",copyInt(origin_upper),Copies (origin) to ORIGIN_UPPER,TRUE
32,ORIGIN_LOWER,integer,"notNull(origin_lower);isInt(origin_lower);isBetween(origin_lower,1500,2020)",copyInt(origin_lower),Copies (origin) to ORIGIN_LOWER,TRUE
33,SITE_CLASS,text,"notNull(site_class);notEmpty(site_class);matchList(site_class,{5,4,3,2,1})","mapText(site_class, {5,4,3,2,1}, {'U','P','M','G','G'})",Maps source value to SITE_CLASS using lists of values,TRUE
34,SITE_INDEX,double precision,"notNull(site_index);isNumeric(site_index);isBetween(site_index,1,99)",copyDouble(site_index),Copy source attribute,TRUE
