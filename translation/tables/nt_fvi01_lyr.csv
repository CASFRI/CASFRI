rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
1,CAS_ID,text,notEmpty(inventory_id);notNull(src_filename);notNull(invproj_id);notNull(fc_id_1);notNull(ogc_fid),"padConcat({inventory_id, src_filename, invproj_id, fc_id_1, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(moisture);matchList(moisture,{'vx','x','sx','sm','m','sg','hg','sd','hd'})","mapText(moisture, {'vx','x','sx','sm','m','sg','hg','sd','hd'}, {'D','D','D','F','F','M','M','W','W'})",Maps source value to SOIL_moisture using lists of values,TRUE
3,STRUCTURE_PER,integer,"notNull(strc_per);isInt(strc_per);isBetween(strc_per,1,9)","mapInt(strc_per, {1,2,3,4,5,6,7,8,9}, {10,20,30,40,50,60,70,80,90})",Copy source value to STRUCTURE_PER and multiply by 10,TRUE
4,LAYER,integer,true(),"countOfNotNull({dummy_sp1, dummy_sp2, dummy_sp3, dummy_sp4}, {dummy_usp1, dummy_usp2, dummy_usp3, dummy_usp4}, {dummy_type}, {dummy_utype}, max_layer_number, 'FALSE')",Count layers up to max_layer_number which is set by the createMappingsView() function in the workflow. Dummy variables are used here and in attribute_dependencies.csv to avoid two sets of values (sp1 and minsp1) being mapped to the same column (sp1),TRUE
5,LAYER_RANK,integer,false(|-8887),nothingInt(),No rank attribute,TRUE
6,CROWN_CLOSURE_UPPER,integer,"notNull(crownclos);isInt(crownclos);matchList(typeclas, {'TC','TB','TM'});isBetween(crownclos,0,100)",copyInt(crownclos),Copy source value to CROWN_CLOSURE_UPPER,TRUE
7,CROWN_CLOSURE_LOWER,integer,"notNull(crownclos);isInt(crownclos);matchList(typeclas, {'TC','TB','TM'});isBetween(crownclos,0,100)",copyInt(crownclos),Copy source value to CROWN_CLOSURE_UPPER,TRUE
8,HEIGHT_UPPER,double precision,"notNull(height);isNumeric(height);matchList(typeclas, {'TC','TB','TM'});isGreaterThan(height,1);isLessThan(height,100)",copyDouble(height),Copies source value to HEIGHT_UPPER,TRUE
9,HEIGHT_LOWER,double precision,"notNull(height);isNumeric(height);matchList(typeclas, {'TC','TB','TM'});isGreaterThan(height,1);isLessThan(height,100)",copyDouble(height),Copies source value to HEIGHT_LOWER,TRUE
10,PRODUCTIVE_FOR,text,false(),nothingText(),Waiting for a new helper function,TRUE
11,SPECIES_1,text,"notNull(sp1);notEmpty(sp1);matchList(typeclas, {'TC','TB','TM'});matchTable(sp1,'translation','nt_fvi01_species','TRUE')","lookupText(sp1, 'translation', 'nt_fvi01_species', 'spec1', 'TRUE')",Maps source value to SPECIES_1 using lookup table. Checks polygon is forest type.,TRUE
12,SPECIES_PER_1,integer,"notNull(sp1_per);isInt(sp1_per);matchList(typeclas, {'TC','TB','TM'});isBetween(sp1_per,0,100)",copyInt(sp1_per),Copies source value to SPECIES_PER_1. Checks polygon is forest type.,TRUE
13,SPECIES_2,text,"notNull(sp2);notEmpty(sp2);matchList(typeclas, {'TC','TB','TM'});matchTable(sp2,'translation','nt_fvi01_species','TRUE')","lookupText(sp2, 'translation', 'nt_fvi01_species', 'spec2', 'TRUE')",Maps source value to SPECIES_2 using lookup table. Checks polygon is forest type.,TRUE
14,SPECIES_PER_2,integer,"notNull(sp2per);isInt(sp2per);matchList(typeclas, {'TC','TB','TM'});isBetween(sp2per,0,100)",copyInt(sp2per),Copies source value to SPECIES_PER_2. Checks polygon is forest type.,TRUE
15,SPECIES_3,text,"notNull(sp3);notEmpty(sp3);matchList(typeclas, {'TC','TB','TM'});matchTable(sp3,'translation','nt_fvi01_species','TRUE')","lookupText(sp3, 'translation', 'nt_fvi01_species', 'spec3', 'TRUE')",Maps source value to SPECIES_3 using lookup table. Checks polygon is forest type.,TRUE
16,SPECIES_PER_3,integer,"notNull(sp3per);isInt(sp3per);matchList(typeclas, {'TC','TB','TM'});isBetween(sp3per,0,100)",copyInt(sp3per),Copies source value to SPECIES_PER_3. Checks polygon is forest type.,TRUE
17,SPECIES_4,text,"notNull(sp4);notEmpty(sp4);matchList(typeclas, {'TC','TB','TM'});matchTable(sp4,'translation','nt_fvi01_species','TRUE')","lookupText(sp4, 'translation', 'nt_fvi01_species', 'spec4', 'TRUE')",Maps source value to SPECIES_4 using lookup table. Checks polygon is forest type.,TRUE
18,SPECIES_PER_4,integer,"notNull(sp4per);isInt(sp4per);matchList(typeclas, {'TC','TB','TM'});isBetween(sp4per,0,100)",copyInt(sp4per),Copies source value to SPECIES_PER_4. Checks polygon is forest type.,TRUE
19,SPECIES_5,text,false(),nothingText(),Attribute does not occur,TRUE
20,SPECIES_PER_5,integer,false(),nothingInt(),Attribute does not occur,TRUE
21,SPECIES_6,text,false(),nothingText(),Attribute does not occur,TRUE
22,SPECIES_PER_6,integer,false(),nothingInt(),Attribute does not occur,TRUE
23,SPECIES_7,text,false(),nothingText(),Attribute does not occur,TRUE
24,SPECIES_PER_7,integer,false(),nothingInt(),Attribute does not occur,TRUE
25,SPECIES_8,text,false(),nothingText(),Attribute does not occur,TRUE
26,SPECIES_PER_8,integer,false(),nothingInt(),Attribute does not occur,TRUE
27,SPECIES_9,text,false(),nothingText(),Attribute does not occur,TRUE
28,SPECIES_PER_9,integer,false(),nothingInt(),Attribute does not occur,TRUE
29,SPECIES_10,text,false(),nothingText(),Attribute does not occur,TRUE
30,SPECIES_PER_10,integer,false(),nothingInt(),Attribute does not occur,TRUE
31,ORIGIN_UPPER,integer,"notNull(origin);isInt(origin);isBetween(origin,1500,2020)",copyInt(origin),Copies (origin) to ORIGIN_UPPER,TRUE
32,ORIGIN_LOWER,integer,"notNull(origin);isInt(origin);isBetween(origin,1500,2020)",copyInt(origin),Copies (origin) to ORIGIN_LOWER,TRUE
33,SITE_CLASS,text,"notNull(siteclass);matchList(siteclass,{5,4,3,2,1})","mapText(siteclass, {5,4,3,2,1}, {'U','P','M','G','G'})",Maps source value to SITE_CLASS using lists of values,TRUE
34,SITE_INDEX,double precision,"notNull(si_50);isNumeric(si_50);isBetween(si_50,'1.0','99.0')",copyDouble(si_50),Copy source attribute,TRUE
