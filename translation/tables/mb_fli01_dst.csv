rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"matchList(dist_type_1, {'CC','BU','WF','CL','DI','DM','IK','IB','UK','BF','SF','WE','DT','BT','SN','ST'});matchList(dist_type_2, {'CC','BU','WF','CL','DI','DM','IK','IB','UK','BF','SF','WE','DT','BT','SN','ST'})",NA,Translate only rows where there is a disturbance defined in either mod1 or mod2., TRUE
1,CAS_ID,text,notEmpty(inventory_id);notNull(src_filename);notNull(map_sheet_id);notNull(orig_stand_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, map_sheet_id, orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Create cas_id using the unique identifier poly_id added during loading., TRUE
2,DIST_TYPE_1,text,"minIndexNotNull({dist_year_1, dist_year_2}, {dist_type_1, dist_type_2}, 9999, 9999);minIndexMatchList({dist_year_1, dist_year_2}, {dist_type_1, dist_type_2},{'CC','BU','WF','CL','DI','DM','IK','IB','UK','BF','SF','WE','DT','BT','SN','ST'}, 9999, 9999)","minIndexMapText({dist_year_1, dist_year_2}, {dist_type_1, dist_type_2}, {'CC','BU','WF','CL','DI','DM','IK','IB','UK','BF','SF','WE','DT','BT','SN','ST'}, {'CUT','BURN','WINDFALL','OTHER','DISEASE','DISEASE','INSECT','INSECT','OTHER','FLOOD','FLOOD','WEATHER','DEAD_UNKNOWN','OTHER','OTHER','OTHER'}, 9999, 9999)","Gets the dist type with the smallest year value, could be mod1 or mod2. Year values of zero are considered null and set to 9999 so will not be returned in dist_type_1 unless both values are zero. Note that some year values are also null so nulls should also be set to 9999. Repeating this behavior for all rows ensures any disturbances will null year entries are reported in dist_type_2. If both year entries are zero they are reported in the same order as the source data. Check the type value is not null, and is in list, then translates using mapText.", TRUE
3,DIST_YEAR_1,integer,"minIndexNotNull({dist_year_1, dist_year_2}, {dist_year_1, dist_year_2}, 9999, 9999);minIndexIsInt({dist_year_1, dist_year_2}, {dist_year_1, dist_year_2}, 9999, 9999);minIndexIsBetween({dist_year_1, dist_year_2}, {dist_year_1, dist_year_2}, 1000, 2020, 9999, 9999)","minIndexCopyInt({dist_year_1, dist_year_2}, {dist_year_1, dist_year_2}, 9999, 9999)","Copies smallest year value after checking its not null, integer and between 1000 and 2020. Match behaviour of dist_type_1 by setting zero years to 9999.", TRUE
4,DIST_EXT_UPPER_1,integer,"minIndexNotNull({dist_year_1, dist_year_2}, {dist_ext_upper_1, dist_ext_upper_2}, 9999, 9999);minIndexIsInt({dist_year_1, dist_year_2}, {dist_ext_upper_1, dist_ext_upper_2}, 9999, 9999);minIndexIsBetween({dist_year_1, dist_year_2}, {dist_ext_upper_1, dist_ext_upper_2}, 1, 5, 9999, 9999)","minIndexMapInt({dist_year_1, dist_year_2}, {dist_ext_upper_1, dist_ext_upper_2}, {1,2,3,4,5}, {25,50,75,95,100}, 9999, 9999)","Gets the dist ext with the smallest year value, could be mod1 or mod2. Checks its not null, and is in list, then translates using mapInt. Match behaviour of dist_type_1 by setting zero years to 9999.", TRUE
5,DIST_EXT_LOWER_1,integer,"minIndexNotNull({dist_year_1, dist_year_2}, {dist_ext_lower_1, dist_ext_lower_2}, 9999, 9999);minIndexIsInt({dist_year_1, dist_year_2}, {dist_ext_lower_1, dist_ext_lower_2}, 9999, 9999);minIndexIsBetween({dist_year_1, dist_year_2}, {dist_ext_lower_1, dist_ext_lower_2}, 1, 5, 9999, 9999)","minIndexMapInt({dist_year_1, dist_year_2}, {dist_ext_lower_1, dist_ext_lower_2}, {1,2,3,4,5}, {1,26,51,76,96}, 9999, 9999)","Gets the dist ext with the smallest year value, could be mod1 or mod2. Checks its not null, and is in list, then translates using mapInt. Match behaviour of dist_type_1 by setting zero years to 9999.", TRUE
6,DIST_TYPE_2,text,"hasCountOfNotNullOrZero({dist_type_1, dist_year_1}, {dist_type_2, dist_year_2}, 2, TRUE|NOT_APPLICABLE);maxIndexNotNull({dist_year_1, dist_year_2}, {dist_type_1, dist_type_2}, 9999, 9999);maxIndexMatchList({dist_year_1, dist_year_2}, {dist_type_1, dist_type_2}, {'CC','BU','WF','CL','DI','DM','IK','IB','UK','BF','SF','WE','DT','BT','SN','ST'}, 9999, 9999)","maxIndexMapText({dist_year_1, dist_year_2}, {dist_type_1, dist_type_2}, {'CC','BU','WF','CL','DI','DM','IK','IB','UK','BF','SF','WE','DT','BT','SN','ST'}, {'CUT','BURN','WINDFALL','OTHER','DISEASE','DISEASE','INSECT','INSECT','OTHER','FLOOD','FLOOD','WEATHER','DEAD_UNKNOWN','OTHER','OTHER','OTHER'}, 9999, 9999)","Only runs if there is a type or year for both slots. Match behaviour of dist_type_1 by setting zero years to 9999. Therefore if there is a type with year value zero, it will always be reported as dist_type_2, unless both years are zero in which case the original order is maintained. Gets the dist type with the largest year value, could be mod1 or mod2. Checks its not null, and is in list, then translates using mapText.", TRUE
7,DIST_YEAR_2,integer,"hasCountOfNotNullOrZero({dist_type_1, dist_year_1}, {dist_type_2, dist_year_2}, 2, TRUE|-8887);maxIndexNotNull({dist_year_1, dist_year_2}, {dist_year_1, dist_year_2}, 9999, 9999);maxIndexIsInt({dist_year_1, dist_year_2}, {dist_year_1, dist_year_2}, 9999, 9999);maxIndexIsBetween({dist_year_1, dist_year_2}, {dist_year_1, dist_year_2}, 1000, 2020, 9999, 9999)","maxIndexCopyInt({dist_year_1, dist_year_2}, {dist_year_1, dist_year_2}, 9999, 9999)","Copies largest year value after checking its not null, integer and between 1000 and 2020. Match behaviour of dist_type_1 by setting zero years to 9999.", TRUE
8,DIST_EXT_UPPER_2,integer,"hasCountOfNotNullOrZero({dist_type_1, dist_year_1}, {dist_type_2, dist_year_2}, 2, TRUE|-8887);maxIndexNotNull({dist_year_1, dist_year_2}, {dist_ext_upper_1, dist_ext_upper_2}, 9999, 9999);maxIndexIsInt({dist_year_1, dist_year_2}, {dist_ext_upper_1, dist_ext_upper_2}, 9999, 9999);maxIndexIsBetween({dist_year_1, dist_year_2}, {dist_ext_upper_1, dist_ext_upper_2}, 1, 5, 9999, 9999)","maxIndexMapInt({dist_year_1, dist_year_2}, {dist_ext_upper_1, dist_ext_upper_2}, {1,2,3,4,5}, {25,50,75,95,100}, 9999, 9999)","Gets the dist ext with the largest year value, could be mod1 or mod2. Checks its not null, and is in list, then translates using mapInt. Match behaviour of dist_type_1 by setting zero years to 9999.", TRUE
9,DIST_EXT_LOWER_2,integer,"hasCountOfNotNullOrZero({dist_type_1, dist_year_1}, {dist_type_2, dist_year_2}, 2, TRUE|-8887);maxIndexNotNull({dist_year_1, dist_year_2}, {dist_ext_lower_1, dist_ext_lower_2}, 9999, 9999);maxIndexIsInt({dist_year_1, dist_year_2}, {dist_ext_lower_1, dist_ext_lower_2}, 9999, 9999);maxIndexIsBetween({dist_year_1, dist_year_2}, {dist_ext_lower_1, dist_ext_lower_2}, 1, 5, 9999, 9999)","maxIndexMapInt({dist_year_1, dist_year_2}, {dist_ext_lower_1, dist_ext_lower_2}, {1,2,3,4,5}, {1,26,51,76,96}, 9999, 9999)","Gets the dist ext with the largest year value, could be mod1 or mod2. Checks its not null, and is in list, then translates using mapInt. Match behaviour of dist_type_1 by setting zero years to 9999.", TRUE
10,DIST_TYPE_3,text,false(),nothingText(),Attribute does not occur, TRUE
11,DIST_YEAR_3,integer,false(),nothingInt(),Attribute does not occur, TRUE
12,DIST_EXT_UPPER_3,integer,false(),nothingInt(),Attribute does not occur, TRUE
13,DIST_EXT_LOWER_3,integer,false(),nothingInt(),Attribute does not occur, TRUE
14,LAYER,integer,false(|-8886),nothingInt(),Disturbance layer is unknown, TRUE
