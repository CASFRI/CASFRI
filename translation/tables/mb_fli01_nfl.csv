rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"matchList(nnf_anth,{'NMB','NMC','NMR','NMS','NMG','NWL','NWR','NWW','NMM','NMO','NWE','NWA','NSL','NMF', 'CP', 'CA', 'CPR', 'ASB', 'AFL', 'ADD', 'CIP','CIW','CIU','ASC','ASR','ASP','ASN','AIH','AIR', 'AAR', 'AIG','AII','AIW','AIA','AIF','AIU', 'SO','SO1','SO2','SO3','SO4','SO5','SO6','SO7','SO8','SO9','AL','SC','SC1','SC2','SC3','SC4','SC5','SC6','SC7','SC8','SC9','CC','HG','CS','HF','AS','HU','VI','BR','RA','CL','DL','AU'})",NA,Translate only rows where landtype has an nfl value, TRUE
1,CAS_ID,text,notEmpty(inventory_id);notNull(src_filename);notNull(map_sheet_id);notNull(orig_stand_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, map_sheet_id, orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Create cas_id using the unique identifier poly_id added during loading.,TRUE
2,SOIL_MOIST_REG,text,"notNull(soil_moist_reg);notEmpty(soil_moist_reg);matchList(soil_moist_reg,{'D','F','V','M','W'})","mapText(soil_moist_reg, {'D','F','V','M','W'}, {'DRY','MESIC','MESIC','MOIST','WET'})",Maps source value to SOIL_MOIST_REG using lists of values, TRUE
3,STRUCTURE_PER,integer,true(),copyInt(100),No horizontal structure so structure percent is 100, TRUE
4,LAYER,integer,true(),"countOfNotNull({species_1_layer1, species_2_layer1, species_3_layer1, species_4_layer1, species_5_layer1, species_6_layer1}, {species_1_layer2, species_2_layer2, species_3_layer2, species_4_layer2, species_5_layer2, species_6_layer2}, {species_1_layer3, species_2_layer3, species_3_layer3, species_4_layer3, species_5_layer3, species_6_layer3}, {species_1_layer4, species_2_layer4, species_3_layer4, species_4_layer4, species_5_layer4, species_6_layer4}, {species_1_layer5, species_2_layer5, species_3_layer5, species_4_layer5, species_5_layer5, species_6_layer5}, {nnf_anth}, layer, FALSE)",Count number of canopy and nfl layers as attributes with non null values. All nnf_anth values are CASFRI nfl values so if it has a value we have an nfl layer., TRUE
5,LAYER_RANK,integer,false(|-8887),nothingInt(),Attribute does not occur, TRUE
6,CROWN_CLOSURE_UPPER,integer,"notNull(nnf_anth);notEmpty(nnf_anth|-8888);matchList(nnf_anth,{'SO1','SO2','SO3','SO4','SO5','SO6','SO7','SO8','SO9','SC1','SC2','SC3','SC4','SC5','SC6','SC7','SC8','SC9'}|-9997)","mapInt(nnf_anth, {'SO1','SO2','SO3','SO4','SO5','SO6','SO7','SO8','SO9','SC1','SC2','SC3','SC4','SC5','SC6','SC7','SC8','SC9'}, {20,30,40,50,60,70,80,90,100,20,30,40,50,60,70,80,90,100})","Shrub open and closed have crown closure values appended to the nfl code. Check for the correct nfl code, then translate the crown closure value.", TRUE
7,CROWN_CLOSURE_LOWER,integer,"notNull(nnf_anth);notEmpty(nnf_anth|-8888);matchList(nnf_anth,{'SO1','SO2','SO3','SO4','SO5','SO6','SO7','SO8','SO9','SC1','SC2','SC3','SC4','SC5','SC6','SC7','SC8','SC9'}|-9997)","mapInt(nnf_anth, {'SO1','SO2','SO3','SO4','SO5','SO6','SO7','SO8','SO9','SC1','SC2','SC3','SC4','SC5','SC6','SC7','SC8','SC9'}, {11,21,31,41,51,61,71,81,91,11,21,31,41,51,61,71,81,91})","Shrub open and closed have crown closure values appended to the nfl code. Check for the correct nfl code, then translate the crown closure value.", TRUE
8,HEIGHT_UPPER,double precision,"notNull(nnf_anth);notEmpty(nnf_anth|-8888);matchList(nnf_anth,{'SO1','SO2','SO3','SO4','SO5','SO6','SO7','SO8','SO9','SC1','SC2','SC3','SC4','SC5','SC6','SC7','SC8','SC9'}|-9997);notNull(nfl_height);isNumeric(nfl_height);isBetween(nfl_height,'0.1',100)",copyDouble(nfl_height),"Shrub open and closed have height values. Check for the correct nfl code, then copy the height if its valid.", TRUE
9,HEIGHT_LOWER,double precision,"notNull(nnf_anth);notEmpty(nnf_anth|-8888);matchList(nnf_anth,{'SO1','SO2','SO3','SO4','SO5','SO6','SO7','SO8','SO9','SC1','SC2','SC3','SC4','SC5','SC6','SC7','SC8','SC9'}|-9997);notNull(nfl_height);isNumeric(nfl_height);isBetween(nfl_height,'0.1',100)",copyDouble(nfl_height),"Shrub open and closed have height values. Check for the correct nfl code, then copy the height if its valid.", TRUE
10,NAT_NON_VEG,text,"notNull(nnf_anth);matchList(nnf_anth,{'NMB','NMC','NMR','NMS','NMG','NWL','NWR','NWW','NMM','NMO','NWE','NWA','NSL','NMF'}|NOT_APPLICABLE)","mapText(nnf_anth, {'NMB','NMC','NMR','NMS','NMG','NWL','NWR','NWW','NMM','NMO','NWE','NWA','NSL','NMF'}, {'EXPOSED_LAND', 'EXPOSED_LAND', 'ROCK_RUBBLE', 'SAND', 'WATER_SEDIMENT', 'LAKE', 'RIVER', 'LAKE', 'LAKE', 'LAKE', 'RIVER', 'RIVER', 'ISLAND', 'TIDAL_FLATS'})",Maps source value to NAT_NON_VEG using list of values., TRUE
11,NON_FOR_ANTH,text,"notNull(nnf_anth);matchList(nnf_anth,{'CP', 'CA', 'CPR', 'ASB', 'AFL', 'ADD', 'CIP','CIW','CIU','ASC','ASR','ASP','ASN','AIH','AIR', 'AAR', 'AIG','AII','AIW','AIA','AIF','AIU'}|NOT_APPLICABLE)","mapText(nnf_anth, {'CP', 'CA', 'CPR', 'ASB', 'AFL', 'ADD', 'CIP','CIW','CIU','ASC','ASR','ASP','ASN','AIH','AIR', 'AAR', 'AIG','AII','AIW','AIA','AIF','AIU'}, {'CULTIVATED', 'CULTIVATED', 'CULTIVATED', 'OTHER', 'CULTIVATED', 'OTHER', 'FACILITY_INFRASTRUCTURE','FACILITY_INFRASTRUCTURE','OTHER','SETTLEMENT','SETTLEMENT','SETTLEMENT','FACILITY_INFRASTRUCTURE','FACILITY_INFRASTRUCTURE','FACILITY_INFRASTRUCTURE','FACILITY_INFRASTRUCTURE','INDUSTRIAL','INDUSTRIAL','LAGOON','FACILITY_INFRASTRUCTURE','SETTLEMENT','OTHER'})",Maps source value to NON_FOR_ANTH using list of values., TRUE
12,NON_FOR_VEG,text,"notNull(nnf_anth);matchList(nnf_anth,{'SO','SO1','SO2','SO3','SO4','SO5','SO6','SO7','SO8','SO9','AL','SC','SC1','SC2','SC3','SC4','SC5','SC6','SC7','SC8','SC9','CC','HG','CS','HF','AS','HU','VI','BR','RA','CL','DL','AU'}|NOT_APPLICABLE)","mapText(nnf_anth,{'SO','SO1','SO2','SO3','SO4','SO5','SO6','SO7','SO8','SO9','AL','SC','SC1','SC2','SC3','SC4','SC5','SC6','SC7','SC8','SC9','CC','HG','CS','HF','AS','HU','VI','BR','RA','CL','DL','AU'}, {'LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','TALL_SHRUB','TALL_SHRUB','TALL_SHRUB','TALL_SHRUB','TALL_SHRUB','TALL_SHRUB','TALL_SHRUB','TALL_SHRUB','TALL_SHRUB','TALL_SHRUB','TALL_SHRUB','TALL_SHRUB','GRAMINOIDS','TALL_SHRUB','FORBS','TALL_SHRUB','FORBS','TALL_SHRUB','BRYOID','LOW_SHRUB','BRYOID','LOW_SHRUB','LOW_SHRUB'})",Maps source value to NON_FOR_VEG using list of values., TRUE
