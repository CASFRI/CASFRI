rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"notEmpty({species_1, species_2, species_3, species_4}, TRUE)",NA,"Translate only rows where sspecies_1, species_2, species_3 or species_4 is not empty.", TRUE
1,CAS_ID,text,notEmpty(inventory_id);notEmpty(src_filename);notEmpty(map_sheet_id);notEmpty(orig_stand_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, map_sheet_id, orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','x','x'}, '-', TRUE, TRUE)",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(soil_moist_reg);notEmpty(soil_moist_reg);matchList(soil_moist_reg,{'Dry','Fresh','Moderately Dry','Moderately Fresh','Moderately Moist','Moderately Wet','Moist','Very Fresh','Very Moist','Very Wet','Wet'}, FALSE, FALSE, TRUE, FALSE)","mapText(soil_moist_reg, {'Dry','Fresh','Moderately Dry','Moderately Fresh','Moderately Moist','Moderately Wet','Moist','Very Fresh','Very Moist','Very Wet','Wet'}, {'DRY','MESIC','DRY','MESIC','MOIST','WET','MOIST','MESIC','MOIST','WET','WET'}, FALSE, FALSE)",Maps source value to SOIL_MOIST_REG. Do not remove spaces in matchList or mapText.,TRUE
3,STRUCTURE_PER,integer,true(),copyInt(100),No horizontal structure so structure percent is 100,TRUE
4,STRUCTURE_RANGE,double precision,"matchList(stand_structure, 'Complex'|-8887)","XMinusYDouble(max_height, min_height)",Maximum height minus minimum height for complex stands,TRUE
5,LAYER,integer,true(),"lyr_layer_translation({layer1_height, layer2_height}, {species_1_layer1, species_2_layer1, species_3_layer1, species_4_layer1}, {species_1_layer2, species_2_layer2, species_3_layer2, species_4_layer2}, layer)",Two layers possible in YT03. Order them by height.,TRUE
6,LAYER_RANK,integer,notNull(layer_rank|-8887),copyInt(layer_rank),Copies LAYER to LAYER_RANK. Assign 1 to source layer1 and 2 to source layer2.,TRUE
7,CROWN_CLOSURE_UPPER,integer,"notNull(crown_closure_upper);isInt(crown_closure_upper);isBetween(crown_closure_upper,0,100)",copyInt(crown_closure_upper),Copies source value to CROWN_CLOSURE_UPPER,TRUE
8,CROWN_CLOSURE_LOWER,integer,"notNull(crown_closure_lower);isInt(crown_closure_lower);isBetween(crown_closure_lower,0,100)",copyInt(crown_closure_lower),Copies source value to CROWN_CLOSURE_LOWER,TRUE
9,HEIGHT_UPPER,double precision,"notNull(height_upper);isNumeric(height_upper);isGreaterThan(height_upper, 0, FALSE|-9999);isBetween(height_upper,0,100)",copyDouble(height_upper),Copy source value defined as: Average height for all LYR stands including complex stands,TRUE
10,HEIGHT_LOWER,double precision,"notNull(height_lower);isNumeric(height_lower);isGreaterThan(height_lower, 0, FALSE|-9999);isBetween(height_lower,0,100)",copyDouble(height_lower),Copy source value defined as: Average height for all LYR stands including complex stands,TRUE
11,PRODUCTIVITY,text,false(),nothingText(),Attribute does not occur,TRUE
12,PRODUCTIVITY_TYPE,text,false(),nothingText(),Attribute does not occur,TRUE
13,SPECIES_1,text,"notNull(species_1);notEmpty(species_1|NULL_VALUE);matchTable(species_1, 'translation', 'species_code_mapping', 'yt_species_codes', TRUE)","lookupText(species_1, 'translation', 'species_code_mapping', 'yt_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_1 using lookup table,TRUE
14,SPECIES_PER_1,integer,"notNull(species_per_1);isNumeric(species_per_1);isGreaterThan(species_per_1, 1|-9999);isBetween(species_per_1,1,100)",copyInt(species_per_1),Copies source value to SPECIES_PER_1,TRUE
15,SPECIES_2,text,"notNull(species_2);notEmpty(species_2|NULL_VALUE);matchTable(species_2, 'translation', 'species_code_mapping', 'yt_species_codes', TRUE)","lookupText(species_2, 'translation', 'species_code_mapping', 'yt_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_2 using lookup table,TRUE
16,SPECIES_PER_2,integer,"notNull(species_per_2);isNumeric(species_per_2);isGreaterThan(species_per_2, 1|-9999);isBetween(species_per_2,1,100)",copyInt(species_per_2),Copies source value to SPECIES_PER_2,TRUE
17,SPECIES_3,text,"notNull(species_3);notEmpty(species_3|NULL_VALUE);matchTable(species_3, 'translation', 'species_code_mapping', 'yt_species_codes', TRUE)","lookupText(species_3, 'translation', 'species_code_mapping', 'yt_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_3 using lookup table,TRUE
18,SPECIES_PER_3,integer,"notNull(species_per_3);isNumeric(species_per_3);isGreaterThan(species_per_3, 1|-9999);isBetween(species_per_3,1,100)",copyInt(species_per_3),Copies source value to SPECIES_PER_3,TRUE
19,SPECIES_4,text,"notNull(species_4);notEmpty(species_4|NULL_VALUE);matchTable(species_4, 'translation', 'species_code_mapping', 'yt_species_codes', TRUE)","lookupText(species_4, 'translation', 'species_code_mapping', 'yt_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_4 using lookup table,TRUE
20,SPECIES_PER_4,integer,"notNull(species_per_4);isNumeric(species_per_4);isGreaterThan(species_per_4, 1|-9999);isBetween(species_per_4,1,100)",copyInt(species_per_4),Copies source value to SPECIES_PER_4,TRUE
21,SPECIES_5,text,false(),nothingText(),Attribute does not occur,TRUE
22,SPECIES_PER_5,integer,false(),nothingInt(),Attribute does not occur,TRUE
23,SPECIES_6,text,false(),nothingText(),Attribute does not occur,TRUE
24,SPECIES_PER_6,integer,false(),nothingInt(),Attribute does not occur,TRUE
25,SPECIES_7,text,false(),nothingText(),Attribute does not occur,TRUE
26,SPECIES_PER_7,integer,false(),nothingInt(),Attribute does not occur,TRUE
27,SPECIES_8,text,false(),nothingText(),Attribute does not occur,TRUE
28,SPECIES_PER_8,integer,false(),nothingInt(),Attribute does not occur,TRUE
29,SPECIES_9,text,false(),nothingText(),Attribute does not occur,TRUE
30,SPECIES_PER_9,integer,false(),nothingInt(),Attribute does not occur,TRUE
31,SPECIES_10,text,false(),nothingText(),Attribute does not occur,TRUE
32,SPECIES_PER_10,integer,false(),nothingInt(),Attribute does not occur,TRUE
33,ORIGIN_UPPER,integer,"notNull({age, ref_year});isInt(age);isInt(ref_year);isGreaterThan(ref_year, 1|-9997);isXMinusYBetween(ref_year, age, 1000, 2020)","XMinusYInt(ref_year, age)","Calculates ORIGIN_UPPER as reference year minus age. Validation checks both attributes have a value, returns null_value if ref_year is zero.",TRUE
34,ORIGIN_LOWER,integer,"notNull({age, ref_year});isInt(age);isInt(ref_year);isGreaterThan(ref_year, 1|-9997);isXMinusYBetween(ref_year, age, 1000, 2020)","XMinusYInt(ref_year, age)","Calculates ORIGIN_LOWER as reference year minus age. Validation checks both attributes have a value, returns null_value if ref_year is zero.",TRUE
35,SITE_CLASS,text,"notNull(site_class);notEmpty(site_class);matchList(site_class,{'Low','Poor','Medium','Good'})","mapText(site_class, {'Low','Poor','Medium','Good'}, {'POOR','POOR','MEDIUM','GOOD'})",Maps source value to SITE_CLASS,TRUE
36,SITE_INDEX,double precision,"notNull(site_index);isNumeric(site_index);isBetween(site_index, 0.1, 40)",copyDouble(site_index),Copies source value to SITE_INDEX,TRUE
