rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"row_translation_rule_nt_lyr(typeclas, species_1, species_2, species_3, species_4)",NA,"Translate only rows where typeclass is forested type, and species 1, 2, 3, or 4 is present. This avoids double counting some rows in both nfl and lyr because some non-forested rows do have sp1 assigned. Same logic apply to layer 2 but the mapping of attributes change.", TRUE
1,CAS_ID,text,notEmpty(inventory_id);notEmpty(src_filename);notNull(map_sheet_id);notNull(orig_stand_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, map_sheet_id, orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','x','x'}, '-', TRUE, TRUE)",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(soil_moist_reg);notEmpty(soil_moist_reg);matchList(soil_moist_reg,{'vx','x','sx','sm','m','sg','hg','sd','hd'})","mapText(soil_moist_reg, {'vx','x','sx','sm','m','sg','hg','sd','hd'}, {'DRY','DRY','DRY','MESIC','MESIC','MOIST','MOIST','WET','WET'})",Maps source value to SOIL_moisture using lists of values,TRUE
3,STRUCTURE_PER,integer,"fvi01_structure_per_validation(stand_structure, layer|-8886);matchList(stand_structure, {'C', 'H', 'M', 'S', 'V'}|-8887);notNull(structure_per);isInt(structure_per);isBetween(structure_per,0,9)","fvi01_structure_per(stand_structure, structure_per)","Note that every polygon is either LYR or NFL, not both. If stand structure is C, V, S or M, return 100. If stand structure is H, return structure_val multiplied by 10. If structure is horizontal and percent is zero, return 100. Note that only one structure percent value is given per row so we only have one of the horizontal components. We don`t know what the understory percent is so we return unknown for all rows. Custom validation catches the case where structure is horizontal and layer is 2. i.e. we have two forest layers and horizontal structure. In this case we don't know what the understory percent is.",TRUE
4,STRUCTURE_RANGE,double precision,"matchList(stand_structure, {'C'}|-8887); isNumeric(structure_range)",copyDouble(structure_range),"Checks that stand structure is Complex and range value is numeric. If it is, returns the range value in metres. Structure range is only reported for layer 1 because the manual states that Complex stand may also be Multi-storied but only if the understorey is a non forested vegetated type class.",TRUE
5,LAYER,integer,true(),"nt_lyr_layer_translation(typeclas_layer1, typeclas_layer2, {height_layer1, height_layer2}, {species_1_layer1, species_2_layer1, species_3_layer1, species_4_layer1}, {species_1_layer2, species_2_layer2, species_3_layer2, species_4_layer2}, layer)","If 2 forest layers, reorder the layers that exist in the polygon by height and return the index of the layer being processed. Otherwise return 1 for the layer being processed. Other layer will never be processed due to ROW_TRANSLATION_RULE.",TRUE
6,LAYER_RANK,integer,notNull(layer_rank);isInt(layer_rank),copyInt(layer_rank),"Layer rank is assigned as 1 for overstory layer (e.g. sp1), and 2 for understory layer (e.g. usp1).",TRUE
7,CROWN_CLOSURE_UPPER,integer,"notNull(crown_closure_upper);isInt(crown_closure_upper);isBetween(crown_closure_upper,0,100)",copyInt(crown_closure_upper),"Manual specifies values in increments of 10 from 0 to 100, with each value representing the midpoint of a class. E.g. 0 is 0-5, 10 is 6-15 etc. However values in the source data are not limited to these increments. We don't know which values are meant to represent classes and which are actual percent values, so we just copy the values.",TRUE
8,CROWN_CLOSURE_LOWER,integer,"notNull(crown_closure_lower);isInt(crown_closure_lower);isBetween(crown_closure_lower,0,100)",copyInt(crown_closure_lower),"Manual specifies values in increments of 10 from 0 to 100, with each value representing the midpoint of a class. E.g. 0 is 0-5, 10 is 6-15 etc. However values in the source data are not limited to these increments. We don't know which values are meant to represent classes and which are actual percent values, so we just copy the values.",TRUE
9,HEIGHT_UPPER,double precision,"notNull(height_upper);isNumeric(height_upper);isGreaterThan(height_upper, 0, FALSE|-9999);isBetween(height_upper,0,100)",copyDouble(height_upper),Copies source value to HEIGHT_UPPER if layer type is forested,TRUE
10,HEIGHT_LOWER,double precision,"notNull(height_lower);isNumeric(height_lower);isGreaterThan(height_lower, 0, FALSE|-9999);isBetween(height_lower,0,100)",copyDouble(height_lower),Copies source value to HEIGHT_LOWER if layer type is forested,TRUE
11,PRODUCTIVITY,text,"matchList(productivity, {'FO','FI','FE','FU','FN','FP','FR','FW'}|UNKNOWN_VALUE)","mapText(productivity, {'FO','FI','FE','FU','FN','FP','FR','FW'}, {'PRODUCTIVE_FOREST','PRODUCTIVE_FOREST','PRODUCTIVE_FOREST','PRODUCTIVE_FOREST','PRODUCTIVE_FOREST','PRODUCTIVE_FOREST','PRODUCTIVE_FOREST','PRODUCTIVE_FOREST'})",Productivity attribute in NT lists forestry types but it is rarely applied so cannot assumed to represent all productive polygons,TRUE
12,PRODUCTIVITY_TYPE,text,"matchList(productivity, {'FO','FI','FE','FU','FN','FP','FR','FW'}|UNKNOWN_VALUE)","mapText(productivity, {'FO','FI','FE','FU','FN','FP','FR','FW'}, {'HARVESTABLE','HARVESTABLE','HARVESTABLE','HARVESTABLE','HARVESTABLE','HARVESTABLE','HARVESTABLE','HARVESTABLE'})",Productivity attribute in NT lists forestry types but it is rarely applied so cannot assumed to represent all harvestable polygons,TRUE
13,SPECIES_1,text,"notNull(species_1);notEmpty(species_1);matchTable(species_1, 'translation', 'species_code_mapping', 'nt_species_codes', TRUE)","lookupText(species_1, 'translation', 'species_code_mapping', 'nt_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_1 using lookup table.,TRUE
14,SPECIES_PER_1,integer,"notNull(species_per_1);isInt(species_per_1);isGreaterThan(species_per_1, 1|-9999);isBetween(species_per_1,1,100)",copyInt(species_per_1),Multiplies percent by 10. Zero is assigned NULL_VALUE.,TRUE
15,SPECIES_2,text,"notNull(species_2);notEmpty(species_2);matchTable(species_2, 'translation', 'species_code_mapping', 'nt_species_codes', TRUE)","lookupText(species_2, 'translation', 'species_code_mapping', 'nt_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_2 using lookup table.,TRUE
16,SPECIES_PER_2,integer,"notNull(species_per_2);isInt(species_per_2);isGreaterThan(species_per_2, 1|-9999);isBetween(species_per_2,1,100)",copyInt(species_per_2),Multiplies percent by 10. Zero is assigned NULL_VALUE.,TRUE
17,SPECIES_3,text,"notNull(species_3);notEmpty(species_3);matchTable(species_3, 'translation', 'species_code_mapping', 'nt_species_codes', TRUE)","lookupText(species_3, 'translation', 'species_code_mapping', 'nt_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_3 using lookup table.,TRUE
18,SPECIES_PER_3,integer,"notNull(species_per_3);isInt(species_per_3);isGreaterThan(species_per_3, 1|-9999);isBetween(species_per_3,1,100)",copyInt(species_per_3),Multiplies percent by 10. Zero is assigned NULL_VALUE.,TRUE
19,SPECIES_4,text,"notNull(species_4);notEmpty(species_4);matchTable(species_4, 'translation', 'species_code_mapping', 'nt_species_codes', TRUE)","lookupText(species_4, 'translation', 'species_code_mapping', 'nt_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_4 using lookup table.,TRUE
20,SPECIES_PER_4,integer,"notNull(species_per_4);isInt(species_per_4);isGreaterThan(species_per_4, 1|-9999);isBetween(species_per_4,1,100)",copyInt(species_per_4),Multiplies percent by 10. Zero is assigned NULL_VALUE.,TRUE
21,SPECIES_5,text,false(),nothingText(),Attribute does not occur,TRUE
22,SPECIES_PER_5,integer,false(),nothingInt(),Attribute does not occur,TRUE
23,SPECIES_6,text,false(),nothingText(),Attribute does not occur,TRUE
24,SPECIES_PER_6,integer,false(),nothingInt(),Attribute does not occur,TRUE
25,SPECIES_7,text,false(),nothingText(),Attribute does not occur,TRUE
26,SPECIES_PER_7,integer,false(),nothingInt(),Attribute does not occur,TRUE
27,SPECIES_8,text,false(),nothingText(),Attribute does not occur,TRUE
28,SPECIES_PER_8,integer,false(),nothingInt(),Attribute does not occur,TRUE
29,SPECIES_9,text,false(),nothingText(),Attribute does not occur,TRUE
30,SPECIES_PER_9,integer,false(),nothingInt(),Attribute does not occur,TRUE
31,SPECIES_10,text,false(),nothingText(),Attribute does not occur,TRUE
32,SPECIES_PER_10,integer,false(),nothingInt(),Attribute does not occur,TRUE
33,ORIGIN_UPPER,integer,"notNull(origin_upper);isInt(origin_upper);isBetween(origin_upper,1000,2020)",copyInt(origin_upper),Copies source value to ORIGIN_UPPER,TRUE
34,ORIGIN_LOWER,integer,"notNull(origin_lower);isInt(origin_lower);isBetween(origin_lower,1000,2020)",copyInt(origin_lower),Copies  source value to ORIGIN_LOWER,TRUE
35,SITE_CLASS,text,"notNull(site_class);notEmpty(site_class);matchList(site_class,{'VP','P','M','R','VR'})","mapText(site_class, {'VP','P','M','R','VR'}, {'UNPRODUCTIVE','POOR','MEDIUM','GOOD','GOOD'})",Maps source value to SITE_CLASS using lists of values,TRUE
36,SITE_INDEX,double precision,false(),nothingDouble(),Attribute does not occur,TRUE
