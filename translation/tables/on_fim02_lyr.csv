rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,notEmpty(species),NA,Translate only rows where ospcomp is not empty, TRUE
1,CAS_ID,text,notEmpty(inventory_id);notNull(orig_stand_id);notNull(src_filename);notNull(ogc_fid),"padConcat({inventory_id, src_filename, '', orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,false(),nothingText(),Attribute does not occur,TRUE
3,STRUCTURE_PER,integer,true(),copyInt(100),No horizontal structure so structure percent is 100,TRUE
4,LAYER,integer,true(),"countOfNotNull({species_layer1}, {species_layer2}, {polytype}, layer, 'FALSE')","Count layers up to max_layer_number which is set by the createMappingsView() function in the workflow. Note that poly_type = 'FOR' when there is forest info, but any other poly_type is NFL, and when poly_type != 'FOR' ospcomp and uspcomp are always empty. So the max_layer_number for NFL row translations will be set to 3, however it will always return 1.",TRUE
5,LAYER_RANK,integer,false(|-8887),nothingInt(),Attribute does not occur,TRUE
6,CROWN_CLOSURE_UPPER,integer,"notNull(crown_closure_upper);isInt(crown_closure_upper);isBetween(crown_closure_upper,0,100)",copyInt(crown_closure_upper),Copies source value to CROWN_CLOSURE_UPPER,TRUE
7,CROWN_CLOSURE_LOWER,integer,"notNull(crown_closure_lower);isInt(crown_closure_lower);isBetween(crown_closure_lower,0,100)",copyInt(crown_closure_lower),Copies source value to CROWN_CLOSURE_LOWER ,TRUE
8,HEIGHT_UPPER,double precision,"notNull(height_upper);isNumeric(height_upper);isBetween(height_upper,1,100)",copyDouble(height_upper),Copies source value to HEIGHT_UPPER,TRUE
9,HEIGHT_LOWER,double precision,"notNull(height_lower);isNumeric(height_lower);isBetween(height_lower,1,100)",copyDouble(height_lower),Copies source value to HEIGHT_LOWER,TRUE
10,PRODUCTIVITY,text,"matchListTwice(formod, polytype, {'PF', 'RP'}, {'BSH','RCK','TMS'}|UNKNOWN_VALUE)","mapTextCoalesce(formod, polytype, {'PF', 'RP'}, {'BSH','RCK','TMS'}, {'NON_PRODUCTIVE_FOREST', 'PRODUCTIVE_FOREST'}, {'NON_PRODUCTIVE_FOREST','NON_PRODUCTIVE_FOREST','NON_PRODUCTIVE_FOREST'})","Returns PRODUCTIVE_FOREST if formod is regular production forest. Returns NON_PRODUCTIVE_FOREST if formod is protection forest, or if polytype is brush and alder, treed rock, or treed wetland",TRUE
11,PRODUCTIVITY_TYPE,text,"matchListTwice(formod, polytype, {'PF', 'RP'}, {'BSH','RCK','TMS'}|UNKNOWN_VALUE)","mapTextCoalesce(formod, polytype, {'PF', 'RP'}, {'BSH','RCK','TMS'}, {'PROTECTION_FOREST', 'HARVESTABLE'}, {'ALDER','TREED_ROCK','TREED_MUSKEG'})",Maps productive types from formod and poytype attributes. Note formod and polytype never occur together in the same row.,TRUE
12,SPECIES_1,text,"notNull(species);notEmpty(species);lengthMatchList(species, {6,12,18,24,30,36,42,48,54,60}, 'TRUE'|NOT_APPLICABLE)","fim_species_translation(species, 1, 'translation', 'species_code_mapping', 'on_species_codes', 'casfri_species_codes')","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and feeds the species name from the code into the mapping function that maps to casfri species using a lookup table.",TRUE
13,SPECIES_PER_1,integer,"notNull(species);notEmpty(species|-8888);lengthMatchList(species, {6,12,18,24,30,36,42,48,54,60}, 'TRUE'|-8887)","fim_species_percent_translation(species, 1)","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and returns the percentage characters.",TRUE
14,SPECIES_2,text,"notNull(species);notEmpty(species);lengthMatchList(species, {12,18,24,30,36,42,48,54,60}, 'TRUE'|NOT_APPLICABLE)","fim_species_translation(species, 2, 'translation', 'species_code_mapping', 'on_species_codes', 'casfri_species_codes')","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. Return NOT_APPLICABLE if that species number is not present. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and feeds the species name from the code into the mapping function that maps to casfri species using a lookup table.",TRUE
15,SPECIES_PER_2,integer,"notNull(species);notEmpty(species|-8888);lengthMatchList(species, {12,18,24,30,36,42,48,54,60}, 'TRUE'|-8887)","fim_species_percent_translation(species, 2)","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. Return NOT_APPLICABLE if that species number is not present. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and returns the percentage characters.",TRUE
16,SPECIES_3,text,"notNull(species);notEmpty(species);lengthMatchList(species, {18,24,30,36,42,48,54,60}, 'TRUE'|NOT_APPLICABLE)","fim_species_translation(species, 3, 'translation', 'species_code_mapping', 'on_species_codes', 'casfri_species_codes')","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. Return NOT_APPLICABLE if that species number is not present. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and feeds the species name from the code into the mapping function that maps to casfri species using a lookup table.",TRUE
17,SPECIES_PER_3,integer,"notNull(species);notEmpty(species|-8888);lengthMatchList(species, {18,24,30,36,42,48,54,60}, 'TRUE'|-8887)","fim_species_percent_translation(species, 3)","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. Return NOT_APPLICABLE if that species number is not present. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and returns the percentage characters.",TRUE
18,SPECIES_4,text,"notNull(species);notEmpty(species);lengthMatchList(species, {24,30,36,42,48,54,60}, 'TRUE'|NOT_APPLICABLE)","fim_species_translation(species, 4, 'translation', 'species_code_mapping', 'on_species_codes', 'casfri_species_codes')","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. Return NOT_APPLICABLE if that species number is not present. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and feeds the species name from the code into the mapping function that maps to casfri species using a lookup table.",TRUE
19,SPECIES_PER_4,integer,"notNull(species);notEmpty(species|-8888);lengthMatchList(species, {24,30,36,42,48,54,60}, 'TRUE'|-8887)","fim_species_percent_translation(species, 4)","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. Return NOT_APPLICABLE if that species number is not present. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and returns the percentage characters.",TRUE
20,SPECIES_5,text,"notNull(species);notEmpty(species);lengthMatchList(species, {30,36,42,48,54,60}, 'TRUE'|NOT_APPLICABLE)","fim_species_translation(species, 5, 'translation', 'species_code_mapping', 'on_species_codes', 'casfri_species_codes')","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. Return NOT_APPLICABLE if that species number is not present. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and feeds the species name from the code into the mapping function that maps to casfri species using a lookup table.",TRUE
21,SPECIES_PER_5,integer,"notNull(species);notEmpty(species|-8888);lengthMatchList(species, {30,36,42,48,54,60}, 'TRUE'|-8887)","fim_species_percent_translation(species, 5)","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. Return NOT_APPLICABLE if that species number is not present. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and returns the percentage characters.",TRUE
22,SPECIES_6,text,"notNull(species);notEmpty(species);lengthMatchList(species, {36,42,48,54,60}, 'TRUE'|NOT_APPLICABLE)","fim_species_translation(species, 6, 'translation', 'species_code_mapping', 'on_species_codes', 'casfri_species_codes')","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. Return NOT_APPLICABLE if that species number is not present. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and feeds the species name from the code into the mapping function that maps to casfri species using a lookup table.",TRUE
23,SPECIES_PER_6,integer,"notNull(species);notEmpty(species|-8888);lengthMatchList(species, {36,42,48,54,60}, 'TRUE'|-8887)","fim_species_percent_translation(species, 6)","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. Return NOT_APPLICABLE if that species number is not present. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and returns the percentage characters.",TRUE
24,SPECIES_7,text,"notNull(species);notEmpty(species);lengthMatchList(species, {42,48,54,60}, 'TRUE'|NOT_APPLICABLE)","fim_species_translation(species, 7, 'translation', 'species_code_mapping', 'on_species_codes', 'casfri_species_codes')","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. Return NOT_APPLICABLE if that species number is not present. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and feeds the species name from the code into the mapping function that maps to casfri species using a lookup table.",TRUE
25,SPECIES_PER_7,integer,"notNull(species);notEmpty(species|-8888);lengthMatchList(species, {42,48,54,60}, 'TRUE'|-8887)","fim_species_percent_translation(species, 7)","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. Return NOT_APPLICABLE if that species number is not present. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and returns the percentage characters.",TRUE
26,SPECIES_8,text,"notNull(species);notEmpty(species);lengthMatchList(species, {48,54,60}, 'TRUE'|NOT_APPLICABLE)","fim_species_translation(species, 8, 'translation', 'species_code_mapping', 'on_species_codes', 'casfri_species_codes')","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. Return NOT_APPLICABLE if that species number is not present. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and feeds the species name from the code into the mapping function that maps to casfri species using a lookup table.",TRUE
27,SPECIES_PER_8,integer,"notNull(species);notEmpty(species|-8888);lengthMatchList(species, {48,54,60}, 'TRUE'|-8887)","fim_species_percent_translation(species, 8)","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. Return NOT_APPLICABLE if that species number is not present. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and returns the percentage characters.",TRUE
28,SPECIES_9,text,"notNull(species);notEmpty(species);lengthMatchList(species, {54,60}, 'TRUE'|NOT_APPLICABLE)","fim_species_translation(species, 9, 'translation', 'species_code_mapping', 'on_species_codes', 'casfri_species_codes')","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. Return NOT_APPLICABLE if that species number is not present. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and feeds the species name from the code into the mapping function that maps to casfri species using a lookup table.",TRUE
29,SPECIES_PER_9,integer,"notNull(species);notEmpty(species|-8888);lengthMatchList(species, {54,60}, 'TRUE'|-8887)","fim_species_percent_translation(species, 9)","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. Return NOT_APPLICABLE if that species number is not present. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and returns the percentage characters.",TRUE
30,SPECIES_10,text,"notNull(species);notEmpty(species);lengthMatchList(species, {60}, 'TRUE'|NOT_APPLICABLE)","fim_species_translation(species, 10, 'translation', 'species_code_mapping', 'on_species_codes', 'casfri_species_codes')","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. Return NOT_APPLICABLE if that species number is not present. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and feeds the species name from the code into the mapping function that maps to casfri species using a lookup table.",TRUE
31,SPECIES_PER_10,integer,"notNull(species);notEmpty(species|-8888);lengthMatchList(species, {60}, 'TRUE'|-8887)","fim_species_percent_translation(species, 10)","Validation-checks species string is not null, check there are enough species to return a value using the length of the string. Return NOT_APPLICABLE if that species number is not present. String is trimmed to fix some error source data with leading and trainling spaces.     Translation - gets the requested species code and returns the percentage characters.",TRUE
32,ORIGIN_UPPER,integer,"notNull(origin_upper);isInt(origin_upper);isBetween(origin_upper, 1000, 2020)",copyInt(origin_upper),Copies source value to ORIGIN_UPPER,TRUE
33,ORIGIN_LOWER,integer,"notNull(origin_lower);isInt(origin_lower);isBetween(origin_lower, 1000, 2020)",copyInt(origin_lower),Copies source value to ORIGIN_LOWER,TRUE
34,SITE_CLASS,text,"notNull(site_class);notEmpty(site_class);matchList(site_class,{'0','1','2','3','4'})","mapText(site_class, {'0','1','2','3','4'}, {'GOOD','GOOD','MEDIUM','POOR','UNPRODUCTIVE'})",Maps source value to site class,TRUE
35,SITE_INDEX,double precision,"notNull(site_index);isNumeric(site_index);isBetween(site_index,'0.1',40)",copyDouble(site_index),Copies source value to site index,TRUE
