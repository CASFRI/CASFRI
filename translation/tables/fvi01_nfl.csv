rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
1,CAS_ID,text,notEmpty(inventory_id);notNull(src_filename);notNull(invproj_id);notNull(fc_id_1);notNull(ogc_fid),"padConcat({inventory_id, src_filename, invproj_id, fc_id_1, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(moisture);matchList(moisture,{'vx','x','sx','sm','m','sg','hg','sd','hd'})","mapText(moisture, {'vx','x','sx','sm','m','sg','hg','sd','hd'}, {'D','D','D','F','F','M','M','W','W'})",Maps source value to SOIL_MOIST_REG using lists of values,TRUE
3,STRUCTURE_PER,integer,"notNull(strc_per);isInt(strc_per);isBetween(strc_per,1,9)","mapInt(strc_per, {1,2,3,4,5,6,7,8,9}, {10,20,30,40,50,60,70,80,90})",Copy source value to STRUCTURE_PER and multiply by 10,TRUE
4,LAYER,integer,true(),"countOfNotNull({dummy1, dummy2, dummy3, dummy4}, {dummy5, dummy6, dummy7, dummy8}, {dummy9}, {dummy10}, max_layer_number)",Count layers up to max_layer_number which is set by the createMappingsView() function in the workflow. Dummy variables are used here and in attribute_dependencies.csv to avoid two sets of values (sp1 and minsp1) being mapped to the same column (sp1),TRUE
5,LAYER_RANK,integer,false(|-8887),nothingInt(),No rank attribute,TRUE
6,CROWN_CLOSURE_UPPER,integer,"notNull(crownclos);isInt(crownclos);isBetween(crownclos,0,100)",copyInt(crownclos),Maps source value to CROWN_CLOSURE_UPPER using lists of values,TRUE
7,CROWN_CLOSURE_LOWER,integer,"notNull(crownclos);isInt(crownclos);isBetween(crownclos,0,100)",copyInt(crownclos),Maps source value to CROWN_CLOSURE_LOWER using lists of values,TRUE
8,HEIGHT_UPPER,double precision,"notNull(height);isNumeric(height);isGreaterThan(height,1);isLessThan(height,100)",copyDouble(height),Copies source value to HEIGHT_UPPER,TRUE
9,HEIGHT_LOWER,double precision,"notNull(height);isNumeric(height);isGreaterThan(height,1);isLessThan(height,100)",copyDouble(height),Copies source value to HEIGHT_LOWER,TRUE
10,NAT_NON_VEG,text,"notNull(typeclas);notEmpty(typeclas);matchList(typeclas,{'BE','BR','BU','CB','ES','LA','LL','LS','MO','MU','PO','RE','RI','RO','RS','RT','SL','ST'})","mapText(typeclas, {'BE','BR','BU','CB','ES','LA','LL','LS','MO','MU','PO','RE','RI','RO','RS','RT','SL','ST'}, {'BE','RK','EX','EX','EX','LA','EX','WS','EX','EX','LA','LA','RI','RK','WS','RK','SL','ST'})",Maps source value to NAT_NON_VEG using list of values,TRUE
11,NON_FOR_ANTH,text,"notNull(typeclas);notEmpty(typeclas);matchList(typeclas,{'AP','BP','EL','GP','TS'})","mapText(typeclas, {'AP','BP','EL','GP','TS'}, {'FA','SE','OT','IN','OT'})","Custom CASFRI map function merges anth_veg and anth_non then runs mapText(anth_veg_anth_non,  'AIG,AIH,CIP,CIW', 'IN,FA,FA,FA'). Validation functions check exactly one input has a value, and that the value is in the match list.",TRUE
12,NON_FOR_VEG,text,"notNull(typeclas);notEmpty(typeclas);matchList(typeclas,{'BL','BM','BY','HE','HF','HG'})","mapText(typeclas, {'BL','BM','BY','HE','HF','HG'}, {'BR','BR','BR','HE','HF','HG'})",Maps source value to NON_FOR_VEG using list of values. FLAG-map list matches fri list. Is this correct?,TRUE
