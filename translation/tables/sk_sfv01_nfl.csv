rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"hasNFLInfo(inventory_id, {nfl_att1, nfl_att2, nfl_att3}, {filter1, filter2, filter3, filter4, filter5}|NOT_APPLICABLE)",NA,"Multiple NFL records can occur on the same row, so we split them into separate translations by using different rows in the attribute_dependencies table. hasNFLInfo filters rows only for the NFL attribute being translated by running the validation functions for either nat_non_veg, non_for_anth or non_for_veg. The first string list argument controls which validations to run (nat_non_veg, non_for_anth or non_for_veg) and the second string list takes the source attributes required to run the validations. Non_for_anth and nat_non_veg are run in the same translation because only one of them occurs on each row.", TRUE
1,CAS_ID,text,notEmpty(inventory_id);notEmpty(src_filename);notNull(orig_stand_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, '', orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','x','x'}, '-', TRUE, TRUE)",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(soil_moist_reg);notEmpty(soil_moist_reg);matchList(soil_moist_reg,{'D','F','M','MF','MM','MW','VD','VF','VM','VW','W'})","mapText(soil_moist_reg, {'D','F','M','MF','MM','MW','VD','VF','VM','VW','W'}, {'DRY','MESIC','MOIST','MESIC','MOIST','WET','DRY','MESIC','MOIST','WET','WET'})",Maps soure value to SOIL_MOIST_REG,TRUE
3,STRUCTURE_PER,integer,true(),copyInt(100),No horizontal structure so structure percent is 100,TRUE
4,LAYER,integer,true(),"sfv01_countOfNotNull({species_1_layer1}, {species_1_layer2}, {species_1_layer3}, {shrub1_layer1}, {herb1_layer1}, productivity_layer, nvsl_layer, aquatic_class_layer, luc_layer, transp_class_layer, layer)","Count layers up to max of 6. Layers are the forest species for layers 1, 2 and 3, the shrub layer, the herb layer, and a stand-level nfl layer that can be one of nvsl, aquatic_class, luc or transp_class. Custom function checks if nfl row is present then runs countOfNotNull; also assigns non-productive BSH and TMS values to layer1 if present. Only the first species is included for each forest layer as there are no cases where species 2, 3, 4, 5, or 6 are included without species 1. nvsl is the predominant non-veg cover type and can occur when there is forest info. 6 layers is therefore possible. max_rank_to_consider set to 'layer' because every nfl layer has its own row in the attribute_dependencies table.",TRUE
5,LAYER_RANK,integer,false(),nothingInt(),Attribute does not occur,TRUE
6,CROWN_CLOSURE_UPPER,integer,"notNull(shrub_herb_crown_closure|-8887);isInt(shrub_herb_crown_closure);isBetween(shrub_herb_crown_closure,0,100)",copyInt(shrub_herb_crown_closure),Copies source value to CROWN_CLOSURE_UPPER for shrub and herb layers.,TRUE
7,CROWN_CLOSURE_LOWER,integer,"notNull(shrub_herb_crown_closure|-8887);isInt(shrub_herb_crown_closure);isBetween(shrub_herb_crown_closure,0,100)",copyInt(shrub_herb_crown_closure),Copies source value to CROWN_CLOSURE_LOWER for shrub and herb layers.,TRUE
8,HEIGHT_UPPER,double precision,false(),nothingDouble(),Attribute does not occur. No height info for shrub or herb,TRUE
9,HEIGHT_LOWER,double precision,false(),nothingDouble(),Attribute does not occur. No height info for shrub or herb,TRUE
10,NAT_NON_VEG,text,"notNull({nvsl, aquatic_class}, TRUE|NOT_APPLICABLE);notEmpty({nvsl, aquatic_class, TRUE|NOT_APPLICABLE}, TRUE);notMatchList({nvsl, aquatic_class}, {'UK'}|UNKNOWN_VALUE);matchList({nvsl, aquatic_class},{'CB', 'RK', 'SA', 'MS', 'GR', 'SB', 'WA', 'LA', 'RI', 'FL', 'SF', 'ST', 'WASF', 'WALA', 'UKLA', 'WARI', 'WAFL', 'WAST', 'L', 'R', 'WADI'}|NOT_APPLICABLE)","mapText({nvsl, aquatic_class}, {'CB', 'RK', 'SA', 'MS', 'GR', 'SB', 'WA', 'LA', 'RI', 'FL', 'SF', 'ST', 'WASF', 'WALA', 'UKLA', 'WARI', 'WAFL', 'WAST', 'L', 'R'}, {'EXPOSED_LAND', 'ROCK_RUBBLE', 'SAND', 'EXPOSED_LAND', 'WATER_SEDIMENT', 'WATER_SEDIMENT', 'LAKE', 'LAKE', 'RIVER', 'FLOOD', 'FLOOD', 'RIVER', 'FLOOD', 'LAKE', 'LAKE', 'RIVER', 'FLOOD', 'RIVER', 'LAKE', 'RIVER'})",Concatenates values from 2 attributes and maps to NAT_NON_VEG using list of values. Usually only one of the attributes will occur per row in the source data. Catch case where only value is UK as UNKNOWN_VALUE. Otherwise report the LAKE value when UK and Lake are together.,TRUE
11,NON_FOR_ANTH,text,"notNull({luc, transp_class, aquatic_class}, TRUE|NOT_APPLICABLE);notEmpty({luc, transp_class, aquatic_class}, TRUE|NOT_APPLICABLE);matchList({luc, transp_class, aquatic_class}, {'ALA', 'POP', 'REC', 'PEX', 'GPI', 'BPI', 'MIS', 'ASA', 'NSA', 'OIS', 'OUS', 'AFS', 'CEM', 'WEH', 'TOW', 'RWC', 'RRC', 'TLC', 'PLC', 'MPC', 'PL', 'RD', 'TL', 'vegu', 'bugp', 'towu', 'cmty', 'dmgu', 'gsof', 'rwgu', 'muou', 'mg', 'peatc', 'lmby', 'sdgu', 'bupo', 'ftow', 'FP', 'WADI'}|NOT_APPLICABLE)","mapText({luc, transp_class, aquatic_class}, {'ALA', 'POP', 'REC', 'PEX', 'GPI', 'BPI', 'MIS', 'ASA', 'NSA', 'OIS', 'OUS', 'AFS', 'CEM', 'WEH', 'TOW', 'RWC', 'RRC', 'TLC', 'PLC', 'MPC', 'PL', 'RD', 'TL', 'vegu', 'bugp', 'towu', 'cmty', 'dmgu', 'gsof', 'rwgu', 'muou', 'mg', 'peatc', 'lmby', 'sdgu', 'bupo', 'ftow', 'FP', 'WADI'}, {'CULTIVATED', 'SETTLEMENT', 'FACILITY_INFRASTRUCTURE', 'INDUSTRIAL', 'INDUSTRIAL', 'BORROW_PIT', 'INDUSTRIAL', 'INDUSTRIAL', 'INDUSTRIAL', 'INDUSTRIAL', 'INDUSTRIAL', 'FACILITY_INFRASTRUCTURE', 'SETTLEMENT', 'FACILITY_INFRASTRUCTURE', 'FACILITY_INFRASTRUCTURE', 'FACILITY_INFRASTRUCTURE', 'FACILITY_INFRASTRUCTURE', 'FACILITY_INFRASTRUCTURE', 'FACILITY_INFRASTRUCTURE', 'FACILITY_INFRASTRUCTURE', 'FACILITY_INFRASTRUCTURE', 'OTHER', 'FACILITY_INFRASTRUCTURE', 'CULTIVATED', 'SETTLEMENT', 'FACILITY_INFRASTRUCTURE', 'OTHER', 'OTHER', 'FACILITY_INFRASTRUCTURE', 'FACILITY_INFRASTRUCTURE', 'INDUSTRIAL', 'INDUSTRIAL', 'OTHER', 'OTHER', 'BORROW_PIT', 'INDUSTRIAL', 'FACILITY_INFRASTRUCTURE', 'BORROW_PIT', 'BORROW_PIT'})",Concatenates values from 2 attributes and maps to NON_FOR_ANTH using list of values. Usually only one of the attributes will occur per row in the source data.,TRUE
12,NON_FOR_VEG,text,"notNull(shrub_herb|NOT_APPLICABLE);notEmpty(shrub_herb|NOT_APPLICABLE);matchList(shrub_herb,{'Ts','Al','Bh','Ma','Sa','Pc','Cr','Wi','Ls','Ro','Bi','Bu','Dw','Ra','Cu','Sn','Bb','Ci','Bl','La','Le','Be','Lc','Lb','He','Fe','Gr','Mo','Li','Av','Se'})","mapText(shrub_herb, {'Ts','Al','Bh','Ma','Sa','Pc','Cr','Wi','Ls','Ro','Bi','Bu','Dw','Ra','Cu','Sn','Bb','Ci','Bl','La','Le','Be','Lc','Lb','He','Fe','Gr','Mo','Li','Av','Se'}, {'TALL_SHRUB','TALL_SHRUB','TALL_SHRUB','TALL_SHRUB','TALL_SHRUB','TALL_SHRUB','TALL_SHRUB','TALL_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','LOW_SHRUB','FORBS','FORBS','GRAMINOIDS','BRYOID','BRYOID','FORBS','GRAMINOIDS'})","Maps shrub and herb values. Either shrub or herb source attribute will be mapped depending on the row being translated. Both could occur in the same source row so they are translated to different layers. Three shrub and herb species provided in the source, we only use shrub 1 and herb 1.",TRUE
