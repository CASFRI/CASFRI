rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,notEmpty(num_of_layers);notNull(num_of_layers),NA,"Translate all rows with a species code, plus any treed bog polygons that will be recorded in PRODUCTIVITY_TYPE",TRUE
1,CAS_ID,text,notEmpty(inventory_id);notNull(src_filename);notNull(map_sheet_id);notNull(orig_stand_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, map_sheet_id, orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(soil_moist_reg);notEmpty(soil_moist_reg);matchList(soil_moist_reg,{'0','1','2','3'})","mapText(soil_moist_reg, {'0','1','2','3'}, {'NULL_VALUE','WET','MESIC','DRY'})",Soil moisture only valid for non commercial stands,TRUE
3,STRUCTURE_PER,integer,true(),"mapInt(structure_per, {'0','1','2','3','4','5','6','7','8','9'}, {10,20,30,40,50,60,70,80,90,100})",No horizontal structure so structure percent is 100,TRUE
4,STRUCTURE_RANGE,double precision,false(),nothingDouble(),No complex structure,TRUE
5,LAYER,integer,true(),"countOfNotNull({l1_spcomp}, {l2_spcomp}, {l3_spcomp}, {l4_spcomp}, {l5_spcomp}, {l6_spcomp}, {l7_spcomp}, num_of_layers, 'TRUE')",to fill,TRUE
6,LAYER_RANK,integer,false(),nothingInt(),Attribute does not occur,TRUE
7,CROWN_CLOSURE_UPPER,integer,false(),nothingInt(),Attribute does not occur,TRUE
8,CROWN_CLOSURE_LOWER,integer,false(),nothingInt(),Attribute does not occur,TRUE
9,HEIGHT_UPPER,double precision,"notNull(height_upper);notEmpty(height_upper|-8888);isInt(height_upper);matchList(height_upper,{0,1,2,3,13,14,23,24,34,35,45}|-9997)","mapDouble(height_upper, {'0','1','2','3','13','14','23','24','34','35','45'}, {1,5,10,15,15,20,10,15,20,25,26})",Translation is different for commercial and non commercial forest. Check there is a valid height code of 1 to 8. 6 to 8 are only valid for commercial so make sure non commercial doesnt have these values. Translation determines if polygon is commercial or non commercial based on stand_id and working_group. Then runs either the commercial or non commercial mapping.,TRUE
10,HEIGHT_LOWER,double precision,"notNull(height_lower);notEmpty(height_lower|-8888);isInt(height_lower);matchList(height_lower,{0,1,2,3,13,14,23,24,34,35,45}|-9997)","mapDouble(height_lower, {'0','1','2','3','13','14','23','24','34','35','45'}, {0,1,6,11,1,1,6,6,11,11,16})",Translation is different for commercial and non commercial forest. Check there is a valid height code of 1 to 8. 6 to 8 are only valid for commercial so make sure non commercial doesnt have these values. Translation determines if polygon is commercial or non commercial based on stand_id and working_group. Then runs either the commercial or non commercial mapping.,TRUE
11,PRODUCTIVITY,text,false(),nothingText(),Validate that polygon is either commercial or non commercial. Treed bog is neither so will return UNKNOWN_VALUE. Translate non commercial polygons to NON_PRODUCTIVE_FOREST and commercial to PRODUCTIVE_FOREST.,TRUE
12,PRODUCTIVITY_TYPE,text,false(),nothingText(),"Translate treed bog to TREED_MUSKEG, the non commercial polygons to SCRUB_SHRUB, and the commercial to HARVESTABLE",TRUE
13,SPECIES_1,text,"notNull(species_1);notEmpty(species_1);matchList(species_1,{'WS','BS','PN','WW','AL','PO'})","lookupText(species_1, 'translation', 'species_code_mapping', 'pc02_species_codes', 'casfri_species_codes', 'TRUE')","Check species code is long enough to have a species_1. Get the species_1 substring, check its in the lookup table, then translate it.",TRUE
14,SPECIES_PER_1,integer,false(),"lengthMapInt(species_per_1, {2,4,6}, {100,60,40})",Check species code is long enough to have a species_1. Return correct percent based on the total number of species.,TRUE
15,SPECIES_2,text,"notNull(species_2);notEmpty(species_2);matchList(species_2,{'WS','BS','PN','WW','AL','PO'})","lookupText(species_2, 'translation', 'species_code_mapping', 'pc02_species_codes', 'casfri_species_codes', 'TRUE')","Check species code is long enough to have a species_2. Get the species_2 substring, check its in the lookup table, then translate it.",TRUE
16,SPECIES_PER_2,integer,false(),"lengthMapInt(species_per_2, {4,6}, {40,30})",Check species code is long enough to have a species_3. Return correct percent based on the total number of species.,TRUE
17,SPECIES_3,text,"notNull(species_3);notEmpty(species_3);matchList(species_3,{'WS','BS','PN','WW','AL','PO'})","lookupText(species_3, 'translation', 'species_code_mapping', 'pc02_species_codes', 'casfri_species_codes', 'TRUE')","Check species code is long enough to have a species_3. Get the species_3 substring, check its in the lookup table, then translate it.",TRUE
18,SPECIES_PER_3,integer,false(),"lengthMapInt(species_per_3, {6}, {30})",Check species code is long enough to have a species_3. Return correct percent based on the total number of species.,TRUE
19,SPECIES_4,text,"notNull(species_4);notEmpty(species_4);matchList(species_4,{'WS','BS','PN','WW','AL','PO'})","lookupText(species_4, 'translation', 'species_code_mapping', 'pc02_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_4 using lookup table,TRUE
20,SPECIES_PER_4,integer,false(),nothingInt(),Maps source value to SPECIES_PER_4 by multiplying by 10. Layer 2 only has 2 species so rules for species 3 and 4 only need to account for layer 1.,TRUE
21,SPECIES_5,text,false(),nothingText(),Attribute does not occur,TRUE
22,SPECIES_PER_5,integer,false(),nothingInt(),Attribute does not occur,TRUE
23,SPECIES_6,text,false(),nothingText(),Attribute does not occur,TRUE
24,SPECIES_PER_6,integer,false(),nothingInt(),Attribute does not occur,TRUE
25,SPECIES_7,text,false(),nothingText(),Attribute does not occur,TRUE
26,SPECIES_PER_7,integer,false(),nothingInt(),Attribute does not occur,TRUE
27,SPECIES_8,text,false(),nothingText(),Attribute does not occur,TRUE
28,SPECIES_PER_8,integer,false(),nothingInt(),Attribute does not occur,TRUE
29,SPECIES_9,text,false(),nothingText(),Attribute does not occur,TRUE
30,SPECIES_PER_9,integer,false(),nothingInt(),Attribute does not occur,TRUE
31,SPECIES_10,text,false(),nothingText(),Attribute does not occur,TRUE
32,SPECIES_PER_10,integer,false(),nothingInt(),Attribute does not occur,TRUE
33,ORIGIN_UPPER,integer,false(),nothingInt(),Translation is different for Newfoundland and Labrador. Check there is a age code of 1 to 9. 8 and 9 are only valid for Labrador so make sure Newfoundland doesnt have these values. Translation determines if polygon is in Newfoundland or Labrador based on src_filename. Finally check the photo year is not zero. Then runs either the correct mapping. ,TRUE
34,ORIGIN_LOWER,integer,false(),nothingInt(),Translation is different for Newfoundland and Labrador. Check there is a age code of 1 to 9. 8 and 9 are only valid for Labrador so make sure Newfoundland doesnt have these values. Translation determines if polygon is in Newfoundland or Labrador based on src_filename. Then runs either the correct mapping. For age class 7 in Newfoundland upper age bound is 121+ which means lower origin is unknown. Same for age class 9 in Labrador where age class is 161+. Catch these with nl_nli01_origin_lower_validation. Finally check the photo year is greater than zero.,TRUE
35,SITE_CLASS,text,false(),nothingText(),"Concatenates values from 2 attributes and maps to SITE_CLASS using list of values. Usually only one of the attributes will occur per row in the source data, the other will be set to 0. Target values are based on the translation for the non-zero value.",TRUE
36,SITE_INDEX,double precision,false(),nothingDouble(),Attribute does not occur,TRUE
