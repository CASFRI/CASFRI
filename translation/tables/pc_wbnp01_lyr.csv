rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"matchTable(species_1, 'translation', 'species_code_mapping', 'pc02_species_codes', 'TRUE')",NA,"Translate all rows with a species code, plus any treed bog polygons that will be recorded in PRODUCTIVITY_TYPE",TRUE
1,CAS_ID,text,notEmpty(inventory_id);notEmpty(src_filename);notNull(map_sheet_id);notNull(orig_stand_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, map_sheet_id, orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','x','x'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(soil_moist_reg);notEmpty(soil_moist_reg);matchList(soil_moist_reg,{'0','1','2','3'})","mapText(soil_moist_reg, {'0','1','2','3'}, {'NULL_VALUE','WET','MESIC','DRY'})",Soil moisture only valid for non commercial stands,TRUE
3,STRUCTURE_PER,integer,"notEmpty(structure_per);notNull(structure_per);isInt(structure_per);isBetween(structure_per,0,9)","mapInt(structure_per, {'0','1','2','3','4','5','6','7','8','9'}, {10,20,30,40,50,60,70,80,90,100})",No horizontal structure so structure percent is 100,TRUE
4,STRUCTURE_RANGE,double precision,false(),nothingDouble(),No complex structure,TRUE
5,LAYER,integer,true(),"pc02_countOfNotNull(v1sp1, v2sp1, v3sp1, v4sp1, v5sp1, v6sp1, v7sp1, v1pcm, v2pcm, v3pcm, v4pcm, v5pcm, v6pcm, v7pcm, shrln, 'translation', 'species_code_mapping', 'pc02_species_codes', layer)",Calculate number of layer according to vegetation composition,TRUE
6,LAYER_RANK,integer,false(),nothingInt(),Attribute does not occur,TRUE
7,CROWN_CLOSURE_UPPER,integer,false(),nothingInt(),Attribute does not occur,TRUE
8,CROWN_CLOSURE_LOWER,integer,false(),nothingInt(),Attribute does not occur,TRUE
9,HEIGHT_UPPER,double precision,"notNull(height_upper);notEmpty(height_upper|-8888);isInt(height_upper);matchList(height_upper,{0,1,2,3,13,14,23,24,34,35,45}|-9999)","mapDouble(height_upper, {'0','1','2','3','13','14','23','24','34','35','45'}, {1,5,10,15,15,20,10,15,20,25,26})",Translation is different for commercial and non commercial forest. Check there is a valid height code of 1 to 8. 6 to 8 are only valid for commercial so make sure non commercial doesnt have these values. Translation determines if polygon is commercial or non commercial based on stand_id and working_group. Then runs either the commercial or non commercial mapping.,TRUE
10,HEIGHT_LOWER,double precision,"notNull(height_lower);notEmpty(height_lower|-8888);isInt(height_lower);matchList(height_lower,{0,1,2,3,13,14,23,24,34,35,45}|-9999)","mapDouble(height_lower, {'0','1','2','3','13','14','23','24','34','35','45'}, {0,1,6,11,1,1,6,6,11,11,16})",Translation is different for commercial and non commercial forest. Check there is a valid height code of 1 to 8. 6 to 8 are only valid for commercial so make sure non commercial doesnt have these values. Translation determines if polygon is commercial or non commercial based on stand_id and working_group. Then runs either the commercial or non commercial mapping.,TRUE
11,PRODUCTIVITY,text," notMatchList(species_1, {'AL', 'WW' }|UNKNOWN_VALUE);false(|NOT_APPLICABLE)",nothingText(),Assigned UNKNOWN_VALUE when PRODUCTIVE_TYPE is ALDER. Default value is NOT_APPLICABLE,TRUE
12,PRODUCTIVITY_TYPE,text,"notNull(species_1);notEmpty(species_1);matchList(species_1,{'AL','WW'} |NOT_APPLICABLE)","mapText(species_1, {'AL', 'WW'}, {'ALDER','ALDER'})","When dominant species is alder, we assigned ALDER as PRODUCTIVE_TYPE ",TRUE
13,SPECIES_1,text,"notNull(species_1);notEmpty(species_1);notMatchList(species_1,'BC' |NOT_IN_SET);matchTable(species_1, 'translation', 'species_code_mapping', 'pc02_species_codes', 'TRUE')","lookupText(species_1, 'translation', 'species_code_mapping', 'pc02_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_4 using lookup table,TRUE
14,SPECIES_PER_1,integer,"hasCountOfNotNull(species_1, species_2, species_3, species_4, 1, 'FALSE')","countOfNotNullMapInt(species_1, species_2, species_3, species_4, 4, {1,2,3,4}, {100,60,40,35})",Check species code is long enough to have a species_1. Return correct percent based on the total number of species.,TRUE
15,SPECIES_2,text,"notNull(species_2);notEmpty(species_2);notMatchList(species_1,'BC' |NOT_IN_SET);matchTable(species_2, 'translation', 'species_code_mapping', 'pc02_species_codes', 'TRUE')","lookupText(species_2, 'translation', 'species_code_mapping', 'pc02_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_4 using lookup table,TRUE
16,SPECIES_PER_2,integer,"hasCountOfNotNull(species_1, species_2, species_3, species_4, 2, 'FALSE')","countOfNotNullMapInt(species_1, species_2, species_3, species_4, 4, {2,3,4}, {40,30,35})",Check species code is long enough to have a species_2. Return correct percent based on the total number of species.,TRUE
17,SPECIES_3,text,"notNull(species_3);notEmpty(species_3);notMatchList(species_1,'BC' |NOT_IN_SET);matchTable(species_3, 'translation', 'species_code_mapping', 'pc02_species_codes', 'TRUE')","lookupText(species_3, 'translation', 'species_code_mapping', 'pc02_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_4 using lookup table,TRUE
18,SPECIES_PER_3,integer,"hasCountOfNotNull(species_1, species_2, species_3, species_4, 3, 'FALSE')","countOfNotNullMapInt(species_1, species_2, species_3, species_4, 4, {3,4}, {30,15})",Check species code is long enough to have a species_3. Return correct percent based on the total number of species.,TRUE
19,SPECIES_4,text,"notNull(species_4);notEmpty(species_4);notMatchList(species_1,'BC' |NOT_IN_SET);matchTable(species_4, 'translation', 'species_code_mapping', 'pc02_species_codes', 'TRUE')","lookupText(species_4, 'translation', 'species_code_mapping', 'pc02_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_4 using lookup table,TRUE
20,SPECIES_PER_4,integer,"hasCountOfNotNull(species_1, species_2, species_3, species_4, 4, 'FALSE')","countOfNotNullMapInt(species_1, species_2, species_3, species_4, 4, {4}, {15})",Check species code is long enough to have a species_4. Return correct percent based on the total number of species.,TRUE
21,SPECIES_5,text,false(),nothingText(),Attribute does not occur,TRUE
22,SPECIES_PER_5,integer,false(),nothingInt(),Attribute does not occur,TRUE
23,SPECIES_6,text,false(),nothingText(),Attribute does not occur,TRUE
24,SPECIES_PER_6,integer,false(),nothingInt(),Attribute does not occur,TRUE
25,SPECIES_7,text,false(),nothingText(),Attribute does not occur,TRUE
26,SPECIES_PER_7,integer,false(),nothingInt(),Attribute does not occur,TRUE
27,SPECIES_8,text,false(),nothingText(),Attribute does not occur,TRUE
28,SPECIES_PER_8,integer,false(),nothingInt(),Attribute does not occur,TRUE
29,SPECIES_9,text,false(),nothingText(),Attribute does not occur,TRUE
30,SPECIES_PER_9,integer,false(),nothingInt(),Attribute does not occur,TRUE
31,SPECIES_10,text,false(),nothingText(),Attribute does not occur,TRUE
32,SPECIES_PER_10,integer,false(),nothingInt(),Attribute does not occur,TRUE
33,ORIGIN_UPPER,integer,false(),nothingInt(),Attribute does not occur,TRUE
34,ORIGIN_LOWER,integer,false(),nothingInt(),Attribute does not occur,TRUE
35,SITE_CLASS,text,false(),nothingText(),Attribute does not occur,TRUE
36,SITE_INDEX,double precision,false(),nothingDouble(),Attribute does not occur,TRUE
