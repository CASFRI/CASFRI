rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"notEmpty({species_1, species_2, species_3, species_4, species_5}, TRUE)",NA,"Translate only rows where sp1, sp2, sp3, sp4 or sp5 is not empty", TRUE
1,CAS_ID,text,notEmpty(inventory_id);notNull(src_filename);notNull(map_sheet_id);notNull(orig_stand_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, map_sheet_id, orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(soil_moist_reg);notEmpty(soil_moist_reg);matchList(soil_moist_reg,{'a','A','d','D','m','M','w','W'})","mapText(soil_moist_reg, {'a','A','d','D','m','M','w','W'}, {'A','A','D','D','F','F','W','W'})",Maps source value to SOIL_MOIST_REG using lists of values,TRUE
3,STRUCTURE_PER,integer,"matchList({stand_structure, struc_val}, {'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'H7', 'H8', 'H9', 'C3', 'C4', 'C6', 'C7', 'C8', 'C9', 'S0', 'M0', 'M', 'MO', '0'})","mapInt({stand_structure, struc_val}, {'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'H7', 'H8', 'H9', 'C3', 'C4', 'C6', 'C7', 'C8', 'C9', 'S0', 'M0', 'M', 'MO', '0'}, {10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100})","Concatenate stand structure letter and structure percent value, then map to correct value.",TRUE
4,LAYER,integer,true(),"countOfNotNull({species_1_layer1}, {species_1_layer2}, {nfl, anth_veg, anth_non, nat_non}, {unfl, uanth_veg, uanth_non, unat_non}, layer, 'FALSE')",Count layers up to max_layer_number which is set by the createMappingsView() function in the workflow. Dummy variables are used here and in attribute_dependencies.csv to avoid two sets of values (sp1 and usp1) being mapped to the same column (sp1),TRUE
5,LAYER_RANK,integer,false(|-8887),nothingInt(),No rank attribute,TRUE
6,CROWN_CLOSURE_UPPER,integer,"notNull(crown_closure_upper);notEmpty(crown_closure_upper);matchList(crown_closure_upper,{'A','B','C','D'})","mapInt(crown_closure_upper, {'A','B','C','D'}, {30,50,70,100})",Maps source value to CROWN_CLOSURE_UPPER using lists of values.,TRUE
7,CROWN_CLOSURE_LOWER,integer,"notNull(crown_closure_lower);notEmpty(crown_closure_lower);matchList(crown_closure_lower,{'A','B','C','D'})","mapInt(crown_closure_lower, {'A','B','C','D'}, {6,31,51,71})",Maps source value to CROWN_CLOSURE_LOWER using lists of values,TRUE
8,HEIGHT_UPPER,double precision,"notEmpty(species_1|-8887);notNull(height_upper);isNumeric(height_upper);isBetween(height_upper,1,100)",copyDouble(height_upper),"Copies source value to HEIGHT_UPPER for rows with sp1 value. Rows without sp1 can still have height for the nfl shrub layer, we don't want to report those values here.",TRUE
9,HEIGHT_LOWER,double precision,"notEmpty(species_1|-8887);notNull(height_lower);isNumeric(height_lower);isBetween(height_lower,1,100)",copyDouble(height_lower),"Copies source value to HEIGHT_LOWER for rows with sp1 value. Rows without sp1 can still have height for the nfl shrub layer, we don't want to report those values here.",TRUE
10,PRODUCTIVE_FOR,text,false(),nothingText(),Waiting for a new helper function,TRUE
11,SPECIES_1,text,"notNull(species_1);notEmpty(species_1);matchTable(species_1,'translation','ab_avi01_species','TRUE')","lookupText(species_1, 'translation', 'ab_avi01_species', 'spec1', 'TRUE')",Maps source value to SPECIES_1 using lookup table,TRUE
12,SPECIES_PER_1,integer,"notNull(species_per_1);isInt(species_per_1);isBetween(species_per_1,0,100)",copyInt(species_per_1),Copies source value to SPECIES_PER_1,TRUE
13,SPECIES_2,text,"notNull(species_2);notEmpty(species_2);matchTable(species_2,'translation','ab_avi01_species','TRUE')","lookupText(species_2, 'translation', 'ab_avi01_species', 'spec2', 'TRUE')",Maps source value to SPECIES_2 using lookup table,TRUE
14,SPECIES_PER_2,integer,"notNull(species_per_2);isInt(species_per_2);isBetween(species_per_2,0,100)",copyInt(species_per_2),Copies source value to SPECIES_PER_2,TRUE
15,SPECIES_3,text,"notNull(species_3);notEmpty(species_3);matchTable(species_3,'translation','ab_avi01_species','TRUE')","lookupText(species_3, 'translation', 'ab_avi01_species', 'spec3', 'TRUE')",Maps source value to SPECIES_3 using lookup table,TRUE
16,SPECIES_PER_3,integer,"notNull(species_per_3);isInt(species_per_3);isBetween(species_per_3,0,100)",copyInt(species_per_3),Copies source value to SPECIES_PER_3,TRUE
17,SPECIES_4,text,"notNull(species_4);notEmpty(species_4);matchTable(species_4,'translation','ab_avi01_species','TRUE')","lookupText(species_4, 'translation', 'ab_avi01_species', 'spec4', 'TRUE')",Maps source value to SPECIES_4 using lookup table,TRUE
18,SPECIES_PER_4,integer,"notNull(species_per_4);isInt(species_per_4);isBetween(species_per_4,0,100)",copyInt(species_per_4),Copies source value to SPECIES_PER_4,TRUE
19,SPECIES_5,text,"notNull(species_5);notEmpty(species_5);matchTable(species_5,'translation','ab_avi01_species','TRUE')","lookupText(species_5, 'translation', 'ab_avi01_species', 'spec5', 'TRUE')",Maps source value to SPECIES_5 using lookup table,TRUE
20,SPECIES_PER_5,integer,"notNull(species_per_5);isInt(species_per_5);isBetween(species_per_5,0,100)",copyInt(species_per_5),Copies source value to SPECIES_PER_5,TRUE
21,SPECIES_6,text,false(),nothingText(),Attribute does not occur,TRUE
22,SPECIES_PER_6,integer,false(),nothingInt(),Attribute does not occur,TRUE
23,SPECIES_7,text,false(),nothingText(),Attribute does not occur,TRUE
24,SPECIES_PER_7,integer,false(),nothingInt(),Attribute does not occur,TRUE
25,SPECIES_8,text,false(),nothingText(),Attribute does not occur,TRUE
26,SPECIES_PER_8,integer,false(),nothingInt(),Attribute does not occur,TRUE
27,SPECIES_9,text,false(),nothingText(),Attribute does not occur,TRUE
28,SPECIES_PER_9,integer,false(),nothingInt(),Attribute does not occur,TRUE
29,SPECIES_10,text,false(),nothingText(),Attribute does not occur,TRUE
30,SPECIES_PER_10,integer,false(),nothingInt(),Attribute does not occur,TRUE
31,ORIGIN_UPPER,integer,"notNull(origin_upper);isInt(origin_upper);isBetween(origin_upper,1500,2020)",copyInt(origin_upper),Copies (origin) to ORIGIN_UPPER,TRUE
32,ORIGIN_LOWER,integer,"notNull(origin_lower);isInt(origin_lower);isBetween(origin_lower,1500,2020)",copyInt(origin_lower),Copies (origin) to ORIGIN_LOWER,TRUE
33,SITE_CLASS,text,"notNull(site_class);notEmpty(site_class);matchList(site_class,{'U','F','M','G'})","mapText(site_class, {'U','F','M','G'}, {'U','P','M','G'})",Maps source value to SITE_CLASS using lists of values,TRUE
34,SITE_INDEX,double precision,false(),nothingDouble(),Attribute does not occur,TRUE
