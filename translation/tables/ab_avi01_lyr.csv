rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"notEmpty({species_1, species_2, species_3, species_4, species_5}, TRUE)",NA,"Translate only rows where sp1, sp2, sp3, sp4 or sp5 is not empty. Note that none of these rows include NFL info so each polygon is either LYR or NFL.", TRUE
1,CAS_ID,text,notEmpty(inventory_id);notNull(src_filename);notNull(map_sheet_id);notNull(orig_stand_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, map_sheet_id, orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(soil_moist_reg);notEmpty(soil_moist_reg);matchList(soil_moist_reg,{'a','A','d','D','m','M','w','W'})","mapText(soil_moist_reg, {'a','A','d','D','m','M','w','W'}, {'AQUATIC','AQUATIC','DRY','DRY','MESIC','MESIC','WET','WET'})",Maps source value to SOIL_MOIST_REG using lists of values,TRUE
3,STRUCTURE_PER,integer,"matchList({stand_structure, struc_val}, {'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'H7', 'H8', 'H9', 'C3', 'C4', 'C6', 'C7', 'C8', 'C9', 'S0', 'M0', 'M', 'MO', '0'}|-8887)","mapInt({stand_structure, struc_val}, {'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'H7', 'H8', 'H9', 'C3', 'C5', 'C4', 'C6', 'C7', 'C8', 'C9', 'S0', 'M0', 'M', 'MO', '0'}, {10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100})","Concatenate stand structure letter and structure percent value. Check value is in the possible list of values, if not return NOT_APPLICABLE. Tthen map to correct value.",TRUE
4,STRUCTURE_RANGE,double precision,"matchList({stand_structure, struc_val}, {'C1', 'C2', 'C3', 'C4', 'C6', 'C7', 'C8', 'C9'}|-8887)","mapDouble({stand_structure, struc_val}, {'C1', 'C2', 'C3', 'C5', 'C4', 'C6', 'C7', 'C8', 'C9'}, {1, 2, 3, 4, 5, 6, 7, 8, 9})","Validation checks the row is a complex stand. If it is, the structure range value represents the median range of tree heights. Some AB inventories seprate the stand structure character and value, some leave them concatenated. Concatenate them together and map the values to get the height range in metres. Inventories where the character and value are already concatenated will use an empty string during concatenation. Complex structure is always defined in the overstory layer.",TRUE
5,LAYER,integer,true(),"lyr_layer_translation({height_layer1, height_layer2}, {species_1_layer1}, {species_1_layer2}, layer)",Reorder the layers that exist in the polygon by height and return the index of the layer being processed,TRUE
6,LAYER_RANK,integer,false(|-8886),nothingInt(),No rank attribute,TRUE
7,CROWN_CLOSURE_UPPER,integer,"notNull(crown_closure_upper);notEmpty(crown_closure_upper|-8888);matchList(crown_closure_upper,{'A','B','C','D'}|-9997)","mapInt(crown_closure_upper, {'A','B','C','D'}, {30,50,70,100})",Maps source value to CROWN_CLOSURE_UPPER using lists of values.,TRUE
8,CROWN_CLOSURE_LOWER,integer,"notNull(crown_closure_lower);notEmpty(crown_closure_lower|-8888);matchList(crown_closure_lower,{'A','B','C','D'}|-9997)","mapInt(crown_closure_lower, {'A','B','C','D'}, {6,31,51,71})",Maps source value to CROWN_CLOSURE_LOWER using lists of values,TRUE
9,HEIGHT_UPPER,double precision,"notEmpty(species_1|-8887);notNull(height_upper);isNumeric(height_upper);isBetween(height_upper,0,100,FALSE,TRUE)",copyDouble(height_upper),"Copies source value to HEIGHT_UPPER for rows with sp1 value. Rows without sp1 can still have height for the nfl shrub layer, we don't want to report those values here.",TRUE
10,HEIGHT_LOWER,double precision,"notEmpty(species_1|-8887);notNull(height_lower);isNumeric(height_lower);isBetween(height_lower,0,100,FALSE,TRUE)",copyDouble(height_lower),"Copies source value to HEIGHT_LOWER for rows with sp1 value. Rows without sp1 can still have height for the nfl shrub layer, we don't want to report those values here.",TRUE
11,PRODUCTIVITY,text,"matchList(productivity, {'U','F','M','G'}|UNKNOWN_VALUE)","mapText(productivity, {'U','F','M','G'}, {'NON_PRODUCTIVE_FOREST','PRODUCTIVE_FOREST','PRODUCTIVE_FOREST','PRODUCTIVE_FOREST'})","Timber productivity rating indicates the potential timber productivity of a stand. TPR of Good, Medium or Fair is assigned PRODUCTIVE_FOREST based on the avi manual. Unproductive is translated to NON_PRODUCTIVE_FOREST. Value is layer specific.",TRUE
12,PRODUCTIVITY_TYPE,text,false(|UNKNOWN_VALUE),nothingText(),No productivity type info,TRUE
13,SPECIES_1,text,"notNull(species_1);notEmpty(species_1);matchTable(species_1, 'translation', 'species_code_mapping', 'ab_species_codes', 'TRUE')","lookupText(species_1, 'translation', 'species_code_mapping', 'ab_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_1 using lookup table,TRUE
14,SPECIES_PER_1,integer,"notNull(species_per_1);isInt(species_per_1|-9997);isGreaterThan(species_per_1, 1|-8888);isBetween(species_per_1,1,10)","multiplyInt(species_per_1, 10)",Multiplies by 10 to get percent. Zero is assigned NULL_VALUE.,TRUE
15,SPECIES_2,text,"notNull(species_2);notEmpty(species_2);matchTable(species_2, 'translation', 'species_code_mapping', 'ab_species_codes', 'TRUE')","lookupText(species_2, 'translation', 'species_code_mapping', 'ab_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_2 using lookup table,TRUE
16,SPECIES_PER_2,integer,"notNull(species_per_2);isInt(species_per_2|-9997);isGreaterThan(species_per_2, 1|-8888);isBetween(species_per_2,1,10)","multiplyInt(species_per_2, 10)",Multiplies by 10 to get percent. Zero is assigned NULL_VALUE.,TRUE
17,SPECIES_3,text,"notNull(species_3);notEmpty(species_3);matchTable(species_3,'translation', 'species_code_mapping', 'ab_species_codes', 'TRUE')","lookupText(species_3, 'translation', 'species_code_mapping', 'ab_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_3 using lookup table,TRUE
18,SPECIES_PER_3,integer,"notNull(species_per_3);isInt(species_per_3|-9997);isGreaterThan(species_per_3, 1|-8888);isBetween(species_per_3,1,10)","multiplyInt(species_per_3, 10)",Multiplies by 10 to get percent. Zero is assigned NULL_VALUE.,TRUE
19,SPECIES_4,text,"notNull(species_4);notEmpty(species_4);matchTable(species_4,'translation', 'species_code_mapping', 'ab_species_codes', 'TRUE')","lookupText(species_4, 'translation', 'species_code_mapping', 'ab_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_4 using lookup table,TRUE
20,SPECIES_PER_4,integer,"notNull(species_per_4);isInt(species_per_4|-9997);isGreaterThan(species_per_4, 1|-8888);isBetween(species_per_4,1,10)","multiplyInt(species_per_4, 10)",Multiplies by 10 to get percent. Zero is assigned NULL_VALUE.,TRUE
21,SPECIES_5,text,"notNull(species_5);notEmpty(species_5);matchTable(species_5,'translation', 'species_code_mapping', 'ab_species_codes', 'TRUE')","lookupText(species_5, 'translation', 'species_code_mapping', 'ab_species_codes', 'casfri_species_codes', 'TRUE')",Maps source value to SPECIES_5 using lookup table,TRUE
22,SPECIES_PER_5,integer,"notNull(species_per_5);isInt(species_per_5|-9997);isGreaterThan(species_per_5, 1|-8888);isBetween(species_per_5,1,10)","multiplyInt(species_per_5, 10)",Multiplies by 10 to get percent. Zero is assigned NULL_VALUE.,TRUE
23,SPECIES_6,text,false(),nothingText(),Attribute does not occur,TRUE
24,SPECIES_PER_6,integer,false(),nothingInt(),Attribute does not occur,TRUE
25,SPECIES_7,text,false(),nothingText(),Attribute does not occur,TRUE
26,SPECIES_PER_7,integer,false(),nothingInt(),Attribute does not occur,TRUE
27,SPECIES_8,text,false(),nothingText(),Attribute does not occur,TRUE
28,SPECIES_PER_8,integer,false(),nothingInt(),Attribute does not occur,TRUE
29,SPECIES_9,text,false(),nothingText(),Attribute does not occur,TRUE
30,SPECIES_PER_9,integer,false(),nothingInt(),Attribute does not occur,TRUE
31,SPECIES_10,text,false(),nothingText(),Attribute does not occur,TRUE
32,SPECIES_PER_10,integer,false(),nothingInt(),Attribute does not occur,TRUE
33,ORIGIN_UPPER,integer,"notNull(origin_upper);isInt(origin_upper);isBetween(origin_upper,1000,2020)",copyInt(origin_upper),Copies (origin) to ORIGIN_UPPER,TRUE
34,ORIGIN_LOWER,integer,"notNull(origin_lower);isInt(origin_lower);isBetween(origin_lower,1000,2020)",copyInt(origin_lower),Copies (origin) to ORIGIN_LOWER,TRUE
35,SITE_CLASS,text,"notNull(site_class);notEmpty(site_class);matchList(site_class,{'U','F','M','G'})","mapText(site_class, {'U','F','M','G'}, {'UNPRODUCTIVE','POOR','MEDIUM','GOOD'})",Maps source value to SITE_CLASS using lists of values,TRUE
36,SITE_INDEX,double precision,false(),nothingDouble(),Attribute does not occur,TRUE
