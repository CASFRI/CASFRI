rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
1,CAS_ID,text,notEmpty(inventory_id);notNull(src_filename);notNull(map_id);notNull(feature_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, map_id, feature_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(soil_moisture_regime_1);matchList(soil_moisture_regime_1,{0,1,2,3,4,5,6,7,8})","mapText(soil_moisture_regime_1, {0,1,2,3,4,5,6,7,8}, {'D','D','D','F','F','M','M','W','W'})",Maps source value to SOIL_MOIST_REG using lists of values,TRUE
3,STRUCTURE_PER,integer,true(),copyInt(100),No horizontal structure so structure_per is always 100,TRUE
4,LAYER,integer,true(),"numberOfNotNull({species_cd_1, species_cd_2, species_cd_3, species_cd_4, species_cd_5, species_cd_6}, {dummy1, dummy2, dummy3, dummy4, dummy5, dummy6}, {land_cover_class_cd_1, bclcs_level_4, non_productive_descriptor_cd, non_veg_cover_type_1}, max_layer_number)",Count layers up to max_layer_number which is set by the createMappingsView() function in the workflow. Dummy variables are used here and in attribute_dependencies.csv to allow different numbers of variables to be used in BC08 and BC10,TRUE
5,LAYER_RANK,integer,false(|-8887),nothingInt(),No rank for nfl layers.,TRUE
6,CROWN_CLOSURE_UPPER,integer,"notNull(crown_closure);isInt(crown_closure);isBetween(crown_closure,0,100)",copyInt(crown_closure),Maps source value to CROWN_CLOSURE_UPPER using lists of values,TRUE
7,CROWN_CLOSURE_LOWER,integer,"notNull(crown_closure);isInt(crown_closure);isBetween(crown_closure,0,100)",copyInt(crown_closure),Maps source value to CROWN_CLOSURE_LOWER using lists of values,TRUE
8,HEIGHT_UPPER,double precision,"notNull(proj_height_1);isNumeric(proj_height_1);isGreaterThan(proj_height_1,'0.1');isLessThan(proj_height_1,100)",copyDouble(proj_height_1),Copies source value to HEIGHT_UPPER,TRUE
9,HEIGHT_LOWER,double precision,"notNull(proj_height_1);isNumeric(proj_height_1);isGreaterThan(proj_height_1,'0.1');isLessThan(proj_height_1,100)",copyDouble(proj_height_1),Copies source value to HEIGHT_LOWER,TRUE
10,NAT_NON_VEG,text,"notNull(inventory_standard_cd);matchList(inventory_standard_cd,{'V','I','F'});countNotNull({inventory_standard_cd, land_cover_class_cd_1, bclcs_level_4, non_productive_descriptor_cd, non_veg_cover_type_1}, 1, 'FALSE', 'TRUE');vri01_nat_non_veg_validation(inventory_standard_cd, land_cover_class_cd_1, bclcs_level_4, non_productive_descriptor_cd, non_veg_cover_type_1)","vri01_nat_non_veg_translation(inventory_standard_cd, land_cover_class_cd_1, bclcs_level_4, non_productive_descriptor_cd, non_veg_cover_type_1)","Validation checks inventory id is not null and in set, and that at least one input variable value is present. Then checks that a valid combination of values is available to do the translation. Translation function maps source landcover types to CASFRI types for inventory standards V and I, first using the non_veg_cover_type_1 column, if still null then using the land_cover_class_cd_1 column, then if still null using the bclcs_level_4 column. For inventory standard F, maps using non_productive_descriptor_cd then bclcs_level_4. Returns NULL if not naturally non-vegetated, or if none of the mappings are realized. Generic translation error returned if error encountered.",TRUE
11,NON_FOR_ANTH,text,"notNull(inventory_standard_cd);matchList(inventory_standard_cd,{'V','I','F'});countNotNull({inventory_standard_cd, land_cover_class_cd_1, non_productive_descriptor_cd, non_veg_cover_type_1}, 1, 'FALSE', 'TRUE');vri01_non_for_anth_validation(inventory_standard_cd, land_cover_class_cd_1, non_productive_descriptor_cd, non_veg_cover_type_1)","vri01_non_for_anth_translation(inventory_standard_cd, land_cover_class_cd_1, non_productive_descriptor_cd, non_veg_cover_type_1)","Validation checks inventory id not null and in set, and that at least one input variable value is present.  Then checks that a valid combination of values is available to do the translation. Translation function maps source landcover types to CASFRI types for inventory standards V and I, first using the non_veg_cover_type_1 column, then if still null using the land_cover_class_cd_1 column. For inventory standard F, maps using non_productive_descriptor_cd. Returns NULL if not naturally non-vegetated, or if none of the mappings are realized. Generic translation error returned if error encountered.",TRUE
12,NON_FOR_VEG,text,"notNull(inventory_standard_cd);matchList(inventory_standard_cd,{'V','I','F'});countNotNull({inventory_standard_cd, land_cover_class_cd_1, bclcs_level_4, non_productive_descriptor_cd}, 1, 'FALSE', 'TRUE');vri01_non_for_veg_validation(inventory_standard_cd, land_cover_class_cd_1, bclcs_level_4, non_productive_descriptor_cd)","vri01_non_for_veg_translation(inventory_standard_cd, land_cover_class_cd_1, bclcs_level_4, non_productive_descriptor_cd)","Validation checks inventory id not null and in set, and that at least one input variable value is present.  Then checks that a valid combination of values is available to do the translation. Translation function maps source landcover types to CASFRI types for inventory standards V and I, first using the land_cover_class_cd_1 column, then if still null using the bclcs_level_4 column. For inventory standard F, maps using non_productive_descriptor_cd then bclcs_level_4. Returns NULL if not naturally non-vegetated, or if non of the mappings are realized. Generic translation error returned if error encountered.",TRUE
