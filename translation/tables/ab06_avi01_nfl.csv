rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
1,CAS_ID,text,notNull(src_filename);notNull(trm_1);notNull(poly_num);notNull(ogc_fid),"padConcat({'ab06', src_filename, trm_1, poly_num, ogc_fid}, {'4','15','10','10','7'}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(moist_reg);matchList(moist_reg,{'a','A','d','D','m','M','w','W'})","mapText(moist_reg, {'a','A','d','D','m','M','w','W'}, {'A','A','D','D','F','F','W','W'})",Maps source value to SOIL_MOIST_REG using lists of values,TRUE
3,STRUCTURE_PER,integer,"notNull(struc_val);isInt(struc_val);isBetween(struc_val,'1','9')",copyInt(struc_val),Copy source value to STRUCTURE_PER,TRUE
4,LAYER,integer,true(),copyInt('1'),Copy value of 1 to LAYER,TRUE
5,LAYER_RANK,integer,true(),copyInt('1'),Copy value of 1 to LAYER_RANK,TRUE
6,CROWN_CLOSURE_UPPER,integer,"notNull(density);matchList(density,{'A','B','C','D'})","mapInt(density, {'A','B','C','D'}, {'30','50','70','100'})",Maps source value to CROWN_CLOSURE_UPPER using lists of values,TRUE
7,CROWN_CLOSURE_LOWER,integer,"notNull(density);matchList(density,{'A','B','C','D'})","mapInt(density, {'A','B','C','D'}, {'6','31','51','71'})",Maps source value to CROWN_CLOSURE_LOWER using lists of values,TRUE
8,HEIGHT_UPPER,double precision,"notNull(height);isNumeric(height);isGreaterThan(height,'1');isLessThan(height,'100')",copyDouble(height),Copies source value to HEIGHT_UPPER,TRUE
9,HEIGHT_LOWER,double precision,"notNull(height);isNumeric(height);isGreaterThan(height,'1');isLessThan(height,'100')",copyDouble(height),Copies source value to HEIGHT_LOWER,TRUE
10,NAT_NON_VEG,text,"notNull(nat_non);notEmpty(nat_non);matchList(nat_non,{'NMB','NWF','NWL'})","mapText(nat_non, {'NMB','NWF','NWL'}, {'EX','FL','LA'})",Maps source value to NAT_NON_VEG using list of values,TRUE
11,NON_FOR_ANTH,text,"countNotNull({anth_veg, anth_non}, '1', 'TRUE', 'TRUE');matchList(anth_veg, {'AIG','AIH','CIP','CIW'}, 'FALSE', 'TRUE');matchList(anth_non, {'AIG','AIH','CIP','CIW'}, 'FALSE', 'TRUE')","avi01_non_for_anth_translation(anth_veg, anth_non, {'AIG','AIH','CIP','CIW'}, {'IN','FA','FA','FA'}, 'TRUE')","Custom CASFRI map function merges anth_veg and anth_non then runs mapText(anth_veg_anth_non,  'AIG,AIH,CIP,CIW', 'IN,FA,FA,FA'). Validation functions check exactly one input has a value, and that the value is in the match list.",TRUE
12,NON_FOR_VEG,text,"notNull(nfl);notEmpty(nfl);matchList(nfl,{'HF','HG','SC','SO'})","mapText(nfl, {'HF','HG','SC','SO'}, {'HF','HG','SC','SO'})",Maps source value to NON_FOR_VEG using list of values. FLAG-map list matches fri list. Is this correct?,TRUE
