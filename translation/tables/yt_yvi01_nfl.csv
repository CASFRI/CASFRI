rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"matchList({type_lnd, '-', class}, {'NU-RD', 'NU-G', 'NU-T'}); matchList({type_lnd, '-', class}, {'VN-S', 'VN-H', 'VN-C', 'VN-M'});  matchList({type_lnd, '-', landpos}, {'NW-A', 'NS-A', 'NE-A'}); matchList({type_lnd, '-', class}, {'NW-R', 'NW-L', 'NW-RS', 'NW-E', 'NW-S', 'NW-B', 'NW-RR', 'NS-R', 'NS-L', 'NS-RS', 'NS-E', 'NS-S', 'NS-B', 'NS-RR', 'NE-R', 'NE-L', 'NE-RS', 'NE-E', 'NE-S', 'NE-B', 'NE-RR'})  ",NA,Translate only rows producing an NFL value. Concatenated values are separated with a dash hear to make them more readable. Combinations of values match those in the nfl validations below., TRUE
1,CAS_ID,text,notEmpty(inventory_id);notEmpty(src_filename);notNull(orig_stand_id);notNull(poly_id),"padConcat({inventory_id, src_filename, '', orig_stand_id, poly_id}, {4,15,10,10,7}, {'x','x','x','x','x'}, '-', TRUE, TRUE)",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"yvi01_nfl_soil_moisture_validation(type_lnd, class, cl_mod, landpos|-8886);notNull(soil_moist_reg);notEmpty(soil_moist_reg);matchList(soil_moist_reg,{'a','A','d','D','m','M','w','W'})","mapText(soil_moist_reg, {'a','A','d','D','m','M','w','W'}, {'AQUATIC','AQUATIC','DRY','DRY','MESIC','MESIC','WET','WET'})",Validation: only want to translate soil moisture in NFL table if the row is either non_for_veg or has a nat_non_veg value of EXPOSED_LAND (burned or exposed land).,TRUE
3,STRUCTURE_PER,integer,true(),copyInt(100),No horizontal structure so structure percent is 100,TRUE
4,LAYER,integer,true(),copyInt(1),Only one layer,TRUE
5,LAYER_RANK,integer,false(),nothingInt(),Attribute does not occur,TRUE
6,CROWN_CLOSURE_UPPER,integer,false(),nothingInt(),No crown closure value for nfl,TRUE
7,CROWN_CLOSURE_LOWER,integer,false(),nothingInt(),No crown closure value for nfl,TRUE
8,HEIGHT_UPPER,double precision,false(),nothingDouble(),No height value for nfl,TRUE
9,HEIGHT_LOWER,double precision,false(),nothingDouble(),No height value for nfl,TRUE
10,NAT_NON_VEG,text,"notNull(type_lnd|NOT_APPLICABLE);notEmpty(type_lnd|NOT_APPLICABLE);matchList(type_lnd, {'NW','NS','NE'}|NOT_APPLICABLE);yvi01_nat_non_veg_validation(type_lnd, class, landpos)","yvi01_nat_non_veg_translation(type_lnd, class, landpos)","Checks type_lnd is not empty and is in 'NW','NS','NE'. Then checks either landpos is 'A', or class is in 'R','L','RS','E','S','B','RR'. Translation converts landpos A to ALPINE, and 'R','L','RS','E','S','B','RR' to 'RIVER','LAKE','WATER_SEDIMENT','EXPOSED_LAND','SAND','EXPOSED_LAND','ROCK_RUBBLE'.",TRUE
11,NON_FOR_ANTH,text,"notNull(type_lnd|NOT_APPLICABLE);notEmpty(type_lnd|NOT_APPLICABLE);matchList(type_lnd, {'NU'}|NOT_APPLICABLE);matchList(class, {'RD', 'G', 'T'})","mapText(class, {'RD','G','T'}, {'OTHER','OTHER','OTHER'})","Checks type_lnd is not empty. Checks type_lnd is NU, and class is RD, G or T. Converts RD, G and T to OTHER.",TRUE
12,NON_FOR_VEG,text,"notNull(type_lnd|NOT_APPLICABLE);notEmpty(type_lnd|NOT_APPLICABLE);matchList(type_lnd, {'VN'}|NOT_APPLICABLE);matchList(class, {'S','H','C','M'})","yvi01_non_for_veg_translation(type_lnd, class, cl_mod)","Checks type_lnd is not empty. Checks type_lnd is VN, and class is S, H, C or M. Converts cl_mod of TS, TSo, TSc, LS to TALL_SHRUB, TALL_SHRUB, TALL_SHRUB, LOW_SHRUB. And classes of C, H and M to BRYOID, HERBS and HERBS.",TRUE
