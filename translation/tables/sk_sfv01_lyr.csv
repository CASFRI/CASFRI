rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"notEmpty({species_1, species_2, species_3, species_4, species_5, species_6}, TRUE)",NA,"Translate only rows where l1_sp1, l1_sp2, l1_sp3, l1_sp4, l1_sp5 or l1_sp6 is not empty", TRUE
1,CAS_ID,text,notEmpty(inventory_id);notNull(orig_stand_id);notNull(src_filename);notNull(ogc_fid),"padConcat({inventory_id, src_filename, '', orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(soil_moist_reg);notEmpty(soil_moist_reg);matchList(soil_moist_reg,{'D','F','M','MF','MM','MW','VD','VF','VM','VW','W'})","mapText(soil_moist_reg, {'D','F','M','MF','MM','MW','VD','VF','VM','VW','W'}, {'D','F','M','F','M','W','D','F','M','W','W'})",Maps soure value to SOIL_MOIST_REG,TRUE
3,STRUCTURE_PER,integer,true(),copyInt(100),No horizontal structure so structure percent is 100,TRUE
4,LAYER,integer,true(),"sfv01_countOfNotNull({species_1_layer1}, {species_1_layer2}, {species_1_layer3}, {shrub1_layer1}, {herb1_layer1}, nvsl_layer, aquatic_class_layer, luc_layer, transp_class_layer, layer, 'FALSE')","Count layers up to max of 6. Layers are the forest species for layers 1, 2 and 3, the shrub layer, the herb layer, and a stand-level nfl layer that can be one of nvsl, aquatic_class, luc or transp_class. Custom function checks if nfl row is present then runs countOfNotNull. Only the first species is included for each forest layer as there are no cases where species 2, 3, 4, 5, or 6 are included without species 1. nvsl is the predominant non-veg cover type and can occur when there is forest info. 6 layers is therefore possible.",TRUE
5,LAYER_RANK,integer,false(),nothingInt(),Attribute does not occur,TRUE
6,CROWN_CLOSURE_UPPER,integer,"notNull(crown_closure_upper);isInt(crown_closure_upper);isBetween(crown_closure_upper,0,100)",copyInt(crown_closure_upper),Maps source value to CROWN_CLOSURE_UPPER using lists of values,TRUE
7,CROWN_CLOSURE_LOWER,integer,"notNull(crown_closure_lower);isInt(crown_closure_lower);isBetween(crown_closure_lower,0,100)",copyInt(crown_closure_lower),Maps source value to CROWN_CLOSURE_LOWER using lists of values,TRUE
8,HEIGHT_UPPER,double precision,"notNull(height_upper);isInt(height_upper);isBetween(height_upper,0,100)",copyDouble(height_upper),Maps source value to HEIGHT_UPPER,TRUE
9,HEIGHT_LOWER,double precision,"notNull(height_lower);isInt(height_lower);isBetween(height_lower,0,100)",copyDouble(height_lower),Maps source value to HEIGHT_LOWER,TRUE
10,PRODUCTIVE_FOR,text,false(),nothingText(),Correct translation has not been determined.,TRUE
11,SPECIES_1,text,"notNull(species_1);notEmpty(species_1);matchTable(species_1,'translation', 'sk_sfv01_species', 'TRUE')","lookupText(species_1, 'translation', 'sk_sfv01_species', 'spec1', 'TRUE')",Maps source value to SPECIES_1 using lookup table,TRUE
12,SPECIES_PER_1,integer,"notNull(species_per_1);isNumeric(species_per_1);isBetween(species_per_1,0,100)",copyInt(species_per_1),"Assigns percent based on many logical tests using the sa, sp10, sp11, sp12, sp20 and sp21 columns",TRUE
13,SPECIES_2,text,"notNull(species_2);notEmpty(species_2);matchTable(species_2,'translation', 'sk_sfv01_species', 'TRUE')","lookupText(species_2, 'translation', 'sk_sfv01_species', 'spec1', 'TRUE')",Maps source value to SPECIES_2 if available using lookup table,TRUE
14,SPECIES_PER_2,integer,"notNull(species_per_2);isNumeric(species_per_2);isBetween(species_per_2,0,100)",copyInt(species_per_2),"Assigns percent based on many logical tests using the sa, sp10, sp11, sp12, sp20 and sp21 columns",TRUE
15,SPECIES_3,text,"notNull(species_3);notEmpty(species_3);matchTable(species_3,'translation', 'sk_sfv01_species', 'TRUE')","lookupText(species_3, 'translation', 'sk_sfv01_species', 'spec1', 'TRUE')",Maps source value to SPECIES_3 if available using lookup table,TRUE
16,SPECIES_PER_3,integer,"notNull(species_per_3);isNumeric(species_per_3);isBetween(species_per_3,0,100)",copyInt(species_per_3),"Assigns percent based on many logical tests using the sa, sp10, sp11, sp12, sp20 and sp21 columns",TRUE
17,SPECIES_4,text,"notNull(species_4);notEmpty(species_4);matchTable(species_4,'translation', 'sk_sfv01_species', 'TRUE')","lookupText(species_4, 'translation', 'sk_sfv01_species', 'spec1', 'TRUE')",Maps source value to SPECIES_4 if available using lookup table,TRUE
18,SPECIES_PER_4,integer,"notNull(species_per_4);isNumeric(species_per_4);isBetween(species_per_4,0,100)",copyInt(species_per_4),"Assigns percent based on many logical tests using the sa, sp10, sp11, sp12, sp20 and sp21 columns",TRUE
19,SPECIES_5,text,"notNull(species_5);notEmpty(species_5);matchTable(species_5,'translation', 'sk_sfv01_species', 'TRUE')","lookupText(species_5, 'translation', 'sk_sfv01_species', 'spec1', 'TRUE')",Maps source value to SPECIES_5 if available using lookup table,TRUE
20,SPECIES_PER_5,integer,"notNull(species_per_4);isNumeric(species_per_4);isBetween(species_per_4,0,100)",copyInt(species_per_5),"Assigns percent based on many logical tests using the sa, sp10, sp11, sp12, sp20 and sp21 columns",TRUE
21,SPECIES_6,text,"notNull(species_6);notEmpty(species_6);matchTable(species_6,'translation', 'sk_sfv01_species', 'TRUE')","lookupText(species_6, 'translation', 'sk_sfv01_species', 'spec1', 'TRUE')",Attribute does not occur,TRUE
22,SPECIES_PER_6,integer,"notNull(species_per_4);isNumeric(species_per_4);isBetween(species_per_4,0,100)",copyInt(species_per_6),attribute does not occur,TRUE
23,SPECIES_7,text,false(),nothingText(),attribute does not occur,TRUE
24,SPECIES_PER_7,integer,false(),nothingInt(),attribute does not occur,TRUE
25,SPECIES_8,text,false(),nothingText(),attribute does not occur,TRUE
26,SPECIES_PER_8,integer,false(),nothingInt(),attribute does not occur,TRUE
27,SPECIES_9,text,false(),nothingText(),attribute does not occur,TRUE
28,SPECIES_PER_9,integer,false(),nothingInt(),attribute does not occur,TRUE
29,SPECIES_10,text,false(),nothingText(),attribute does not occur,TRUE
30,SPECIES_PER_10,integer,false(),nothingInt(),attribute does not occur,TRUE
31,ORIGIN_UPPER,integer,"notNull(origin_upper);isInt(origin_upper);isBetween(origin_upper, 1, 2020)",copyInt(origin_upper),Copies source value to ORIGIN_UPPER. Validation  returns error if origin is zero.,TRUE
32,ORIGIN_LOWER,integer,"notNull(origin_lower);isInt(origin_lower);isBetween(origin_lower, 1, 2020)",copyInt(origin_lower),Copies source value to ORIGIN_LOWER. Validation  returns error if origin is zero.,TRUE
33,SITE_CLASS,text,false(),nothingText(),Attribute does not occur,TRUE
34,SITE_INDEX,double precision,false(),nothingDouble(),Attribute does not occur,TRUE
