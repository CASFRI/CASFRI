rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"notEmpty({species_1, species_2, species_3, species_4, species_5, species_6}, TRUE);matchList(row_productivity, {'BSH','TMS'})",NA,"Translate only rows where l1_sp1, l1_sp2, l1_sp3, l1_sp4, l1_sp5 or l1_sp6 is not empty. Also rows with productivity info. Note that row productivity values are mapped to null for layer 2 and 3, this is to avoid double counting in the case that only productivity values are available. So layer 2 and 3 will only be included if species info is available.", TRUE
1,CAS_ID,text,notEmpty(inventory_id);notEmpty(src_filename);notNull(orig_stand_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, '', orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','x','x'}, '-', TRUE, TRUE)",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notNull(soil_moist_reg);notEmpty(soil_moist_reg);matchList(soil_moist_reg,{'D','F','M','MF','MM','MW','VD','VF','VM','VW','W'})","mapText(soil_moist_reg, {'D','F','M','MF','MM','MW','VD','VF','VM','VW','W'}, {'DRY','MESIC','MOIST','MESIC','MOIST','WET','DRY','MESIC','MOIST','WET','WET'})",Maps soure value to SOIL_MOIST_REG,TRUE
3,STRUCTURE_PER,integer,true(),copyInt(100),No horizontal structure so structure percent is 100,TRUE
4,STRUCTURE_RANGE,double precision,"notMatchList(inventory_id, {'SK06'}|-8887); matchList(stand_structure, {'C'}|-8887); isNumeric(structure_range)","multiply(structure_range, 2)","Not applicable for SK06. If not a complex stand return not applicable. If stand is complex, return the height range multiplied by 2.",TRUE
5,LAYER,integer,true(),"sk_sfvi_lyr_layer_translation({height_layer1, height_layer2, height_layer3}, {species_1_layer1}, {species_1_layer2}, {species_1_layer3}, row_productivity, layer)",Reorder the layers that exist in the polygon by height and return the index of the layer being processed. Non-productive rows are assigned to layer 1.,TRUE
6,LAYER_RANK,integer,notNull(layer_rank);isInt(layer_rank),copyInt(layer_rank),"Layer rank is assigned as 1 for first layer (e.g. l1_sp1), 2 for second layer (e.g. l2_sp1) and 3 for third layer (e.g. l3_sp1).",TRUE
7,CROWN_CLOSURE_UPPER,integer,"notNull(crown_closure_upper);isInt(crown_closure_upper);isBetween(crown_closure_upper,0,100)",copyInt(crown_closure_upper),Copy source value,TRUE
8,CROWN_CLOSURE_LOWER,integer,"notNull(crown_closure_lower);isInt(crown_closure_lower);isBetween(crown_closure_lower,0,100)",copyInt(crown_closure_lower),Copy source value,TRUE
9,HEIGHT_UPPER,double precision,"notNull(height_upper);isInt(height_upper);isBetween(height_upper,0,100)",copyDouble(height_upper),Copy source value,TRUE
10,HEIGHT_LOWER,double precision,"notNull(height_lower);isInt(height_lower);isBetween(height_lower,0,100)",copyDouble(height_lower),Copy source value,TRUE
11,PRODUCTIVITY,text,"matchList(productivity, {'BSH','TMS'}|UNKNOWN_VALUE)","mapText(productivity, {'BSH','TMS'}, {'NON_PRODUCTIVE_FOREST', 'NON_PRODUCTIVE_FOREST'})","Translate brush and treed muskeg as non productive types, otherwise UNKNOWN.",TRUE
12,PRODUCTIVITY_TYPE,text,"matchList(productivity, {'BSH','TMS'}|UNKNOWN_VALUE)","mapText(productivity, {'BSH','TMS'}, {'SCRUB_SHRUB', 'TREED_MUSKEG'})","Translate brush and treed muskeg as non productive types, otherwise UNKNOWN.",TRUE
13,SPECIES_1,text,"notNull(species_1|NOT_APPLICABLE);notEmpty(species_1);matchTable(species_1, 'translation', 'species_code_mapping', 'sk_species_codes', TRUE)","lookupText(species_1, 'translation', 'species_code_mapping', 'sk_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_1 using lookup table,TRUE
14,SPECIES_PER_1,integer,"notNull(species_per_1|-8887);isInt(species_per_1);isBetween(species_per_1,1,10)","multiplyInt(species_per_1, 10)",Multiply percent integer by 10,TRUE
15,SPECIES_2,text,"notNull(species_2|NOT_APPLICABLE);notEmpty(species_2);matchTable(species_2, 'translation', 'species_code_mapping', 'sk_species_codes', TRUE)","lookupText(species_2, 'translation', 'species_code_mapping', 'sk_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_2 if available using lookup table,TRUE
16,SPECIES_PER_2,integer,"notNull(species_per_2|-8887);isInt(species_per_2);isBetween(species_per_2,1,10)","multiplyInt(species_per_2, 10)",Multiply percent integer by 10,TRUE
17,SPECIES_3,text,"notNull(species_3|NOT_APPLICABLE);notEmpty(species_3);matchTable(species_3, 'translation', 'species_code_mapping', 'sk_species_codes', TRUE)","lookupText(species_3, 'translation', 'species_code_mapping', 'sk_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_3 if available using lookup table,TRUE
18,SPECIES_PER_3,integer,"notNull(species_per_3|-8887);isInt(species_per_3);isBetween(species_per_3,1,10)","multiplyInt(species_per_3, 10)",Multiply percent integer by 10,TRUE
19,SPECIES_4,text,"notNull(species_4|NOT_APPLICABLE);notEmpty(species_4);matchTable(species_4, 'translation', 'species_code_mapping', 'sk_species_codes', TRUE)","lookupText(species_4, 'translation', 'species_code_mapping', 'sk_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_4 if available using lookup table,TRUE
20,SPECIES_PER_4,integer,"notNull(species_per_4|-8887);isInt(species_per_4);isBetween(species_per_4,1,10)","multiplyInt(species_per_4, 10)",Multiply percent integer by 10,TRUE
21,SPECIES_5,text,"notNull(species_5|NOT_APPLICABLE);notEmpty(species_5);matchTable(species_5, 'translation', 'species_code_mapping', 'sk_species_codes', TRUE)","lookupText(species_5, 'translation', 'species_code_mapping', 'sk_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_5 if available using lookup table,TRUE
22,SPECIES_PER_5,integer,"notNull(species_per_5|-8887);isInt(species_per_5);isBetween(species_per_5,1,10)","multiplyInt(species_per_5, 10)",Multiply percent integer by 10,TRUE
23,SPECIES_6,text,"notNull(species_6|NOT_APPLICABLE);notEmpty(species_6);matchTable(species_6, 'translation', 'species_code_mapping', 'sk_species_codes', TRUE)","lookupText(species_6, 'translation', 'species_code_mapping', 'sk_species_codes', 'casfri_species_codes', TRUE)",Maps source value to SPECIES_6 if available using lookup table,TRUE
24,SPECIES_PER_6,integer,"notNull(species_per_6|-8887);isInt(species_per_6);isBetween(species_per_6,1,10)","multiplyInt(species_per_6, 10)",Multiply percent integer by 10,TRUE
25,SPECIES_7,text,false(),nothingText(),attribute does not occur,TRUE
26,SPECIES_PER_7,integer,false(),nothingInt(),attribute does not occur,TRUE
27,SPECIES_8,text,false(),nothingText(),attribute does not occur,TRUE
28,SPECIES_PER_8,integer,false(),nothingInt(),attribute does not occur,TRUE
29,SPECIES_9,text,false(),nothingText(),attribute does not occur,TRUE
30,SPECIES_PER_9,integer,false(),nothingInt(),attribute does not occur,TRUE
31,SPECIES_10,text,false(),nothingText(),attribute does not occur,TRUE
32,SPECIES_PER_10,integer,false(),nothingInt(),attribute does not occur,TRUE
33,ORIGIN_UPPER,integer,"notNull(origin_upper);isInt(origin_upper);isBetween(origin_upper, 1000, 2020)",copyInt(origin_upper),Copies source value to ORIGIN_UPPER. Validation  returns error if origin is zero.,TRUE
34,ORIGIN_LOWER,integer,"notNull(origin_lower);isInt(origin_lower);isBetween(origin_lower, 1000, 2020)",copyInt(origin_lower),Copies source value to ORIGIN_LOWER. Validation  returns error if origin is zero.,TRUE
35,SITE_CLASS,text,false(),nothingText(),Attribute does not occur,TRUE
36,SITE_INDEX,double precision,false(),nothingDouble(),Attribute does not occur,TRUE
