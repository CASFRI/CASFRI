rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"isGreaterThan(height_upper, 0, FALSE)",NA,Translate all rows with a height. ,TRUE
1,CAS_ID,text,notEmpty(inventory_id);notNull(src_filename);notNull(orig_stand_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, '', orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','0','0'}, '-', 'TRUE', 'TRUE')",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"matchList(soil_moist_reg,{'LL','LLPM','PMLL'} |UNKNOWN_VALUE)","mapText(soil_moist_reg, {'LL','LLPM','PMLL'}, {'WET','WET','WET'})","Can derive a wet moisture using leading species. Leading species larch,larch black spruce, and black spruce larch=wet",TRUE
3,STRUCTURE_PER,integer,true(),"mapInt(structure_per, {'1','2','3','4','5','6','7','8','9','10'}, {10,20,30,40,50,60,70,80,90,100})",Maps source value to STRUCTURE_PER ,TRUE
4,STRUCTURE_RANGE,double precision,false(),nothingDouble(),No complex structure,TRUE
5,LAYER,integer,true(),"countOfNotNull({species_layer1,height_layer1}, {species_layer2,height_layer2}, {species_layer3,height_layer3}, {nfl_layer1}, {nfl_layer2}, {nfl_layer3}, layer, 'TRUE')",Calculate number of layer according to vegetation composition,TRUE
6,LAYER_RANK,integer,false(),nothingInt(),Attribute does not occur,TRUE
7,CROWN_CLOSURE_UPPER,integer,"notEmpty(crown_closure_upper);notNull(crown_closure_upper);matchList(crown_closure_upper,{'1','2','3'})","mapInt(crown_closure_upper, {'1','2','3'}, {0,30,60})",Maps source value to CROWN_CLOSURE_UPPER using lists of values,TRUE
8,CROWN_CLOSURE_LOWER,integer,"notEmpty(crown_closure_lower);notNull(crown_closure_lower);matchList(crown_closure_lower,{'1','2','3'})","mapInt(crown_closure_lower, {'1','2','3'}, {30,60,100})",Maps source value to CROWN_CLOSURE_LOWER using lists of values,TRUE
9,HEIGHT_UPPER,double precision,"notEmpty(height_upper);notNull(height_upper);matchList(height_upper,{'1','3','5','7'})","mapDouble(height_upper, {'1','3','5','7'}, {6,12,18,100})",Translation is different for commercial and non commercial forest. Check there is a valid height code of 1 to 8. 6 to 8 are only valid for commercial so make sure non commercial doesnt have these values. Translation determines if polygon is commercial or non commercial based on stand_id and working_group. Then runs either the commercial or non commercial mapping.,FALSE
10,HEIGHT_LOWER,double precision,"notEmpty(height_lower);notNull(height_lower);matchList(height_lower,{'1','3','5','7'})","mapDouble(height_lower, {'1','3','5','7'}, {0,7,13,19})",Translation is different for commercial and non commercial forest. Check there is a valid height code of 1 to 8. 6 to 8 are only valid for commercial so make sure non commercial doesnt have these values. Translation determines if polygon is commercial or non commercial based on stand_id and working_group. Then runs either the commercial or non commercial mapping.,FALSE
11,PRODUCTIVITY,text,false(),nothingText(),Attribute does not occur,TRUE
12,PRODUCTIVITY_TYPE,text,false(),nothingText(),Attribute does not occur,TRUE
13,SPECIES_1,text,"notNull(species_1);notEmpty(species_1);lengthMatchList(species_1, {2,4,6}|NOT_APPLICABLE);matchTableSubstring(species_1, 1,2, 'translation', 'species_code_mapping', 'pc01_species_codes', TRUE, TRUE)","lookupTextSubstring(species_1, 1, 2, 'translation', 'species_code_mapping', 'pc01_species_codes', 'casfri_species_codes', FALSE, FALSE)",Maps source value to SPECIES_4 using lookup table,TRUE
14,SPECIES_PER_1,integer,"notNull(species_per_1);notEmpty(species_per_1);notMatchList(species_per_1, '0'|-8888);lengthMatchList(species_per_1, {2,4,6}|-8887)","pc01_species_per_translation(species_1,'1')",Check species code is long enough to have a species_1. Return correct percent based on the total number of species.,TRUE
15,SPECIES_2,text,"notNull(species_2);notEmpty(species_2);lengthMatchList(species_2, {4,6}|NOT_APPLICABLE);matchTableSubstring(species_2, 3,2, 'translation', 'species_code_mapping', 'pc01_species_codes', TRUE, TRUE)","lookupTextSubstring(species_1, 3, 2, 'translation', 'species_code_mapping', 'pc01_species_codes', 'casfri_species_codes', FALSE, FALSE)",Maps source value to SPECIES_4 using lookup table,TRUE
16,SPECIES_PER_2,integer,"notNull(species_per_2);notEmpty(species_per_2);notMatchList(species_per_2, '0'|-8888);lengthMatchList(species_per_2, {4,6}|-8887)","pc01_species_per_translation(species_2,'2')",Check species code is long enough to have a species_2. Return correct percent based on the total number of species.,TRUE
17,SPECIES_3,text,"notNull(species_3);notEmpty(species_3);lengthMatchList(species_3, {6}|NOT_APPLICABLE);matchTableSubstring(species_3, 5,2, 'translation', 'species_code_mapping', 'pc01_species_codes', TRUE, TRUE)","lookupTextSubstring(species_1, 5, 2, 'translation', 'species_code_mapping', 'pc01_species_codes', 'casfri_species_codes', FALSE, FALSE)",Maps source value to SPECIES_4 using lookup table,TRUE
18,SPECIES_PER_3,integer,"notNull(species_per_3);notEmpty(species_per_3);notMatchList(species_per_3, '0'|-8888);lengthMatchList(species_per_3, {6}|-8887)","pc01_species_per_translation(species_3,'3')",Check species code is long enough to have a species_3. Return correct percent based on the total number of species.,TRUE
19,SPECIES_4,text,false(),nothingText(),Attribute does not occur,TRUE
20,SPECIES_PER_4,integer,false(),nothingInt(),Attribute does not occur,TRUE
21,SPECIES_5,text,false(),nothingText(),Attribute does not occur,TRUE
22,SPECIES_PER_5,integer,false(),nothingInt(),Attribute does not occur,TRUE
23,SPECIES_6,text,false(),nothingText(),Attribute does not occur,TRUE
24,SPECIES_PER_6,integer,false(),nothingInt(),Attribute does not occur,TRUE
25,SPECIES_7,text,false(),nothingText(),Attribute does not occur,TRUE
26,SPECIES_PER_7,integer,false(),nothingInt(),Attribute does not occur,TRUE
27,SPECIES_8,text,false(),nothingText(),Attribute does not occur,TRUE
28,SPECIES_PER_8,integer,false(),nothingInt(),Attribute does not occur,TRUE
29,SPECIES_9,text,false(),nothingText(),Attribute does not occur,TRUE
30,SPECIES_PER_9,integer,false(),nothingInt(),Attribute does not occur,TRUE
31,SPECIES_10,text,false(),nothingText(),Attribute does not occur,TRUE
32,SPECIES_PER_10,integer,false(),nothingInt(),Attribute does not occur,TRUE
33,ORIGIN_UPPER,integer,"matchList(origin_upper,{'1','1A','2','2A','3','3A','4','5','5A'})","mapInt(origin_upper, {'1','1A','2','2A','3','3A','4','5','5A'}, {1958,1968,1958,1958,1938,1938,1908,1888,1888})",Attribute does not occur,TRUE
34,ORIGIN_LOWER,integer,"matchList(origin_lower,{'1','1A','2','2A','3','3A','4','5','5A'})","mapInt(origin_lower, {'1','1A','2','2A','3','3A','4','5','5A'}, {1958,1968,1938,1938,1908,1908,1888,-8886,-8886})",Attribute does not occur,TRUE
35,SITE_CLASS,text,false(),nothingText(),Attribute does not occur,TRUE
36,SITE_INDEX,double precision,false(),nothingDouble(),Attribute does not occur,TRUE
