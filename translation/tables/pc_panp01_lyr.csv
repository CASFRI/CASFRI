rule_id,target_attribute,target_attribute_type,validation_rules,translation_rules,description,desc_uptodate_with_rules
0,ROW_TRANSLATION_RULE,NA,"matchListSubstring(species_1, 1, 2, {'PB','AB','PG','PT','BP','PM','LL'}); isGreaterThan(height_upper, 0, FALSE)",NA,Translate all rows that have presence of species or height. ,TRUE
1,CAS_ID,text,notEmpty(inventory_id);notEmpty(src_filename);notNull(orig_stand_id);notNull(ogc_fid),"padConcat({inventory_id, src_filename, '', orig_stand_id, ogc_fid}, {4,15,10,10,7}, {'x','x','x','x','x'}, '-', TRUE, TRUE)",Concatenates five attributes to create CAS_ID,TRUE
2,SOIL_MOIST_REG,text,"notEmpty(soil_moist_reg);notNull(soil_moist_reg);notMatchList(soil_moist_reg, '0' |NULL_VALUE);matchList(soil_moist_reg,{'LL','LLPM','PMLL'} |UNKNOWN_VALUE)","mapText(soil_moist_reg, {'LL','LLPM','PMLL'}, {'WET','WET','WET'})","Maps source value to SOIL_MOIST_REG. Soil moisture regime is derived from leading species. When larch, larch black spruce, and black spruce larch = wet.",TRUE
3,STRUCTURE_PER,integer,"notEmpty(structure_per);notNull(structure_per);isInt(structure_per);notMatchList(structure_per, 0 |-8888);isBetween(structure_per, 1, 10|-9997)","multiply(structure_per, 10)",Multiple value by 10,TRUE
4,STRUCTURE_RANGE,double precision,false(),nothingDouble(),No complex structure,TRUE
5,LAYER,integer,true(),"countOfNotNull({species_layer1,height_layer1}, {species_layer2,height_layer2}, {species_layer3,height_layer3}, {nfl_layer1}, {nfl_layer2}, {nfl_layer3}, layer, TRUE)","Calculate number of layer according to vegetation composition.  Because of its horizontal structure, the present schema doesn't allow to consider verticality in PC01. Thus understory species are not considered in the count of layer. ",TRUE
6,LAYER_RANK,integer,false(),nothingInt(),Attribute does not occur,TRUE
7,CROWN_CLOSURE_UPPER,integer,"notNull(crown_closure_upper);notEmpty(crown_closure_upper);isInt(crown_closure_upper);isGreaterThan(crown_closure_upper, 0, FALSE|-8888);isBetween(crown_closure_upper,1,3)","mapInt(crown_closure_upper, {1,2,3}, {30,60,100})",Maps source value to CROWN_CLOSURE_UPPER using lists of values,TRUE
8,CROWN_CLOSURE_LOWER,integer,"notNull(crown_closure_lower);notEmpty(crown_closure_lower);isInt(crown_closure_lower);isGreaterThan(crown_closure_lower, 0, FALSE|-8888);isBetween(crown_closure_lower,1,3)","mapInt(crown_closure_lower, {1,2,3}, {0,30,60})",Maps source value to CROWN_CLOSURE_LOWER using lists of values,TRUE
9,HEIGHT_UPPER,double precision,"notNull(height_upper);notEmpty(height_upper);isInt(height_upper);isGreaterThan(height_upper, 0, FALSE |-8888);matchList(height_upper,{1,3,5,7})","mapDouble(height_upper, {1,3,5,7}, {6,12,18,100})",Maps source value to HEIGHT_UPPER using lists of values,TRUE
10,HEIGHT_LOWER,double precision,"notNull(height_lower);notEmpty(height_lower);isInt(height_upper);isGreaterThan(height_lower, 0, FALSE|-8888);matchList(height_lower,{1,3,5,7})","mapDouble(height_lower, {1,3,5,7}, {0,7,13,19})",Maps source value to HEIGHT_LOWER using lists of values,TRUE
11,PRODUCTIVITY,text,false(),nothingText(),Attribute does not occur,TRUE
12,PRODUCTIVITY_TYPE,text,false(),nothingText(),Attribute does not occur,TRUE
13,SPECIES_1,text,"notNull(species_1);notEmpty(species_1);notMatchList(species_1, 0|NULL_VALUE);lengthMatchList(species_1, {2,4,6}|NOT_APPLICABLE);matchTable(substringText(species_1, 1, 2, TRUE), 'translation', 'species_code_mapping', 'pc01_species_codes', TRUE)","lookupText(substringText(species_1, 1, 2, TRUE), 'translation', 'species_code_mapping', 'pc01_species_codes', 'casfri_species_codes', TRUE)",Substrings first species and maps source value to SPECIES_1 using lookup table,TRUE
14,SPECIES_PER_1,integer,"notNull(species_per_1);notEmpty(species_per_1);lengthMatchList(species_per_1, {2,4,6}|-8888)","pc01_species_per_translation(species_1, 1)",Check species code is long enough to have a SPECIES_1. Return correct percent based on the total number of species.,TRUE
15,SPECIES_2,text,"notNull(species_2);notEmpty(species_2);notMatchList(species_1, 0|NULL_VALUE);lengthMatchList(species_2, {4,6}|NOT_APPLICABLE);matchTable(substringText(species_2, 3, 2, TRUE), 'translation', 'species_code_mapping', 'pc01_species_codes', TRUE)","lookupText(substringText(species_1, 3, 2, TRUE), 'translation', 'species_code_mapping', 'pc01_species_codes', 'casfri_species_codes', TRUE)",Substrings second species and maps source value to SPECIES_2 using lookup table,TRUE
16,SPECIES_PER_2,integer,"notNull(species_per_2);notEmpty(species_per_2);lengthMatchList(species_per_2, {4,6}|-8888)","pc01_species_per_translation(species_2, 2)",Check species code is long enough to have a SPECIES_2. Return correct percent based on the total number of species.,TRUE
17,SPECIES_3,text,"notNull(species_3);notEmpty(species_3);notMatchList(species_1, 0|NULL_VALUE);lengthMatchList(species_3, {6}|NOT_APPLICABLE);matchTable(substringText(species_3, 5, 2, TRUE), 'translation', 'species_code_mapping', 'pc01_species_codes', TRUE)","lookupText(substringText(species_1, 5, 2, TRUE), 'translation', 'species_code_mapping', 'pc01_species_codes', 'casfri_species_codes', TRUE)",Substrings third species and maps source value to SPECIES_3 using lookup table,TRUE
18,SPECIES_PER_3,integer,"notNull(species_per_3);notEmpty(species_per_3);lengthMatchList(species_per_3, {6}|-8888)","pc01_species_per_translation(species_3, 3)",Check species code is long enough to have a SPECIES_3. Return correct percent based on the total number of species.,TRUE
19,SPECIES_4,text,false(),nothingText(),Attribute does not occur,TRUE
20,SPECIES_PER_4,integer,false(),nothingInt(),Attribute does not occur,TRUE
21,SPECIES_5,text,false(),nothingText(),Attribute does not occur,TRUE
22,SPECIES_PER_5,integer,false(),nothingInt(),Attribute does not occur,TRUE
23,SPECIES_6,text,false(),nothingText(),Attribute does not occur,TRUE
24,SPECIES_PER_6,integer,false(),nothingInt(),Attribute does not occur,TRUE
25,SPECIES_7,text,false(),nothingText(),Attribute does not occur,TRUE
26,SPECIES_PER_7,integer,false(),nothingInt(),Attribute does not occur,TRUE
27,SPECIES_8,text,false(),nothingText(),Attribute does not occur,TRUE
28,SPECIES_PER_8,integer,false(),nothingInt(),Attribute does not occur,TRUE
29,SPECIES_9,text,false(),nothingText(),Attribute does not occur,TRUE
30,SPECIES_PER_9,integer,false(),nothingInt(),Attribute does not occur,TRUE
31,SPECIES_10,text,false(),nothingText(),Attribute does not occur,TRUE
32,SPECIES_PER_10,integer,false(),nothingInt(),Attribute does not occur,TRUE
33,ORIGIN_UPPER,integer,"notNull(origin_upper);notEmpty(origin_upper);notMatchList(origin_upper, 0|-8888);matchList(origin_upper,{'1','1A','2','2A','3','3A','4','5','5A'}|-9997)","mapInt(origin_upper, {'1','1A','2','2A','3','3A','4','5','5A'}, {1958,1968,1958,1958,1938,1938,1908,1888,1888})","Calculates ORIGIN_UPPER as reference year (1968) minus the lower bound of age class. Validations checks class age has a value, returns NOT_IN_SET if class age is unknown.",TRUE
34,ORIGIN_LOWER,integer,"notNull(origin_lower);notEmpty(origin_lower);notMatchList(origin_lower, 0|-8888);notMatchList(origin_lower, {'5','5A'}|-8886);matchList(origin_lower,{'1','1A','2','2A','3','3A','4','5','5A'}|-9997)","mapInt(origin_lower, {'1','1A','2','2A','3','3A','4'}, {1958,1968,1938,1938,1908,1908,1888})","Calculates ORIGIN_LOWER as reference year (1968) minus the upper bound of age class. Validations checks class age has a value, returns NOT_IN_SET if class age is unknown. ORIGIN_LOWER is UNKNOWN when source age is >80.",TRUE
35,SITE_CLASS,text,false(),nothingText(),Attribute does not occur,TRUE
36,SITE_INDEX,double precision,false(),nothingDouble(),Attribute does not occur,TRUE
